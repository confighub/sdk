// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// This file is auto-generated by @hey-api/openapi-ts

import { type Options, listAllBridgeWorkers, createActionResult, getSelf, streamBridgeWorker, listOrgFunctions, invokeFunctionsOnOrg, apiInfo, getMe, listOrganizations, createOrganization, deleteOrganization, getOrganization, updateOrganization, getOrganizationExtended, listOrganizationMembers, createOrganizationMember, deleteOrganizationMember, getOrganizationMember, listSpaces, createSpace, deleteSpace, getSpace, updateSpace, listBridgeWorkers, createBridgeWorker, deleteBridgeWorker, getBridgeWorker, updateBridgeWorker, getBridgeWorkerExtended, listBridgeWorkerFunctions, listBridgeWorkerStatuses, getBridgeWorkerStatus, getSpaceExtended, listFunctions, invokeFunctions, listLinks, createLink, deleteLink, getLink, updateLink, getLinkExtended, listSets, createSet, deleteSet, getSet, updateSet, getSetExtended, listTargets, createTarget, deleteTarget, getTarget, updateTarget, getTargetExtended, listTriggers, createTrigger, deleteTrigger, getTrigger, updateTrigger, getTriggerExtended, listUnits, createUnit, listExtendedUnits, deleteUnit, getUnit, updateUnit, applyUnit, approveUnit, destroyUnit, getUnitExtended, importUnit, downloadLiveStateUnit, listExtendedMutations, getExtendedMutation, getMutationExtended, refreshUnit, listExtendedRevisions, getExtendedRevision, getRevisionData, getRevisionExtended, listUnitEvents, getUnitEvent, upgradeDownstreamUnits, listAllTargets, listAllUnits, listUsers, getUser } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { ListAllBridgeWorkersData, CreateActionResultData, CreateActionResultError, CreateActionResultResponse, GetSelfData, StreamBridgeWorkerData, StreamBridgeWorkerError, StreamBridgeWorkerResponse, ListOrgFunctionsData, InvokeFunctionsOnOrgData, InvokeFunctionsOnOrgError, InvokeFunctionsOnOrgResponse, ApiInfoData, GetMeData, ListOrganizationsData, CreateOrganizationData, CreateOrganizationError, CreateOrganizationResponse, DeleteOrganizationData, DeleteOrganizationError, DeleteOrganizationResponse, GetOrganizationData, UpdateOrganizationData, UpdateOrganizationError, UpdateOrganizationResponse, GetOrganizationExtendedData, ListOrganizationMembersData, CreateOrganizationMemberData, CreateOrganizationMemberError, CreateOrganizationMemberResponse, DeleteOrganizationMemberData, DeleteOrganizationMemberError, DeleteOrganizationMemberResponse, GetOrganizationMemberData, ListSpacesData, CreateSpaceData, CreateSpaceError, CreateSpaceResponse, DeleteSpaceData, DeleteSpaceError, DeleteSpaceResponse, GetSpaceData, UpdateSpaceData, UpdateSpaceError, UpdateSpaceResponse, ListBridgeWorkersData, CreateBridgeWorkerData, CreateBridgeWorkerError, CreateBridgeWorkerResponse, DeleteBridgeWorkerData, DeleteBridgeWorkerError, DeleteBridgeWorkerResponse, GetBridgeWorkerData, UpdateBridgeWorkerData, UpdateBridgeWorkerError, UpdateBridgeWorkerResponse, GetBridgeWorkerExtendedData, ListBridgeWorkerFunctionsData, ListBridgeWorkerStatusesData, GetBridgeWorkerStatusData, GetSpaceExtendedData, ListFunctionsData, InvokeFunctionsData, InvokeFunctionsError, InvokeFunctionsResponse, ListLinksData, CreateLinkData, CreateLinkError, CreateLinkResponse, DeleteLinkData, DeleteLinkError, DeleteLinkResponse, GetLinkData, UpdateLinkData, UpdateLinkError, UpdateLinkResponse, GetLinkExtendedData, ListSetsData, CreateSetData, CreateSetError, CreateSetResponse, DeleteSetData, DeleteSetError, DeleteSetResponse, GetSetData, UpdateSetData, UpdateSetError, UpdateSetResponse, GetSetExtendedData, ListTargetsData, CreateTargetData, CreateTargetError, CreateTargetResponse, DeleteTargetData, DeleteTargetError, DeleteTargetResponse, GetTargetData, UpdateTargetData, UpdateTargetError, UpdateTargetResponse, GetTargetExtendedData, ListTriggersData, CreateTriggerData, CreateTriggerError, CreateTriggerResponse, DeleteTriggerData, DeleteTriggerError, DeleteTriggerResponse, GetTriggerData, UpdateTriggerData, UpdateTriggerError, UpdateTriggerResponse, GetTriggerExtendedData, ListUnitsData, CreateUnitData, CreateUnitError, CreateUnitResponse, ListExtendedUnitsData, DeleteUnitData, DeleteUnitError, DeleteUnitResponse, GetUnitData, UpdateUnitData, UpdateUnitError, UpdateUnitResponse, ApplyUnitData, ApplyUnitError, ApplyUnitResponse, ApproveUnitData, ApproveUnitError, ApproveUnitResponse, DestroyUnitData, DestroyUnitError, DestroyUnitResponse, GetUnitExtendedData, ImportUnitData, ImportUnitError, ImportUnitResponse, DownloadLiveStateUnitData, ListExtendedMutationsData, GetExtendedMutationData, GetMutationExtendedData, RefreshUnitData, RefreshUnitError, RefreshUnitResponse, ListExtendedRevisionsData, GetExtendedRevisionData, GetRevisionDataData, GetRevisionExtendedData, ListUnitEventsData, GetUnitEventData, UpgradeDownstreamUnitsData, UpgradeDownstreamUnitsError, UpgradeDownstreamUnitsResponse, ListAllTargetsData, ListAllUnitsData, ListUsersData, GetUserData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const listAllBridgeWorkersQueryKey = (options?: Options<ListAllBridgeWorkersData>) => createQueryKey('listAllBridgeWorkers', options);

export const listAllBridgeWorkersOptions = (options?: Options<ListAllBridgeWorkersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listAllBridgeWorkers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listAllBridgeWorkersQueryKey(options)
    });
};

export const createActionResultQueryKey = (options: Options<CreateActionResultData>) => createQueryKey('createActionResult', options);

export const createActionResultOptions = (options: Options<CreateActionResultData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createActionResult({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createActionResultQueryKey(options)
    });
};

export const createActionResultMutation = (options?: Partial<Options<CreateActionResultData>>) => {
    const mutationOptions: UseMutationOptions<CreateActionResultResponse, CreateActionResultError, Options<CreateActionResultData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createActionResult({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSelfQueryKey = (options: Options<GetSelfData>) => createQueryKey('getSelf', options);

export const getSelfOptions = (options: Options<GetSelfData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSelf({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSelfQueryKey(options)
    });
};

export const streamBridgeWorkerQueryKey = (options: Options<StreamBridgeWorkerData>) => createQueryKey('streamBridgeWorker', options);

export const streamBridgeWorkerOptions = (options: Options<StreamBridgeWorkerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await streamBridgeWorker({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: streamBridgeWorkerQueryKey(options)
    });
};

export const streamBridgeWorkerMutation = (options?: Partial<Options<StreamBridgeWorkerData>>) => {
    const mutationOptions: UseMutationOptions<StreamBridgeWorkerResponse, StreamBridgeWorkerError, Options<StreamBridgeWorkerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await streamBridgeWorker({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listOrgFunctionsQueryKey = (options?: Options<ListOrgFunctionsData>) => createQueryKey('listOrgFunctions', options);

export const listOrgFunctionsOptions = (options?: Options<ListOrgFunctionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listOrgFunctions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listOrgFunctionsQueryKey(options)
    });
};

export const invokeFunctionsOnOrgQueryKey = (options?: Options<InvokeFunctionsOnOrgData>) => createQueryKey('invokeFunctionsOnOrg', options);

export const invokeFunctionsOnOrgOptions = (options?: Options<InvokeFunctionsOnOrgData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await invokeFunctionsOnOrg({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: invokeFunctionsOnOrgQueryKey(options)
    });
};

export const invokeFunctionsOnOrgMutation = (options?: Partial<Options<InvokeFunctionsOnOrgData>>) => {
    const mutationOptions: UseMutationOptions<InvokeFunctionsOnOrgResponse, InvokeFunctionsOnOrgError, Options<InvokeFunctionsOnOrgData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await invokeFunctionsOnOrg({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const apiInfoQueryKey = (options?: Options<ApiInfoData>) => createQueryKey('apiInfo', options);

export const apiInfoOptions = (options?: Options<ApiInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await apiInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: apiInfoQueryKey(options)
    });
};

export const getMeQueryKey = (options?: Options<GetMeData>) => createQueryKey('getMe', options);

export const getMeOptions = (options?: Options<GetMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMeQueryKey(options)
    });
};

export const listOrganizationsQueryKey = (options?: Options<ListOrganizationsData>) => createQueryKey('listOrganizations', options);

export const listOrganizationsOptions = (options?: Options<ListOrganizationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listOrganizations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listOrganizationsQueryKey(options)
    });
};

export const createOrganizationQueryKey = (options?: Options<CreateOrganizationData>) => createQueryKey('createOrganization', options);

export const createOrganizationOptions = (options?: Options<CreateOrganizationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createOrganization({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createOrganizationQueryKey(options)
    });
};

export const createOrganizationMutation = (options?: Partial<Options<CreateOrganizationData>>) => {
    const mutationOptions: UseMutationOptions<CreateOrganizationResponse, CreateOrganizationError, Options<CreateOrganizationData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createOrganization({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteOrganizationMutation = (options?: Partial<Options<DeleteOrganizationData>>) => {
    const mutationOptions: UseMutationOptions<DeleteOrganizationResponse, DeleteOrganizationError, Options<DeleteOrganizationData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteOrganization({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrganizationQueryKey = (options: Options<GetOrganizationData>) => createQueryKey('getOrganization', options);

export const getOrganizationOptions = (options: Options<GetOrganizationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrganization({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrganizationQueryKey(options)
    });
};

export const updateOrganizationMutation = (options?: Partial<Options<UpdateOrganizationData>>) => {
    const mutationOptions: UseMutationOptions<UpdateOrganizationResponse, UpdateOrganizationError, Options<UpdateOrganizationData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateOrganization({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrganizationExtendedQueryKey = (options: Options<GetOrganizationExtendedData>) => createQueryKey('getOrganizationExtended', options);

export const getOrganizationExtendedOptions = (options: Options<GetOrganizationExtendedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrganizationExtended({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrganizationExtendedQueryKey(options)
    });
};

export const listOrganizationMembersQueryKey = (options: Options<ListOrganizationMembersData>) => createQueryKey('listOrganizationMembers', options);

export const listOrganizationMembersOptions = (options: Options<ListOrganizationMembersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listOrganizationMembers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listOrganizationMembersQueryKey(options)
    });
};

export const createOrganizationMemberQueryKey = (options: Options<CreateOrganizationMemberData>) => createQueryKey('createOrganizationMember', options);

export const createOrganizationMemberOptions = (options: Options<CreateOrganizationMemberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createOrganizationMember({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createOrganizationMemberQueryKey(options)
    });
};

export const createOrganizationMemberMutation = (options?: Partial<Options<CreateOrganizationMemberData>>) => {
    const mutationOptions: UseMutationOptions<CreateOrganizationMemberResponse, CreateOrganizationMemberError, Options<CreateOrganizationMemberData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createOrganizationMember({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteOrganizationMemberMutation = (options?: Partial<Options<DeleteOrganizationMemberData>>) => {
    const mutationOptions: UseMutationOptions<DeleteOrganizationMemberResponse, DeleteOrganizationMemberError, Options<DeleteOrganizationMemberData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteOrganizationMember({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrganizationMemberQueryKey = (options: Options<GetOrganizationMemberData>) => createQueryKey('getOrganizationMember', options);

export const getOrganizationMemberOptions = (options: Options<GetOrganizationMemberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrganizationMember({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrganizationMemberQueryKey(options)
    });
};

export const listSpacesQueryKey = (options?: Options<ListSpacesData>) => createQueryKey('listSpaces', options);

export const listSpacesOptions = (options?: Options<ListSpacesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listSpaces({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSpacesQueryKey(options)
    });
};

export const createSpaceQueryKey = (options?: Options<CreateSpaceData>) => createQueryKey('createSpace', options);

export const createSpaceOptions = (options?: Options<CreateSpaceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createSpace({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createSpaceQueryKey(options)
    });
};

export const createSpaceMutation = (options?: Partial<Options<CreateSpaceData>>) => {
    const mutationOptions: UseMutationOptions<CreateSpaceResponse, CreateSpaceError, Options<CreateSpaceData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createSpace({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteSpaceMutation = (options?: Partial<Options<DeleteSpaceData>>) => {
    const mutationOptions: UseMutationOptions<DeleteSpaceResponse, DeleteSpaceError, Options<DeleteSpaceData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteSpace({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSpaceQueryKey = (options: Options<GetSpaceData>) => createQueryKey('getSpace', options);

export const getSpaceOptions = (options: Options<GetSpaceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSpace({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSpaceQueryKey(options)
    });
};

export const updateSpaceMutation = (options?: Partial<Options<UpdateSpaceData>>) => {
    const mutationOptions: UseMutationOptions<UpdateSpaceResponse, UpdateSpaceError, Options<UpdateSpaceData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateSpace({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listBridgeWorkersQueryKey = (options: Options<ListBridgeWorkersData>) => createQueryKey('listBridgeWorkers', options);

export const listBridgeWorkersOptions = (options: Options<ListBridgeWorkersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listBridgeWorkers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listBridgeWorkersQueryKey(options)
    });
};

export const createBridgeWorkerQueryKey = (options: Options<CreateBridgeWorkerData>) => createQueryKey('createBridgeWorker', options);

export const createBridgeWorkerOptions = (options: Options<CreateBridgeWorkerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createBridgeWorker({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createBridgeWorkerQueryKey(options)
    });
};

export const createBridgeWorkerMutation = (options?: Partial<Options<CreateBridgeWorkerData>>) => {
    const mutationOptions: UseMutationOptions<CreateBridgeWorkerResponse, CreateBridgeWorkerError, Options<CreateBridgeWorkerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createBridgeWorker({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteBridgeWorkerMutation = (options?: Partial<Options<DeleteBridgeWorkerData>>) => {
    const mutationOptions: UseMutationOptions<DeleteBridgeWorkerResponse, DeleteBridgeWorkerError, Options<DeleteBridgeWorkerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteBridgeWorker({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBridgeWorkerQueryKey = (options: Options<GetBridgeWorkerData>) => createQueryKey('getBridgeWorker', options);

export const getBridgeWorkerOptions = (options: Options<GetBridgeWorkerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBridgeWorker({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBridgeWorkerQueryKey(options)
    });
};

export const updateBridgeWorkerMutation = (options?: Partial<Options<UpdateBridgeWorkerData>>) => {
    const mutationOptions: UseMutationOptions<UpdateBridgeWorkerResponse, UpdateBridgeWorkerError, Options<UpdateBridgeWorkerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateBridgeWorker({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBridgeWorkerExtendedQueryKey = (options: Options<GetBridgeWorkerExtendedData>) => createQueryKey('getBridgeWorkerExtended', options);

export const getBridgeWorkerExtendedOptions = (options: Options<GetBridgeWorkerExtendedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBridgeWorkerExtended({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBridgeWorkerExtendedQueryKey(options)
    });
};

export const listBridgeWorkerFunctionsQueryKey = (options: Options<ListBridgeWorkerFunctionsData>) => createQueryKey('listBridgeWorkerFunctions', options);

export const listBridgeWorkerFunctionsOptions = (options: Options<ListBridgeWorkerFunctionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listBridgeWorkerFunctions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listBridgeWorkerFunctionsQueryKey(options)
    });
};

export const listBridgeWorkerStatusesQueryKey = (options: Options<ListBridgeWorkerStatusesData>) => createQueryKey('listBridgeWorkerStatuses', options);

export const listBridgeWorkerStatusesOptions = (options: Options<ListBridgeWorkerStatusesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listBridgeWorkerStatuses({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listBridgeWorkerStatusesQueryKey(options)
    });
};

export const getBridgeWorkerStatusQueryKey = (options: Options<GetBridgeWorkerStatusData>) => createQueryKey('getBridgeWorkerStatus', options);

export const getBridgeWorkerStatusOptions = (options: Options<GetBridgeWorkerStatusData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBridgeWorkerStatus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBridgeWorkerStatusQueryKey(options)
    });
};

export const getSpaceExtendedQueryKey = (options: Options<GetSpaceExtendedData>) => createQueryKey('getSpaceExtended', options);

export const getSpaceExtendedOptions = (options: Options<GetSpaceExtendedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSpaceExtended({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSpaceExtendedQueryKey(options)
    });
};

export const listFunctionsQueryKey = (options: Options<ListFunctionsData>) => createQueryKey('listFunctions', options);

export const listFunctionsOptions = (options: Options<ListFunctionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listFunctions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listFunctionsQueryKey(options)
    });
};

export const invokeFunctionsQueryKey = (options: Options<InvokeFunctionsData>) => createQueryKey('invokeFunctions', options);

export const invokeFunctionsOptions = (options: Options<InvokeFunctionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await invokeFunctions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: invokeFunctionsQueryKey(options)
    });
};

export const invokeFunctionsMutation = (options?: Partial<Options<InvokeFunctionsData>>) => {
    const mutationOptions: UseMutationOptions<InvokeFunctionsResponse, InvokeFunctionsError, Options<InvokeFunctionsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await invokeFunctions({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listLinksQueryKey = (options: Options<ListLinksData>) => createQueryKey('listLinks', options);

export const listLinksOptions = (options: Options<ListLinksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listLinks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listLinksQueryKey(options)
    });
};

export const createLinkQueryKey = (options: Options<CreateLinkData>) => createQueryKey('createLink', options);

export const createLinkOptions = (options: Options<CreateLinkData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createLink({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createLinkQueryKey(options)
    });
};

export const createLinkMutation = (options?: Partial<Options<CreateLinkData>>) => {
    const mutationOptions: UseMutationOptions<CreateLinkResponse, CreateLinkError, Options<CreateLinkData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createLink({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteLinkMutation = (options?: Partial<Options<DeleteLinkData>>) => {
    const mutationOptions: UseMutationOptions<DeleteLinkResponse, DeleteLinkError, Options<DeleteLinkData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteLink({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getLinkQueryKey = (options: Options<GetLinkData>) => createQueryKey('getLink', options);

export const getLinkOptions = (options: Options<GetLinkData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLink({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLinkQueryKey(options)
    });
};

export const updateLinkMutation = (options?: Partial<Options<UpdateLinkData>>) => {
    const mutationOptions: UseMutationOptions<UpdateLinkResponse, UpdateLinkError, Options<UpdateLinkData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateLink({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getLinkExtendedQueryKey = (options: Options<GetLinkExtendedData>) => createQueryKey('getLinkExtended', options);

export const getLinkExtendedOptions = (options: Options<GetLinkExtendedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getLinkExtended({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getLinkExtendedQueryKey(options)
    });
};

export const listSetsQueryKey = (options: Options<ListSetsData>) => createQueryKey('listSets', options);

export const listSetsOptions = (options: Options<ListSetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listSets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSetsQueryKey(options)
    });
};

export const createSetQueryKey = (options: Options<CreateSetData>) => createQueryKey('createSet', options);

export const createSetOptions = (options: Options<CreateSetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createSet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createSetQueryKey(options)
    });
};

export const createSetMutation = (options?: Partial<Options<CreateSetData>>) => {
    const mutationOptions: UseMutationOptions<CreateSetResponse, CreateSetError, Options<CreateSetData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createSet({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteSetMutation = (options?: Partial<Options<DeleteSetData>>) => {
    const mutationOptions: UseMutationOptions<DeleteSetResponse, DeleteSetError, Options<DeleteSetData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteSet({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSetQueryKey = (options: Options<GetSetData>) => createQueryKey('getSet', options);

export const getSetOptions = (options: Options<GetSetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSetQueryKey(options)
    });
};

export const updateSetMutation = (options?: Partial<Options<UpdateSetData>>) => {
    const mutationOptions: UseMutationOptions<UpdateSetResponse, UpdateSetError, Options<UpdateSetData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateSet({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSetExtendedQueryKey = (options: Options<GetSetExtendedData>) => createQueryKey('getSetExtended', options);

export const getSetExtendedOptions = (options: Options<GetSetExtendedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSetExtended({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSetExtendedQueryKey(options)
    });
};

export const listTargetsQueryKey = (options: Options<ListTargetsData>) => createQueryKey('listTargets', options);

export const listTargetsOptions = (options: Options<ListTargetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listTargets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTargetsQueryKey(options)
    });
};

export const createTargetQueryKey = (options: Options<CreateTargetData>) => createQueryKey('createTarget', options);

export const createTargetOptions = (options: Options<CreateTargetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createTarget({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createTargetQueryKey(options)
    });
};

export const createTargetMutation = (options?: Partial<Options<CreateTargetData>>) => {
    const mutationOptions: UseMutationOptions<CreateTargetResponse, CreateTargetError, Options<CreateTargetData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createTarget({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteTargetMutation = (options?: Partial<Options<DeleteTargetData>>) => {
    const mutationOptions: UseMutationOptions<DeleteTargetResponse, DeleteTargetError, Options<DeleteTargetData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteTarget({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTargetQueryKey = (options: Options<GetTargetData>) => createQueryKey('getTarget', options);

export const getTargetOptions = (options: Options<GetTargetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTarget({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTargetQueryKey(options)
    });
};

export const updateTargetMutation = (options?: Partial<Options<UpdateTargetData>>) => {
    const mutationOptions: UseMutationOptions<UpdateTargetResponse, UpdateTargetError, Options<UpdateTargetData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateTarget({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTargetExtendedQueryKey = (options: Options<GetTargetExtendedData>) => createQueryKey('getTargetExtended', options);

export const getTargetExtendedOptions = (options: Options<GetTargetExtendedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTargetExtended({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTargetExtendedQueryKey(options)
    });
};

export const listTriggersQueryKey = (options: Options<ListTriggersData>) => createQueryKey('listTriggers', options);

export const listTriggersOptions = (options: Options<ListTriggersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listTriggers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTriggersQueryKey(options)
    });
};

export const createTriggerQueryKey = (options: Options<CreateTriggerData>) => createQueryKey('createTrigger', options);

export const createTriggerOptions = (options: Options<CreateTriggerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createTrigger({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createTriggerQueryKey(options)
    });
};

export const createTriggerMutation = (options?: Partial<Options<CreateTriggerData>>) => {
    const mutationOptions: UseMutationOptions<CreateTriggerResponse, CreateTriggerError, Options<CreateTriggerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createTrigger({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteTriggerMutation = (options?: Partial<Options<DeleteTriggerData>>) => {
    const mutationOptions: UseMutationOptions<DeleteTriggerResponse, DeleteTriggerError, Options<DeleteTriggerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteTrigger({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTriggerQueryKey = (options: Options<GetTriggerData>) => createQueryKey('getTrigger', options);

export const getTriggerOptions = (options: Options<GetTriggerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTrigger({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTriggerQueryKey(options)
    });
};

export const updateTriggerMutation = (options?: Partial<Options<UpdateTriggerData>>) => {
    const mutationOptions: UseMutationOptions<UpdateTriggerResponse, UpdateTriggerError, Options<UpdateTriggerData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateTrigger({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTriggerExtendedQueryKey = (options: Options<GetTriggerExtendedData>) => createQueryKey('getTriggerExtended', options);

export const getTriggerExtendedOptions = (options: Options<GetTriggerExtendedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTriggerExtended({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTriggerExtendedQueryKey(options)
    });
};

export const listUnitsQueryKey = (options: Options<ListUnitsData>) => createQueryKey('listUnits', options);

export const listUnitsOptions = (options: Options<ListUnitsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listUnits({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listUnitsQueryKey(options)
    });
};

export const createUnitQueryKey = (options: Options<CreateUnitData>) => createQueryKey('createUnit', options);

export const createUnitOptions = (options: Options<CreateUnitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createUnit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createUnitQueryKey(options)
    });
};

export const createUnitMutation = (options?: Partial<Options<CreateUnitData>>) => {
    const mutationOptions: UseMutationOptions<CreateUnitResponse, CreateUnitError, Options<CreateUnitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createUnit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listExtendedUnitsQueryKey = (options: Options<ListExtendedUnitsData>) => createQueryKey('listExtendedUnits', options);

export const listExtendedUnitsOptions = (options: Options<ListExtendedUnitsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listExtendedUnits({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listExtendedUnitsQueryKey(options)
    });
};

export const deleteUnitMutation = (options?: Partial<Options<DeleteUnitData>>) => {
    const mutationOptions: UseMutationOptions<DeleteUnitResponse, DeleteUnitError, Options<DeleteUnitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteUnit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUnitQueryKey = (options: Options<GetUnitData>) => createQueryKey('getUnit', options);

export const getUnitOptions = (options: Options<GetUnitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUnit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUnitQueryKey(options)
    });
};

export const updateUnitMutation = (options?: Partial<Options<UpdateUnitData>>) => {
    const mutationOptions: UseMutationOptions<UpdateUnitResponse, UpdateUnitError, Options<UpdateUnitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateUnit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const applyUnitQueryKey = (options: Options<ApplyUnitData>) => createQueryKey('applyUnit', options);

export const applyUnitOptions = (options: Options<ApplyUnitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await applyUnit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: applyUnitQueryKey(options)
    });
};

export const applyUnitMutation = (options?: Partial<Options<ApplyUnitData>>) => {
    const mutationOptions: UseMutationOptions<ApplyUnitResponse, ApplyUnitError, Options<ApplyUnitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await applyUnit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const approveUnitQueryKey = (options: Options<ApproveUnitData>) => createQueryKey('approveUnit', options);

export const approveUnitOptions = (options: Options<ApproveUnitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await approveUnit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: approveUnitQueryKey(options)
    });
};

export const approveUnitMutation = (options?: Partial<Options<ApproveUnitData>>) => {
    const mutationOptions: UseMutationOptions<ApproveUnitResponse, ApproveUnitError, Options<ApproveUnitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await approveUnit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const destroyUnitQueryKey = (options: Options<DestroyUnitData>) => createQueryKey('destroyUnit', options);

export const destroyUnitOptions = (options: Options<DestroyUnitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await destroyUnit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: destroyUnitQueryKey(options)
    });
};

export const destroyUnitMutation = (options?: Partial<Options<DestroyUnitData>>) => {
    const mutationOptions: UseMutationOptions<DestroyUnitResponse, DestroyUnitError, Options<DestroyUnitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await destroyUnit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUnitExtendedQueryKey = (options: Options<GetUnitExtendedData>) => createQueryKey('getUnitExtended', options);

export const getUnitExtendedOptions = (options: Options<GetUnitExtendedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUnitExtended({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUnitExtendedQueryKey(options)
    });
};

export const importUnitQueryKey = (options: Options<ImportUnitData>) => createQueryKey('importUnit', options);

export const importUnitOptions = (options: Options<ImportUnitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await importUnit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: importUnitQueryKey(options)
    });
};

export const importUnitMutation = (options?: Partial<Options<ImportUnitData>>) => {
    const mutationOptions: UseMutationOptions<ImportUnitResponse, ImportUnitError, Options<ImportUnitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await importUnit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const downloadLiveStateUnitQueryKey = (options: Options<DownloadLiveStateUnitData>) => createQueryKey('downloadLiveStateUnit', options);

export const downloadLiveStateUnitOptions = (options: Options<DownloadLiveStateUnitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await downloadLiveStateUnit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: downloadLiveStateUnitQueryKey(options)
    });
};

export const listExtendedMutationsQueryKey = (options: Options<ListExtendedMutationsData>) => createQueryKey('listExtendedMutations', options);

export const listExtendedMutationsOptions = (options: Options<ListExtendedMutationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listExtendedMutations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listExtendedMutationsQueryKey(options)
    });
};

export const getExtendedMutationQueryKey = (options: Options<GetExtendedMutationData>) => createQueryKey('getExtendedMutation', options);

export const getExtendedMutationOptions = (options: Options<GetExtendedMutationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getExtendedMutation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getExtendedMutationQueryKey(options)
    });
};

export const getMutationExtendedQueryKey = (options: Options<GetMutationExtendedData>) => createQueryKey('getMutationExtended', options);

export const getMutationExtendedOptions = (options: Options<GetMutationExtendedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMutationExtended({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMutationExtendedQueryKey(options)
    });
};

export const refreshUnitQueryKey = (options: Options<RefreshUnitData>) => createQueryKey('refreshUnit', options);

export const refreshUnitOptions = (options: Options<RefreshUnitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await refreshUnit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: refreshUnitQueryKey(options)
    });
};

export const refreshUnitMutation = (options?: Partial<Options<RefreshUnitData>>) => {
    const mutationOptions: UseMutationOptions<RefreshUnitResponse, RefreshUnitError, Options<RefreshUnitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await refreshUnit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listExtendedRevisionsQueryKey = (options: Options<ListExtendedRevisionsData>) => createQueryKey('listExtendedRevisions', options);

export const listExtendedRevisionsOptions = (options: Options<ListExtendedRevisionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listExtendedRevisions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listExtendedRevisionsQueryKey(options)
    });
};

export const getExtendedRevisionQueryKey = (options: Options<GetExtendedRevisionData>) => createQueryKey('getExtendedRevision', options);

export const getExtendedRevisionOptions = (options: Options<GetExtendedRevisionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getExtendedRevision({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getExtendedRevisionQueryKey(options)
    });
};

export const getRevisionDataQueryKey = (options: Options<GetRevisionDataData>) => createQueryKey('getRevisionData', options);

export const getRevisionDataOptions = (options: Options<GetRevisionDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRevisionData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRevisionDataQueryKey(options)
    });
};

export const getRevisionExtendedQueryKey = (options: Options<GetRevisionExtendedData>) => createQueryKey('getRevisionExtended', options);

export const getRevisionExtendedOptions = (options: Options<GetRevisionExtendedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRevisionExtended({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRevisionExtendedQueryKey(options)
    });
};

export const listUnitEventsQueryKey = (options: Options<ListUnitEventsData>) => createQueryKey('listUnitEvents', options);

export const listUnitEventsOptions = (options: Options<ListUnitEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listUnitEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listUnitEventsQueryKey(options)
    });
};

export const getUnitEventQueryKey = (options: Options<GetUnitEventData>) => createQueryKey('getUnitEvent', options);

export const getUnitEventOptions = (options: Options<GetUnitEventData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUnitEvent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUnitEventQueryKey(options)
    });
};

export const upgradeDownstreamUnitsMutation = (options?: Partial<Options<UpgradeDownstreamUnitsData>>) => {
    const mutationOptions: UseMutationOptions<UpgradeDownstreamUnitsResponse, UpgradeDownstreamUnitsError, Options<UpgradeDownstreamUnitsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await upgradeDownstreamUnits({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listAllTargetsQueryKey = (options?: Options<ListAllTargetsData>) => createQueryKey('listAllTargets', options);

export const listAllTargetsOptions = (options?: Options<ListAllTargetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listAllTargets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listAllTargetsQueryKey(options)
    });
};

export const listAllUnitsQueryKey = (options?: Options<ListAllUnitsData>) => createQueryKey('listAllUnits', options);

export const listAllUnitsOptions = (options?: Options<ListAllUnitsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listAllUnits({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listAllUnitsQueryKey(options)
    });
};

export const listUsersQueryKey = (options?: Options<ListUsersData>) => createQueryKey('listUsers', options);

export const listUsersOptions = (options?: Options<ListUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listUsersQueryKey(options)
    });
};

export const getUserQueryKey = (options: Options<GetUserData>) => createQueryKey('getUser', options);

export const getUserOptions = (options: Options<GetUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserQueryKey(options)
    });
};