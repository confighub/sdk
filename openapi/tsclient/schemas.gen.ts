// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// This file is auto-generated by @hey-api/openapi-ts

export const ActionResultSchema = {
    type: 'object',
    properties: {
        Action: {
            '$ref': '#/components/schemas/ActionType'
        },
        Data: {
            type: 'string',
            description: 'Configuration data of the Unit',
            format: 'base64',
            'x-go-type-skip-optional-pointer': true
        },
        LiveState: {
            type: 'string',
            description: 'Live state corresponding to the Unit',
            format: 'base64',
            'x-go-type-skip-optional-pointer': true
        },
        Message: {
            type: 'string',
            'x-go-type-skip-optional-pointer': true
        },
        Outputs: {
            type: 'string',
            description: 'Outputs resulting from applying the configuration data of the Unit',
            format: 'base64',
            'x-go-type-skip-optional-pointer': true
        },
        QueuedOperationID: {
            type: 'string',
            description: 'UUID of the operation corresponding to the action request',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Result: {
            '$ref': '#/components/schemas/ActionResultType'
        },
        RevisionNum: {
            type: 'integer',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        SpaceID: {
            type: 'string',
            description: 'UUID of the Space of the Unit on which the action is performed',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        StartedAt: {
            type: 'string',
            format: 'date-time',
            example: '2006-01-02T15:04:05Z07:00',
            'x-go-type-skip-optional-pointer': true
        },
        Status: {
            '$ref': '#/components/schemas/ActionStatusType'
        },
        TerminatedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        UnitID: {
            type: 'string',
            description: 'UUID of the Unit on which the action is performed',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const ActionResultTypeSchema = {
    enum: ['ApplyFailed', 'ApplyWaitFailed', 'ApplyCompleted', 'DestroyCompleted', 'DestroyWaitFailed', 'DestroyFailed', 'ImportCompleted', 'ImportFailed', 'RefreshAndDrifted', 'RefreshAndNoDrift', 'RefreshFailed', 'None'],
    type: 'string'
} as const;

export const ActionStatusTypeSchema = {
    enum: ['None', 'Pending', 'Submitted', 'Progressing', 'Completed', 'Failed', 'Canceled'],
    type: 'string'
} as const;

export const ActionTypeSchema = {
    enum: ['Apply', 'Destroy', 'Finalize', 'Heartbeat', 'Import', 'N/A', 'Refresh'],
    type: 'string'
} as const;

export const ApiInfoSchema = {
    type: 'object',
    properties: {
        Build: {
            type: 'string',
            description: 'Build identifier for support cases.',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        BuiltAt: {
            type: 'string',
            description: 'The timestamp when ConfigHub was built in "2023-01-01T12:00:00Z" format for support cases.',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        ClientID: {
            type: 'string',
            description: 'ClientID for identity provider service.',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        Revision: {
            type: 'string',
            description: 'Service revision identifier for support cases.',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        WorkerPort: {
            type: 'string',
            description: 'Port number for the worker to connect to the server.',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: 'Information provided to clients by the server.'
} as const;

export const BridgeWorkerSchema = {
    required: ['Slug'],
    type: 'object',
    properties: {
        Annotations: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Annotation key/value pairs for tools to attach information to entities.',
            'x-go-type-skip-optional-pointer': true
        },
        BridgeWorkerID: {
            type: 'string',
            description: 'Unique identifier for a Bridge Worker.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Condition: {
            type: 'string',
            description: "Condition represents the worker's readiness state (Ready, NotReady, Unknown).",
            'x-go-type-skip-optional-pointer': true
        },
        CreatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was created in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        CursorID: {
            type: 'integer',
            description: 'An auto-incrementing sequence number used for pagination.',
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        DisplayName: {
            type: 'string',
            description: 'Friendly name for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        EntityType: {
            type: 'string',
            description: 'The type of entity.',
            'x-go-type-skip-optional-pointer': true
        },
        Labels: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Label key/value pairs to specify identifying attributes of entities for the purpose of grouping and filtering them.',
            'x-go-type-skip-optional-pointer': true
        },
        LastHeartbeatMessage: {
            type: 'string',
            description: 'LastHeartbeatMessage contains the message from the last heartbeat.',
            'x-go-type-skip-optional-pointer': true
        },
        LastHeartbeatReceivedAt: {
            type: 'string',
            description: 'LastHeartbeatReceivedAt is the time the last heartbeat was received.',
            format: 'date-time',
            example: '2006-01-02T15:04:05Z07:00',
            'x-go-type-skip-optional-pointer': true
        },
        OrganizationID: {
            type: 'string',
            description: 'Unique identifier for an organization.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        ProvidedInfo: {
            '$ref': '#/components/schemas/WorkerInfo'
        },
        Secret: {
            type: 'string',
            description: `Secret is a unique secret token for the bridge worker.
It's auto-generated when the BridgeWorker entity is created and cannot be modified.
This field is output-only and used for authentication.
This secret is required when starting the bridge worker program.`,
            'x-go-type-skip-optional-pointer': true
        },
        Slug: {
            type: 'string',
            description: 'Unique URL-safe identifier for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        SpaceID: {
            type: 'string',
            description: 'Unique identifier for a space.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        UpdatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        Version: {
            type: 'integer',
            description: `An entity-specific sequence number used for optimistic concurrency control.
The value read must be sent in calls to Update.`,
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: `BridgeWorker represents a bridge worker in ConfigHub.
A bridge worker is a worker program that connects ConfigHub to external systems and targets.
It acts as a bridge between ConfigHub and the infrastructure where configurations need
to be applied. Bridge workers are responsible for executing configuration changes on
remote targets and reporting status back to ConfigHub.
When starting a bridge worker program, both the BridgeWorkerID and Secret are
required for authentication with the ConfigHub server. These credentials allow the
bridge worker to establish a secure connection and receive configuration actions.`
} as const;

export const BridgeWorkerExtendedSchema = {
    type: 'object',
    properties: {
        BridgeWorker: {
            '$ref': '#/components/schemas/BridgeWorker'
        }
    }
} as const;

export const BridgeWorkerInfoSchema = {
    type: 'object',
    properties: {
        SupportedConfigTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ConfigType'
            },
            description: 'Configuration types supported by the BridgeWorker',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const BridgeWorkerStatusSchema = {
    type: 'object',
    properties: {
        BridgeWorkerID: {
            type: 'string',
            description: 'Unique identifier for the Bridge Worker.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        BridgeWorkerSlug: {
            type: 'string',
            description: 'Slug for the Bridge Worker.',
            'x-go-type-skip-optional-pointer': true
        },
        BridgeWorkerStatusID: {
            type: 'string',
            description: 'BridgeWorkerStatusID is the unique identifier for the bridge worker status entry.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        IPAddress: {
            type: 'string',
            description: 'IPAddress is the IP address from which the bridge worker is connecting.',
            'x-go-type-skip-optional-pointer': true
        },
        OrganizationID: {
            type: 'string',
            description: 'OrganizationID is the unique identifier of the organization the bridge worker belongs to.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        SeenAt: {
            type: 'string',
            description: 'The timestamp when the bridge worker last responded in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            example: '2006-01-02T15:04:05Z07:00',
            'x-go-type-skip-optional-pointer': true
        },
        SpaceID: {
            type: 'string',
            description: 'SpaceID is the unique identifier of the space the bridge worker belongs to.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Status: {
            type: 'string',
            description: 'Status indicates the current status of the bridge worker. Possible values include Connected, Disconnected, ActionSent, ActionResultReceived.',
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: 'BridgeWorkerStatus represents the status information of a bridge worker within the system.'
} as const;

export const ConfigTypeSchema = {
    type: 'object',
    properties: {
        AvailableTargets: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TargetType2'
            },
            description: 'Targets known by the BridgeWorker',
            'x-go-type-skip-optional-pointer': true
        },
        ProviderType: {
            type: 'string',
            description: 'Provider subtype of the configuration toolchain supported by the BridgegWorker',
            'x-go-type-skip-optional-pointer': true
        },
        ToolchainType: {
            type: 'string',
            description: 'Configuration toolchain and format supported by the BridgeWorker',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const DeleteResponseSchema = {
    type: 'object',
    properties: {
        Message: {
            type: 'string',
            description: 'Response message.',
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: 'Response for successful delete operation'
} as const;

export const EventMessageSchema = {
    type: 'object',
    properties: {
        Data: {
            type: 'string',
            format: 'base64'
        },
        Event: {
            type: 'string'
        }
    }
} as const;

export const ExtendedBridgeWorkerSchema = {
    type: 'object',
    properties: {
        BridgeWorker: {
            '$ref': '#/components/schemas/BridgeWorker'
        },
        Organization: {
            '$ref': '#/components/schemas/Organization'
        },
        Space: {
            '$ref': '#/components/schemas/Space'
        }
    }
} as const;

export const ExtendedLinkSchema = {
    type: 'object',
    properties: {
        FromUnit: {
            '$ref': '#/components/schemas/Unit'
        },
        Link: {
            '$ref': '#/components/schemas/Link'
        },
        Organization: {
            '$ref': '#/components/schemas/Organization'
        },
        Space: {
            '$ref': '#/components/schemas/Space'
        },
        ToSpace: {
            '$ref': '#/components/schemas/Space'
        },
        ToUnit: {
            '$ref': '#/components/schemas/Unit'
        }
    }
} as const;

export const ExtendedMutationSchema = {
    type: 'object',
    properties: {
        Link: {
            '$ref': '#/components/schemas/Link'
        },
        Mutation: {
            '$ref': '#/components/schemas/Mutation'
        },
        Organization: {
            '$ref': '#/components/schemas/Organization'
        },
        Revision: {
            '$ref': '#/components/schemas/Revision'
        },
        Space: {
            '$ref': '#/components/schemas/Space'
        },
        Trigger: {
            '$ref': '#/components/schemas/Trigger'
        },
        Unit: {
            '$ref': '#/components/schemas/Unit'
        }
    }
} as const;

export const ExtendedRevisionSchema = {
    type: 'object',
    properties: {
        Organization: {
            '$ref': '#/components/schemas/Organization'
        },
        Revision: {
            '$ref': '#/components/schemas/Revision'
        },
        Space: {
            '$ref': '#/components/schemas/Space'
        },
        Unit: {
            '$ref': '#/components/schemas/Unit'
        },
        User: {
            '$ref': '#/components/schemas/User'
        }
    }
} as const;

export const ExtendedSetSchema = {
    type: 'object',
    properties: {
        Organization: {
            '$ref': '#/components/schemas/Organization'
        },
        Set: {
            '$ref': '#/components/schemas/Set'
        },
        Space: {
            '$ref': '#/components/schemas/Space'
        }
    }
} as const;

export const ExtendedSpaceSchema = {
    type: 'object',
    properties: {
        GatedUnitCount: {
            type: 'integer',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        IncompleteApplyUnitCount: {
            type: 'integer',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        Organization: {
            '$ref': '#/components/schemas/Organization'
        },
        RecentChangeUnitCount: {
            type: 'integer',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        Space: {
            '$ref': '#/components/schemas/Space'
        },
        TargetCountByToolchainType: {
            type: 'object',
            additionalProperties: {
                type: 'integer'
            },
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        TotalBridgeWorkerCount: {
            type: 'integer',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        TotalUnitCount: {
            type: 'integer',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        TriggerCountByEventType: {
            type: 'object',
            additionalProperties: {
                type: 'integer'
            },
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        UnappliedUnitCount: {
            type: 'integer',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        UnapprovedUnitCount: {
            type: 'integer',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        UnlinkedUnitCount: {
            type: 'integer',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        UpgradableUnitCount: {
            type: 'integer',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const ExtendedTargetSchema = {
    type: 'object',
    properties: {
        BridgeWorker: {
            '$ref': '#/components/schemas/BridgeWorker'
        },
        Organization: {
            '$ref': '#/components/schemas/Organization'
        },
        Space: {
            '$ref': '#/components/schemas/Space'
        },
        Target: {
            '$ref': '#/components/schemas/Target'
        }
    }
} as const;

export const ExtendedTriggerSchema = {
    type: 'object',
    properties: {
        BridgeWorker: {
            '$ref': '#/components/schemas/BridgeWorker'
        },
        Organization: {
            '$ref': '#/components/schemas/Organization'
        },
        Space: {
            '$ref': '#/components/schemas/Space'
        },
        Trigger: {
            '$ref': '#/components/schemas/Trigger'
        }
    }
} as const;

export const ExtendedUnitSchema = {
    type: 'object',
    properties: {
        ApprovedBy: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/User'
            },
            description: 'the users that have approved the latest revision of the config data.',
            'x-go-type-skip-optional-pointer': true
        },
        HeadMutation: {
            '$ref': '#/components/schemas/Mutation'
        },
        HeadRevision: {
            '$ref': '#/components/schemas/Revision'
        },
        LastAppliedRevision: {
            '$ref': '#/components/schemas/Revision'
        },
        LatestUnitEvent: {
            '$ref': '#/components/schemas/UnitEvent'
        },
        LiveRevision: {
            '$ref': '#/components/schemas/Revision'
        },
        Organization: {
            '$ref': '#/components/schemas/Organization'
        },
        Set: {
            '$ref': '#/components/schemas/Set'
        },
        Space: {
            '$ref': '#/components/schemas/Space'
        },
        Target: {
            '$ref': '#/components/schemas/Target'
        },
        Unit: {
            '$ref': '#/components/schemas/Unit'
        },
        UnitStatus: {
            '$ref': '#/components/schemas/UnitStatus'
        },
        UpstreamSpace: {
            '$ref': '#/components/schemas/Space'
        },
        UpstreamUnit: {
            '$ref': '#/components/schemas/Unit'
        }
    },
    description: 'Unit with capability to extend additional related entities.'
} as const;

export const FunctionArgumentSchema = {
    type: 'object',
    properties: {
        ParameterName: {
            type: 'string'
        },
        Value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'integer',
                    format: 'int64'
                },
                {
                    type: 'boolean'
                }
            ]
        }
    }
} as const;

export const FunctionInvocationSchema = {
    type: 'object',
    properties: {
        Arguments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FunctionArgument'
            },
            description: 'Function arguments',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        FunctionName: {
            type: 'string',
            description: 'Function name',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const FunctionInvocationListSchema = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/FunctionInvocation'
    },
    nullable: true
} as const;

export const FunctionInvocationResponseSchema = {
    type: 'object',
    properties: {
        ConfigData: {
            type: 'string',
            description: 'The resulting configuration data, potentially mutated',
            format: 'base64',
            'x-go-type-skip-optional-pointer': true
        },
        ErrorMessages: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Error messages from function execution; will be empty if Success is true',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        Mutations: {
            '$ref': '#/components/schemas/ResourceMutationList'
        },
        Mutators: {
            type: 'array',
            items: {
                type: 'integer'
            },
            description: 'List of function invocation indices that resulted in mutations',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        OrganizationID: {
            type: 'string',
            description: "ID of the Unit's Organization",
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Output: {
            type: 'string',
            description: 'Output other than config data, as embedded JSON',
            format: 'base64',
            'x-go-type-skip-optional-pointer': true
        },
        OutputType: {
            type: 'string',
            description: 'Type of structured function output, if any',
            'x-go-type-skip-optional-pointer': true
        },
        RevisionID: {
            type: 'string',
            description: 'ID of the Revision the configuration data is associated with',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        SpaceID: {
            type: 'string',
            description: "ID of the Unit's Space",
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Success: {
            type: 'boolean',
            description: 'True if all functions executed successfully',
            'x-go-type-skip-optional-pointer': true
        },
        UnitID: {
            type: 'string',
            description: 'ID of the Unit the configuration data is associated with',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const FunctionInvocationsRequestSchema = {
    type: 'object',
    properties: {
        CastStringArgsToScalars: {
            type: 'boolean',
            description: 'CastStringArgsToScalars indicates whether to expect string arguments and cast them to int and bool types as necessary.',
            'x-go-type-skip-optional-pointer': true
        },
        ChangeDescription: {
            type: 'string',
            description: 'ChangeDescription is a description of the change being made, if any.',
            'x-go-type-skip-optional-pointer': true
        },
        CombineResults: {
            type: 'boolean',
            description: 'CombineResults indicates whether to combine the Outputs of all functions in the FunctionInvocations list. In the case of ValidationResult, the Passed results are ANDed together and a single ValidationResult is returned instead of a ValidationResultList. In the case of AttributeValueList and ResourceInfoList, the lists are concatenated. All output-generating functions must return the same OutputType, or only the first OutputType will be returned.',
            'x-go-type-skip-optional-pointer': true
        },
        FunctionInvocations: {
            '$ref': '#/components/schemas/FunctionInvocationList'
        },
        NumFilters: {
            type: 'integer',
            description: "NumFilters is the number of validating functions from the FunctionInvocations to treat as filters for the remaining functions in the list. In the case that the validation function does not pass, stop and don't execute the remaining functions, but don't report an error.",
            'x-go-type-skip-optional-pointer': true
        },
        StopOnError: {
            type: 'boolean',
            description: 'StopOnError indicates whether to stop executing functions from the FunctionInvocations list on the first error, or to execute all of the functions and return all of the errors.',
            'x-go-type-skip-optional-pointer': true
        },
        UseFunctionWorker: {
            type: 'boolean',
            description: 'UseFunctionWorker indicates whether to use the function worker or the builtin function executor, which is the default. The FunctionInvocations are forwarded to the executor/worker, so all must be executable by the same executor/worker currently.',
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: 'FunctionInvocationsRequest represents a request to invoke a list of functions on the configuration data of the matching Units or Revision.'
} as const;

export const FunctionOutputSchema = {
    type: 'object',
    properties: {
        Description: {
            type: 'string',
            description: 'Description of the result',
            'x-go-type-skip-optional-pointer': true
        },
        OutputType: {
            type: 'string',
            description: 'Data type of the JSON embedded in the output',
            'x-go-type-skip-optional-pointer': true
        },
        ResultName: {
            type: 'string',
            description: 'Name of the result in kabob-case',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const FunctionParameterSchema = {
    type: 'object',
    properties: {
        DataType: {
            type: 'string',
            description: 'Data type of the parameter',
            'x-go-type-skip-optional-pointer': true
        },
        Description: {
            type: 'string',
            description: 'Description of the parameter',
            'x-go-type-skip-optional-pointer': true
        },
        EnumValues: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'List of valid enum values; applies to enum parameters',
            'x-go-type-skip-optional-pointer': true
        },
        Example: {
            type: 'string',
            description: 'Example value',
            'x-go-type-skip-optional-pointer': true
        },
        Max: {
            type: 'integer',
            description: 'Maximum allowed value; applies to int parameters',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        Min: {
            type: 'integer',
            description: 'Minimum allowed value; applies to int parameters',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        ParameterName: {
            type: 'string',
            description: 'Name of the parameter in kabob-case',
            'x-go-type-skip-optional-pointer': true
        },
        Regexp: {
            type: 'string',
            description: 'Regular expression matching valid values; applies to string parameters',
            'x-go-type-skip-optional-pointer': true
        },
        Required: {
            type: 'boolean',
            description: 'Whether the parameter is required',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const FunctionSignatureSchema = {
    type: 'object',
    properties: {
        AffectedResourceTypes: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'Resource types the function applies to; * if all',
            'x-go-type-skip-optional-pointer': true
        },
        AttributeName: {
            type: 'string',
            description: 'Attribute corresponding to registered paths, if a path visitor; optional',
            'x-go-type-skip-optional-pointer': true
        },
        Description: {
            type: 'string',
            description: 'Description of the function',
            'x-go-type-skip-optional-pointer': true
        },
        FunctionName: {
            type: 'string',
            description: 'Name of the function in kabob-case',
            'x-go-type-skip-optional-pointer': true
        },
        FunctionType: {
            type: 'string',
            description: 'Implementation pattern of the function: PathVisitor or Custom',
            'x-go-type-skip-optional-pointer': true
        },
        Hermetic: {
            type: 'boolean',
            description: 'Does not call other systems',
            'x-go-type-skip-optional-pointer': true
        },
        Idempotent: {
            type: 'boolean',
            description: 'Will return the same result if invoked again',
            'x-go-type-skip-optional-pointer': true
        },
        Mutating: {
            type: 'boolean',
            description: 'May change the configuration data',
            'x-go-type-skip-optional-pointer': true
        },
        OutputInfo: {
            '$ref': '#/components/schemas/FunctionOutput'
        },
        Parameters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FunctionParameter'
            },
            description: 'Function parameters, in order',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        RequiredParameters: {
            type: 'integer',
            description: 'Number of required parameters',
            'x-go-type-skip-optional-pointer': true
        },
        Validating: {
            type: 'boolean',
            description: 'Returns ValidationResult',
            'x-go-type-skip-optional-pointer': true
        },
        VarArgs: {
            type: 'boolean',
            description: 'Last parameter may be repeated',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const FunctionWorkerInfoSchema = {
    type: 'object',
    properties: {
        SupportedFunctions: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                additionalProperties: {
                    '$ref': '#/components/schemas/FunctionSignature'
                }
            },
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const ImportRequestSchema = {
    type: 'object',
    properties: {
        ResourceInfoList: {
            '$ref': '#/components/schemas/ResourceInfoList'
        }
    }
} as const;

export const LinkSchema = {
    required: ['Slug'],
    type: 'object',
    properties: {
        Annotations: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Annotation key/value pairs for tools to attach information to entities.',
            'x-go-type-skip-optional-pointer': true
        },
        CreatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was created in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        CursorID: {
            type: 'integer',
            description: 'An auto-incrementing sequence number used for pagination.',
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        DisplayName: {
            type: 'string',
            description: 'Friendly name for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        EntityType: {
            type: 'string',
            description: 'The type of entity.',
            'x-go-type-skip-optional-pointer': true
        },
        FromUnitID: {
            type: 'string',
            description: 'Unique identifier the Unit the Link initiates from. Links must be in the same space as the source unit.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Labels: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Label key/value pairs to specify identifying attributes of entities for the purpose of grouping and filtering them.',
            'x-go-type-skip-optional-pointer': true
        },
        LinkID: {
            type: 'string',
            description: 'Unique identifier for a Link.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        OrganizationID: {
            type: 'string',
            description: 'Unique identifier for an organization.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Slug: {
            type: 'string',
            description: 'Unique URL-safe identifier for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        SpaceID: {
            type: 'string',
            description: 'Unique identifier for a space.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        ToSpaceID: {
            type: 'string',
            description: 'Unique identifier the Space of the Unit the Link targets.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        ToUnitID: {
            type: 'string',
            description: 'Unique identifier the Unit the Link targets.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        UpdatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        Version: {
            type: 'integer',
            description: `An entity-specific sequence number used for optimistic concurrency control.
The value read must be sent in calls to Update.`,
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: `Link connects two config Units in a dependency / producer-consumer relationship.
A Link indicates that config values Provided by the To Unit (the producer) may
satisfy config values Needed by the From Unit (the consumer), and should be attempted
to be matched before values Provided by other Units in the Space (if within the same
Space). Links must be created in the same Space as the From Unit.
They also imply an ordering when Applied or Destroyed as a Set.`
} as const;

export const LinkExtendedSchema = {
    type: 'object',
    properties: {
        FromSpaceSlug: {
            type: 'string',
            'x-go-type-skip-optional-pointer': true
        },
        FromUnitSlug: {
            type: 'string',
            'x-go-type-skip-optional-pointer': true
        },
        Link: {
            '$ref': '#/components/schemas/Link'
        },
        ToSpaceSlug: {
            type: 'string',
            'x-go-type-skip-optional-pointer': true
        },
        ToUnitSlug: {
            type: 'string',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const MutationSchema = {
    type: 'object',
    properties: {
        CreatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was created in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        CursorID: {
            type: 'integer',
            description: 'An auto-incrementing sequence number used for pagination.',
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        EntityType: {
            type: 'string',
            description: 'The type of entity.',
            'x-go-type-skip-optional-pointer': true
        },
        FunctionInvocation: {
            '$ref': '#/components/schemas/FunctionInvocation'
        },
        LinkID: {
            '$ref': '#/components/schemas/UUID'
        },
        MutationID: {
            type: 'string',
            description: 'Unique identifier for a Mutation.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        MutationNum: {
            type: 'integer',
            description: 'Sequence number for the Mutation.',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        OrganizationID: {
            type: 'string',
            description: 'Unique identifier for an Organization.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        ProvidedPath: {
            type: 'string',
            description: 'ProvidedPath is the path of the provided value used to satisfy a needed value if the change was made due to resolving a link.',
            'x-go-type-skip-optional-pointer': true
        },
        ProvidedResource: {
            '$ref': '#/components/schemas/ResourceInfo'
        },
        RevisionID: {
            type: 'string',
            description: 'Unique identifier of the corresponding Revision.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        RevisionNum: {
            type: 'integer',
            description: 'Sequence number of the corresponding Revision.',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        SpaceID: {
            type: 'string',
            description: 'Unique identifier for a space.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        TriggerID: {
            '$ref': '#/components/schemas/UUID'
        },
        UnitID: {
            type: 'string',
            description: 'Unique identifier for a Unit.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        UpdatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        Version: {
            type: 'integer',
            description: `An entity-specific sequence number used for optimistic concurrency control.
The value read must be sent in calls to Update.`,
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: 'Mutation is a single source of mutation for a Revision.'
} as const;

export const MutationExtendedSchema = {
    type: 'object',
    properties: {
        Mutation: {
            '$ref': '#/components/schemas/Mutation'
        }
    }
} as const;

export const MutationInfoSchema = {
    type: 'object',
    properties: {
        Index: {
            type: 'integer',
            description: 'Function index or sequence number corresponding to the change',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        MutationType: {
            '$ref': '#/components/schemas/MutationType'
        },
        Predicate: {
            type: 'boolean',
            description: 'Used to decide how to use the mututation',
            'x-go-type-skip-optional-pointer': true
        },
        Value: {
            type: 'string',
            description: 'Removed configuration data if MutationType is Delete and otherwise the new data',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const MutationMapSchema = {
    type: 'object',
    additionalProperties: {
        '$ref': '#/components/schemas/MutationInfo'
    }
} as const;

export const MutationTypeSchema = {
    enum: ['Add', 'Delete', 'Update', 'Replace', 'None'],
    type: 'string'
} as const;

export const OrganizationSchema = {
    required: ['Slug'],
    type: 'object',
    properties: {
        Annotations: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Annotation key/value pairs for tools to attach information to entities.',
            'x-go-type-skip-optional-pointer': true
        },
        BillingAccountID: {
            type: 'string',
            description: 'Unique identifier for a billing account for the organization.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        CreatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was created in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        CursorID: {
            type: 'integer',
            description: 'An auto-incrementing sequence number used for pagination.',
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        DisplayName: {
            type: 'string',
            description: 'Friendly name for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        EntityType: {
            type: 'string',
            description: 'The type of entity.',
            'x-go-type-skip-optional-pointer': true
        },
        ExternalID: {
            type: 'string',
            description: 'Unique identifier for the External Identity Provider record matching this organization.',
            'x-go-type-skip-optional-pointer': true
        },
        Labels: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Label key/value pairs to specify identifying attributes of entities for the purpose of grouping and filtering them.',
            'x-go-type-skip-optional-pointer': true
        },
        OrganizationID: {
            type: 'string',
            description: 'Unique identifier for an organization.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Slug: {
            type: 'string',
            description: 'Unique URL-safe identifier for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        UpdatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        Version: {
            type: 'integer',
            description: `An entity-specific sequence number used for optimistic concurrency control.
The value read must be sent in calls to Update.`,
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: 'The top-level container for an organization using ConfigHub.'
} as const;

export const OrganizationExtendedSchema = {
    type: 'object',
    properties: {
        Organization: {
            '$ref': '#/components/schemas/Organization'
        }
    }
} as const;

export const OrganizationMemberSchema = {
    type: 'object',
    properties: {
        DisplayName: {
            type: 'string',
            description: 'Friendly name for the organization member User.',
            'x-go-type-skip-optional-pointer': true
        },
        ExternalID: {
            type: 'string',
            description: 'Unique identifier for the External Identity Provider record matching this User.',
            'x-go-type-skip-optional-pointer': true
        },
        ExternalOrganizationID: {
            type: 'string',
            description: 'Unique identifier for the External Identity Provider record matching this organization.',
            'x-go-type-skip-optional-pointer': true
        },
        OrganizationID: {
            type: 'string',
            description: 'Unique identifier for an organization.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        ProfilePictureURL: {
            type: 'string',
            description: 'The URL to get the profile avatar picture of the User.',
            'x-go-type-skip-optional-pointer': true
        },
        Slug: {
            type: 'string',
            description: 'Unique URL-safe identifier for the organization member User.',
            'x-go-type-skip-optional-pointer': true
        },
        UserID: {
            type: 'string',
            description: 'Unique identifier for the organization member User.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Username: {
            type: 'string',
            description: 'Unique username for a User. Must be unique for all of ConfigHub.',
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: 'a User given membership on the Organization'
} as const;

export const QueuedOperationSchema = {
    type: 'object',
    properties: {
        Action: {
            '$ref': '#/components/schemas/ActionType'
        },
        BridgeWorkerID: {
            type: 'string',
            description: 'BridgeWorkerID is the unique identifier of the bridge worker that will process this operation.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        CreatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was created in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            example: '2006-01-02T15:04:05Z07:00',
            'x-go-type-skip-optional-pointer': true
        },
        ExtraParams: {
            type: 'string',
            description: 'ExtraParams contains additional parameters for the operation in string format.',
            'x-go-type-skip-optional-pointer': true
        },
        OrganizationID: {
            type: 'string',
            description: 'OrganizationID is the unique identifier of the organization this operation belongs to.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        QueuedOperationID: {
            type: 'string',
            description: 'QueuedOperationID is the unique identifier for the queued operation.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        RevisionNum: {
            type: 'integer',
            description: 'RevisionNum is the revision number this operation was performed on.',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        SpaceID: {
            type: 'string',
            description: 'SpaceID is the unique identifier of the space of the unit this operation is performed on.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Status: {
            type: 'string',
            description: 'Status indicates the current status of the queued operation.',
            'x-go-type-skip-optional-pointer': true
        },
        TargetID: {
            type: 'string',
            description: 'TargetID is the unique identifier of the target this operation is directed to.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        UnitID: {
            type: 'string',
            description: 'UnitID is the unique identifier of the unit this operation is performed on.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Version: {
            type: 'integer',
            description: `An entity-specific sequence number used for optimistic concurrency control.
The value read must be sent in calls to Update.`,
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: 'QueuedOperation is a record of an operation to be done by a bridge worker.'
} as const;

export const ResourceInfoSchema = {
    type: 'object',
    properties: {
        ResourceCategory: {
            type: 'string',
            description: 'Category of configuration element represented in the configuration data; Kubernetes and OpenTofu resources are of category Resource, and application configuration files are of category AppConfig',
            'x-go-type-skip-optional-pointer': true
        },
        ResourceName: {
            type: 'string',
            description: "Name of a resource in the system under management represented in the configuration data; Kubernetes resources are represented in the form <metadata.namespace>/<metadata.name>; not all ToolchainTypes necessarily use '/' as a separator between any scope(s) and name or other client-chosen ID",
            'x-go-type-skip-optional-pointer': true
        },
        ResourceNameWithoutScope: {
            type: 'string',
            description: 'Name of a resource in the system under management represented in the configuration data, without any uniquifying scope, such as Namespace, Project, Account, Region, etc.; Kubernetes resources are represented in the form <metadata.name>',
            'x-go-type-skip-optional-pointer': true
        },
        ResourceType: {
            type: 'string',
            description: 'Type of a resource in the system under management represented in the configuration data; Kubernetes resources are represented in the form <apiVersion>/<kind> (aka group-version-kind)',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const ResourceInfoListSchema = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/ResourceInfo'
    }
} as const;

export const ResourceMutationSchema = {
    type: 'object',
    properties: {
        Aliases: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            },
            description: 'Names (with scopes, if any) used in current and prior revisions of this resource',
            'x-go-type-skip-optional-pointer': true
        },
        AliasesWithoutScopes: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            },
            description: 'Names without scopes used in current and prior revisions of this resource',
            'x-go-type-skip-optional-pointer': true
        },
        PathMutationMap: {
            '$ref': '#/components/schemas/MutationMap'
        },
        Resource: {
            '$ref': '#/components/schemas/ResourceInfo'
        },
        ResourceMutationInfo: {
            '$ref': '#/components/schemas/MutationInfo'
        }
    }
} as const;

export const ResourceMutationListSchema = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/ResourceMutation'
    },
    nullable: true
} as const;

export const RevisionSchema = {
    type: 'object',
    properties: {
        ApplyGates: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            },
            description: 'A map of "<trigger slug>/<function name>" to true of Triggers invoking validating functions that did not pass on the configuration data at this Revision.',
            'x-go-type-skip-optional-pointer': true
        },
        ApprovedBy: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UUID'
            },
            description: 'the users that have approved the latest version of the config data for the Unit.',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        ContentHash: {
            type: 'integer',
            description: "The CRC32 hash of this revision's data.",
            'x-go-type-skip-optional-pointer': true
        },
        CreatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was created in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        CursorID: {
            type: 'integer',
            description: 'An auto-incrementing sequence number used for pagination.',
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        Data: {
            type: 'string',
            description: 'The full configuration data for this unit at this revision.',
            format: 'base64',
            'x-go-type-skip-optional-pointer': true
        },
        Description: {
            type: 'string',
            description: 'User description of the change. It is copied from the LastChangeDescription field of the Unit at the time the change was made that created the Revision.',
            'x-go-type-skip-optional-pointer': true
        },
        EntityType: {
            type: 'string',
            description: 'The type of entity.',
            'x-go-type-skip-optional-pointer': true
        },
        LiveAt: {
            type: 'string',
            description: 'Time at which the revision was applied, if it was applied. If not applied, the value is "0001-01-01T00:00:00Z".',
            format: 'date-time',
            example: '2006-01-02T15:04:05Z07:00',
            'x-go-type-skip-optional-pointer': true
        },
        MutationSources: {
            '$ref': '#/components/schemas/ResourceMutationList'
        },
        OrganizationID: {
            type: 'string',
            description: 'Unique identifier for an Organization.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        RevisionID: {
            type: 'string',
            description: 'Unique identifier for a Revision.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        RevisionNum: {
            type: 'integer',
            description: 'Sequence number for a Revision.',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        Source: {
            type: 'string',
            description: 'ConfigHub operation that created this revision.',
            'x-go-type-skip-optional-pointer': true
        },
        SpaceID: {
            type: 'string',
            description: 'Unique identifier for a space.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        UnitID: {
            type: 'string',
            description: 'Unique identifier for a Unit.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        UpdatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        UserAgent: {
            type: 'string',
            description: 'User-Agent string if created by an API call. Optional.',
            'x-go-type-skip-optional-pointer': true
        },
        UserID: {
            type: 'string',
            description: 'UserID if change was made by a user. Automated changes, such as by triggers and resolve, are currently made with the UserID "00000000-0000-0000-0000-000000000000".',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Version: {
            type: 'integer',
            description: `An entity-specific sequence number used for optimistic concurrency control.
The value read must be sent in calls to Update.`,
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: 'Revision is a historial view of a Config Unit.'
} as const;

export const RevisionExtendedSchema = {
    type: 'object',
    properties: {
        ApprovedByUsers: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        Revision: {
            '$ref': '#/components/schemas/Revision'
        },
        Username: {
            type: 'string',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const SetSchema = {
    required: ['Slug'],
    type: 'object',
    properties: {
        Annotations: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Annotation key/value pairs for tools to attach information to entities.',
            'x-go-type-skip-optional-pointer': true
        },
        CreatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was created in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        CursorID: {
            type: 'integer',
            description: 'An auto-incrementing sequence number used for pagination.',
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        DisplayName: {
            type: 'string',
            description: 'Friendly name for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        EntityType: {
            type: 'string',
            description: 'The type of entity.',
            'x-go-type-skip-optional-pointer': true
        },
        Labels: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Label key/value pairs to specify identifying attributes of entities for the purpose of grouping and filtering them.',
            'x-go-type-skip-optional-pointer': true
        },
        OrganizationID: {
            type: 'string',
            description: 'Unique identifier for an organization.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        SetID: {
            type: 'string',
            description: 'Unique identifier for a Set.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Slug: {
            type: 'string',
            description: 'Unique URL-safe identifier for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        SpaceID: {
            type: 'string',
            description: 'Unique identifier for a space.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        UpdatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        Version: {
            type: 'integer',
            description: `An entity-specific sequence number used for optimistic concurrency control.
The value read must be sent in calls to Update.`,
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: 'A group of related Units that can be cloned, upgraded, applied, refreshed, or destroyed as a group.'
} as const;

export const SetExtendedSchema = {
    type: 'object',
    properties: {
        Set: {
            '$ref': '#/components/schemas/Set'
        }
    }
} as const;

export const SpaceSchema = {
    required: ['Slug'],
    type: 'object',
    properties: {
        Annotations: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Annotation key/value pairs for tools to attach information to entities.',
            'x-go-type-skip-optional-pointer': true
        },
        CreatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was created in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        CursorID: {
            type: 'integer',
            description: 'An auto-incrementing sequence number used for pagination.',
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        DisplayName: {
            type: 'string',
            description: 'Friendly name for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        EntityType: {
            type: 'string',
            description: 'The type of entity.',
            'x-go-type-skip-optional-pointer': true
        },
        Labels: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Label key/value pairs to specify identifying attributes of entities for the purpose of grouping and filtering them.',
            'x-go-type-skip-optional-pointer': true
        },
        OrganizationID: {
            type: 'string',
            description: 'Unique identifier for an organization.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Slug: {
            type: 'string',
            description: 'Unique URL-safe identifier for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        SpaceID: {
            type: 'string',
            description: 'Unique identifier for a space.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        UpdatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        Version: {
            type: 'integer',
            description: `An entity-specific sequence number used for optimistic concurrency control.
The value read must be sent in calls to Update.`,
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: 'The logical container for most entities in ConfigHub. Namespaces triggers, units, targets, workers, and other entities.'
} as const;

export const SpaceExtendedSchema = {
    type: 'object',
    properties: {
        Space: {
            '$ref': '#/components/schemas/Space'
        }
    }
} as const;

export const StandardErrorResponseSchema = {
    type: 'object',
    properties: {
        Code: {
            type: 'string',
            description: 'HTTP status code of the response.',
            'x-go-type-skip-optional-pointer': true
        },
        Message: {
            type: 'string',
            description: 'Message returned with the response.',
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: 'Error response details.'
} as const;

export const TargetSchema = {
    required: ['Slug'],
    type: 'object',
    properties: {
        Annotations: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Annotation key/value pairs for tools to attach information to entities.',
            'x-go-type-skip-optional-pointer': true
        },
        BridgeWorkerID: {
            type: 'string',
            description: 'Unique identifier for a Bridge Worker associated with the Target.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        CreatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was created in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        CursorID: {
            type: 'integer',
            description: 'An auto-incrementing sequence number used for pagination.',
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        DisplayName: {
            type: 'string',
            description: 'Friendly name for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        EntityType: {
            type: 'string',
            description: 'The type of entity.',
            'x-go-type-skip-optional-pointer': true
        },
        Labels: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Label key/value pairs to specify identifying attributes of entities for the purpose of grouping and filtering them.',
            'x-go-type-skip-optional-pointer': true
        },
        OrganizationID: {
            type: 'string',
            description: 'Unique identifier for an organization.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Parameters: {
            type: 'string',
            description: `Parameters contains toolchain-type and/or provider-type-specific parameters in JSON format.

For ProviderType: Kubernetes (ToolchainType: Kubernetes/YAML)
The Parameters object may contain the following fields:
- "KubeContext" (string): The name of the Kubernetes context (from "~/.kube/config") to use. (Not typically needed if running in-cluster).
- "KubeNamespace" (string, optional): The target Kubernetes namespace for applying or managing resources.
- "WaitTimeout" (string): A duration string (e.g., "5m", "2m30s") specifying how long to wait for resources to reach a ready state. Defaults to "2m0s".

For ProviderType: FluxOCIWriter (ToolchainType: Kubernetes/YAML)
The Parameters object may contain the following fields:
- "Repository" (string, required): The base OCI repository URL (e.g., "oci://ghcr.io/my-org"). The 'UnitSlug' (a system-provided identifier for the configuration unit) will be appended to this URL to form the full image path (e.g., "oci://ghcr.io/my-org/<UnitSlug>").
- "Tag" (string, optional): Explicit OCI tag for the image. Confighub will automatically set the tag on each push using the Unit's current RevisionNum being applied. This will have 'rev' prefixed to the number, like 'rev42'. When Tag is populated, it can be used to explicitly set a value that you want Confighub to publish to the OCI in addition to the default RevisionNum tag. For example 'latest' or 'trunk'.
- "Provider" (string, optional): Specifies the authentication provider for the OCI registry. Defaults to "None".
    Possible values:
    - "None": Uses local Docker configuration (e.g., from '~/.docker/config.json') or the system's credential keychain.
    - "Generic": Uses generic OCI provider authentication.
    - "AWS": Uses AWS ECR authentication.
    - "Azure": Uses Azure CR authentication.
    - "GCP": Uses Google CR/Artifact Registry authentication.
- "AllowDeletion" (string, optional): A boolean string ("true" or "false") indicating if the worker is allowed to delete images from the repository. Defaults to "false".
- "KubernetesSecretName" (string, optional): The name of a Kubernetes Secret containing Docker credentials. The secret should typically have a '.dockerconfigjson' key, or 'username' and 'password' keys.
- "KubernetesSecretNamespace" (string, optional): The Kubernetes namespace where the "KubernetesSecretName" is located. If not specified, the secret is assumed to be in the same namespace as the ConfigHub worker.
`,
            'x-go-type-skip-optional-pointer': true
        },
        ProviderType: {
            type: 'string',
            description: 'ProviderType specifies the cloud or infrastructure provider for this target, such as "Kubernetes" or "AWS".',
            'x-go-type-skip-optional-pointer': true
        },
        Slug: {
            type: 'string',
            description: 'Unique URL-safe identifier for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        SpaceID: {
            type: 'string',
            description: 'Unique identifier for a space.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        TargetID: {
            type: 'string',
            description: 'Unique identifier for a Target.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        ToolchainType: {
            type: 'string',
            description: 'ToolchainType specifies the type of toolchain supported by this Target. Possible values include "Kubernetes/YAML", "OpenTofu/HCL", "AppConfig/Properties".',
            'x-go-type-skip-optional-pointer': true
        },
        UpdatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        Version: {
            type: 'integer',
            description: `An entity-specific sequence number used for optimistic concurrency control.
The value read must be sent in calls to Update.`,
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: 'Target represents a deployment target in ConfigHub. It defines where configuration should be applied, including the toolchain type (e.g., Kubernetes/YAML, OpenTofu/HCL, AppConfig/Properties) and provider (e.g., AWS, Kubernetes, FluxOCI). Each Target is associated with a specific BridgeWorker that handles the actual deployment actions (e.g. Apply, Destroy).'
} as const;

export const TargetExtendedSchema = {
    type: 'object',
    properties: {
        Target: {
            '$ref': '#/components/schemas/Target'
        }
    }
} as const;

export const TargetType2Schema = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            description: 'Used to set the Slug and DisplayName of the Target created in ConfigHub',
            'x-go-type-skip-optional-pointer': true
        },
        Params: {
            type: 'object',
            additionalProperties: {},
            description: 'Used to set the Parameters of the Target created in ConfigHub',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const TriggerSchema = {
    required: ['Slug'],
    type: 'object',
    properties: {
        Annotations: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Annotation key/value pairs for tools to attach information to entities.',
            'x-go-type-skip-optional-pointer': true
        },
        Arguments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FunctionArgument'
            },
            description: 'Function arguments',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        BridgeWorkerID: {
            '$ref': '#/components/schemas/UUID'
        },
        CreatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was created in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        CursorID: {
            type: 'integer',
            description: 'An auto-incrementing sequence number used for pagination.',
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        Disabled: {
            type: 'boolean',
            description: `Disabled indicates whether this trigger is currently disabled.
		When disabled, the trigger will not be executed even when matching events occur.`,
            example: 'false',
            'x-go-type-skip-optional-pointer': true
        },
        DisplayName: {
            type: 'string',
            description: 'Friendly name for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        Enforced: {
            type: 'boolean',
            description: `Enforced indicates whether this trigger cannot be overridden.
		Enforced triggers implement mandatory policies that cannot be bypassed.`,
            example: 'true',
            'x-go-type-skip-optional-pointer': true
        },
        EntityType: {
            type: 'string',
            description: 'The type of entity.',
            'x-go-type-skip-optional-pointer': true
        },
        Event: {
            type: 'string',
            description: 'Event specifies the type of event that will activate this trigger. Valid values are Mutation, PreClone, and PostClone',
            'x-go-type-skip-optional-pointer': true
        },
        FunctionName: {
            type: 'string',
            description: 'Function name',
            'x-go-type-skip-optional-pointer': true
        },
        Labels: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Label key/value pairs to specify identifying attributes of entities for the purpose of grouping and filtering them.',
            'x-go-type-skip-optional-pointer': true
        },
        OrganizationID: {
            type: 'string',
            description: 'Unique identifier for an organization.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Slug: {
            type: 'string',
            description: 'Unique URL-safe identifier for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        SpaceID: {
            type: 'string',
            description: 'Unique identifier for a space.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        ToolchainType: {
            required: ['true'],
            type: 'string',
            description: `ToolchainType specifies the type of toolchain this trigger works with.
		This determines which configuration formats the trigger can process.`,
            example: 'Kubernetes/YAML',
            'x-go-type-skip-optional-pointer': true
        },
        TriggerID: {
            type: 'string',
            description: 'TriggerID uniquely identifies a trigger within the system.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        UpdatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        Validating: {
            type: 'boolean',
            description: `Validating indicates whether this is a validating function (true) or mutating function (false).
		Validating functions check configuration validity without modifying it. Mutating functions can make changes to the configuration.
		This value is returned by ConfigHub based on the corresponding property of the specified function.`,
            example: 'true',
            'x-go-type-skip-optional-pointer': true
        },
        Version: {
            type: 'integer',
            description: `An entity-specific sequence number used for optimistic concurrency control.
The value read must be sent in calls to Update.`,
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: `Defines an automated function invocation that executes in response to specific
Unit lifecycle events in ConfigHub. Triggers can be used to implement validation rules,
automated transformations, or other custom logic that should run when configuration
changes occur. Each Trigger is associated with a specific Space and can be configured
to execute on events.

Triggers can be either validating (checking configuration validity without modifying it)
or mutating (making changes to the configuration). They can also be enforced (cannot be
overridden) or disabled.`
} as const;

export const TriggerExtendedSchema = {
    type: 'object',
    properties: {
        Trigger: {
            '$ref': '#/components/schemas/Trigger'
        }
    }
} as const;

export const UUIDSchema = {
    type: 'string',
    format: 'uuid',
    example: '248df4b7-aa70-47b8-a036-33ac447e668d'
} as const;

export const UnitSchema = {
    required: ['Slug'],
    type: 'object',
    properties: {
        Annotations: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Annotation key/value pairs for tools to attach information to entities.',
            'x-go-type-skip-optional-pointer': true
        },
        ApplyGates: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            },
            description: 'A map of "<trigger slug>/<function name>" to true of Triggers invoking validating functions that did not pass on the latest configuration data.',
            'x-go-type-skip-optional-pointer': true
        },
        ApprovedBy: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UUID'
            },
            description: 'The users that have approved the latest revision of the config data for the Unit.',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        ContentHash: {
            type: 'integer',
            description: 'The CRC32 hash of the configuration data.',
            'x-go-type-skip-optional-pointer': true
        },
        CreatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was created in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        CursorID: {
            type: 'integer',
            description: 'An auto-incrementing sequence number used for pagination.',
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        Data: {
            type: 'string',
            description: 'The full configuration data for this unit.',
            format: 'base64',
            'x-go-type-skip-optional-pointer': true
        },
        DisplayName: {
            type: 'string',
            description: 'Friendly name for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        EntityType: {
            type: 'string',
            description: 'The type of entity.',
            'x-go-type-skip-optional-pointer': true
        },
        HeadMutationNum: {
            type: 'integer',
            description: 'Sequence number the head Mutation.',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        HeadRevisionNum: {
            type: 'integer',
            description: 'Sequence number the head Revision.',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        Labels: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            description: 'An optional map of Label key/value pairs to specify identifying attributes of entities for the purpose of grouping and filtering them.',
            'x-go-type-skip-optional-pointer': true
        },
        LastAppliedRevisionNum: {
            type: 'integer',
            description: 'Sequence number the last Revision applied. 0 if no live revision.',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        LastChangeDescription: {
            type: 'string',
            description: 'LastChangeDescription is a human-readable description of the last change. This description is copied to the new Revision when the Data is changed.',
            'x-go-type-skip-optional-pointer': true
        },
        LiveRevisionNum: {
            type: 'integer',
            description: 'Sequence number the last Revision applied once apply has completed. 0 if no live revision.',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        LiveState: {
            type: 'string',
            description: 'The current live state of the Unit as reported by the bridge worker associated with the Target attached to the Unit.',
            format: 'base64',
            'x-go-type-skip-optional-pointer': true
        },
        MutationSources: {
            '$ref': '#/components/schemas/ResourceMutationList'
        },
        OrganizationID: {
            type: 'string',
            description: 'Unique identifier for an organization.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Outputs: {
            type: 'string',
            description: 'The outputs of the last successful apply of the Unit.',
            format: 'base64',
            'x-go-type-skip-optional-pointer': true
        },
        PreviousLiveRevisionNum: {
            type: 'integer',
            description: 'Sequence number the previous Revision applied. 0 if no live revision.',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        SetID: {
            '$ref': '#/components/schemas/UUID'
        },
        Slug: {
            type: 'string',
            description: 'Unique URL-safe identifier for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        SpaceID: {
            type: 'string',
            description: 'Unique identifier for a space.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        TargetID: {
            '$ref': '#/components/schemas/UUID'
        },
        ToolchainType: {
            type: 'string',
            description: 'ToolchainType specifies the type of toolchain for this unit. Possible values include "Kubernetes/YAML", "OpenTofu/HCL", "AppConfig/Properties".',
            'x-go-type-skip-optional-pointer': true
        },
        UnitID: {
            type: 'string',
            description: 'Unique identifier for a Unit.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        UpdatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        UpstreamOrganizationID: {
            '$ref': '#/components/schemas/UUID'
        },
        UpstreamRevisionNum: {
            type: 'integer',
            description: "Sequence number for the Revision of the Unit this unit was cloned from, or 0. This is updated to the upstream Unit's head revision number when the Unit is upgraded.",
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        UpstreamSpaceID: {
            '$ref': '#/components/schemas/UUID'
        },
        UpstreamUnitID: {
            '$ref': '#/components/schemas/UUID'
        },
        Version: {
            type: 'integer',
            description: `An entity-specific sequence number used for optimistic concurrency control.
The value read must be sent in calls to Update.`,
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: `Unit is the core unit of operation in ConfigHub. It contains a blob of configuration Data
of a single supported Toolchain Type (congifuration format). This blob is typically a text document
that contains a collection of Kubernetes or infrastructure resources, or an application configuration
file. Applying / deploying or destroying the configuration happens as a single "transaction"
from ConfigHub's perspective. In reality, it is most often a multi-step workflow performed by
the underlying configuration / deployment tool. The resources must belong to a single
infrastructure provider and the actuation mechanism must be able to resolve references and
ordering dependencies among the resources within the document. For example, if one resource
needs to be fully provisioned to provide input to another resource, then the actuation code is
responsible for handling this. Revisions store historical copies of the configuration data.
Configuration data can be restored from prior Revisions. Units can also be cloned to create
new variants of a configuration.`
} as const;

export const UnitEventSchema = {
    type: 'object',
    properties: {
        Action: {
            '$ref': '#/components/schemas/ActionType'
        },
        CreatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was created in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        CursorID: {
            type: 'integer',
            description: 'An auto-incrementing sequence number used for pagination.',
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        EntityType: {
            type: 'string',
            description: 'The type of entity.',
            'x-go-type-skip-optional-pointer': true
        },
        Message: {
            type: 'string',
            'x-go-type-skip-optional-pointer': true
        },
        OrganizationID: {
            type: 'string',
            description: 'Unique identifier for an Organization.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        QueuedOperationID: {
            type: 'string',
            description: 'QueuedOperationID is the unique identifier for the corresponding queued operation.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Result: {
            '$ref': '#/components/schemas/ActionResultType'
        },
        RevisionNum: {
            type: 'integer',
            format: 'int64',
            'x-go-type-skip-optional-pointer': true
        },
        SpaceID: {
            type: 'string',
            description: 'Unique identifier for a space.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        StartedAt: {
            type: 'string',
            format: 'date-time',
            example: '2006-01-02T15:04:05Z07:00',
            'x-go-type-skip-optional-pointer': true
        },
        Status: {
            '$ref': '#/components/schemas/ActionStatusType'
        },
        TerminatedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        UnitEventID: {
            type: 'string',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        UnitID: {
            type: 'string',
            description: 'Unique identifier for a Unit.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        UpdatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        Version: {
            type: 'integer',
            description: `An entity-specific sequence number used for optimistic concurrency control.
The value read must be sent in calls to Update.`,
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: `UnitEvent represents an event of action performed on a Unit's configuration. Each action tracks
the lifecycle of applying, destroying, or refreshing a Unit's configuration in the target
live system. The event captures the current status of the operation, any configuration
drift detected, and timing information about when the action started and completed.
Actions are atomic from ConfigHub's perspective but may involve multiple steps
in the connected Bridge. The status and drift detection help track the health
and consistency of the provisioned configuration compared to what is defined in the Unit.`
} as const;

export const UnitExtendedSchema = {
    type: 'object',
    properties: {
        Action: {
            '$ref': '#/components/schemas/ActionType'
        },
        ActionResult: {
            '$ref': '#/components/schemas/ActionResultType'
        },
        ActionStartedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        ActionTerminatedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        ApprovedByUsers: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        Drift: {
            type: 'string',
            'x-go-type-skip-optional-pointer': true
        },
        FromLinks: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Link'
            },
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        Status: {
            type: 'string',
            'x-go-type-skip-optional-pointer': true
        },
        ToLinks: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Link'
            },
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        Unit: {
            '$ref': '#/components/schemas/Unit'
        }
    }
} as const;

export const UnitStatusSchema = {
    type: 'object',
    properties: {
        Action: {
            '$ref': '#/components/schemas/ActionType'
        },
        ActionResult: {
            '$ref': '#/components/schemas/ActionResultType'
        },
        ActionStartedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        ActionTerminatedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        Drift: {
            type: 'string',
            'x-go-type-skip-optional-pointer': true
        },
        Status: {
            type: 'string',
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const UpgradeUnitResponseSchema = {
    type: 'object',
    properties: {
        FailedUnits: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        },
        UpgradedUnits: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Unit'
            },
            nullable: true,
            'x-go-type-skip-optional-pointer': true
        }
    }
} as const;

export const UserSchema = {
    required: ['Slug'],
    type: 'object',
    properties: {
        CreatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was created in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        CursorID: {
            type: 'integer',
            description: 'An auto-incrementing sequence number used for pagination.',
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        },
        DisplayName: {
            type: 'string',
            description: 'Friendly name for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        EntityType: {
            type: 'string',
            description: 'The type of entity.',
            'x-go-type-skip-optional-pointer': true
        },
        ExternalID: {
            type: 'string',
            description: 'Unique identifier for the External Identity Provider record matching this User.',
            'x-go-type-skip-optional-pointer': true
        },
        ProfilePictureURL: {
            type: 'string',
            description: 'The URL to get the profile avatar picture of the User.',
            'x-go-type-skip-optional-pointer': true
        },
        Slug: {
            type: 'string',
            description: 'Unique URL-safe identifier for the entity.',
            'x-go-type-skip-optional-pointer': true
        },
        UpdatedAt: {
            type: 'string',
            description: 'The timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.',
            format: 'date-time',
            readOnly: true,
            example: '2025-04-04T11:50:02.95102-07:00',
            'x-go-type-skip-optional-pointer': true
        },
        UserID: {
            type: 'string',
            description: 'Unique identifier for a User.',
            format: 'uuid',
            example: '248df4b7-aa70-47b8-a036-33ac447e668d',
            'x-go-type-skip-optional-pointer': true
        },
        Username: {
            type: 'string',
            description: 'Unique username for a User. Must be unique for all of Confighub.',
            'x-go-type-skip-optional-pointer': true
        },
        Version: {
            type: 'integer',
            description: `An entity-specific sequence number used for optimistic concurrency control.
The value read must be sent in calls to Update.`,
            format: 'int64',
            readOnly: true,
            'x-go-type-skip-optional-pointer': true
        }
    },
    description: 'a User in Confighub.'
} as const;

export const WorkerInfoSchema = {
    type: 'object',
    properties: {
        BridgeWorkerInfo: {
            '$ref': '#/components/schemas/BridgeWorkerInfo'
        },
        FunctionWorkerInfo: {
            '$ref': '#/components/schemas/FunctionWorkerInfo'
        }
    }
} as const;