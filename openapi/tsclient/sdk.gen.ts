// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ListAllBridgeWorkersData, ListAllBridgeWorkersResponse, ListAllBridgeWorkersError, CreateActionResultData, CreateActionResultResponse, CreateActionResultError, GetSelfData, GetSelfResponse, GetSelfError, StreamBridgeWorkerData, StreamBridgeWorkerResponse, StreamBridgeWorkerError, ListOrgFunctionsData, ListOrgFunctionsResponse, ListOrgFunctionsError, InvokeFunctionsOnOrgData, InvokeFunctionsOnOrgResponse, InvokeFunctionsOnOrgError, ApiInfoData, ApiInfoResponse, ApiInfoError, GetMeData, GetMeResponse, GetMeError, ListOrganizationsData, ListOrganizationsResponse, ListOrganizationsError, CreateOrganizationData, CreateOrganizationResponse, CreateOrganizationError, DeleteOrganizationData, DeleteOrganizationResponse, DeleteOrganizationError, GetOrganizationData, GetOrganizationResponse, GetOrganizationError, UpdateOrganizationData, UpdateOrganizationResponse, UpdateOrganizationError, GetOrganizationExtendedData, GetOrganizationExtendedResponse, GetOrganizationExtendedError, ListOrganizationMembersData, ListOrganizationMembersResponse, ListOrganizationMembersError, CreateOrganizationMemberData, CreateOrganizationMemberResponse, CreateOrganizationMemberError, DeleteOrganizationMemberData, DeleteOrganizationMemberResponse, DeleteOrganizationMemberError, GetOrganizationMemberData, GetOrganizationMemberResponse, GetOrganizationMemberError, ListSpacesData, ListSpacesResponse, ListSpacesError, CreateSpaceData, CreateSpaceResponse, CreateSpaceError, DeleteSpaceData, DeleteSpaceResponse, DeleteSpaceError, GetSpaceData, GetSpaceResponse, GetSpaceError, UpdateSpaceData, UpdateSpaceResponse, UpdateSpaceError, ListBridgeWorkersData, ListBridgeWorkersResponse, ListBridgeWorkersError, CreateBridgeWorkerData, CreateBridgeWorkerResponse, CreateBridgeWorkerError, DeleteBridgeWorkerData, DeleteBridgeWorkerResponse, DeleteBridgeWorkerError, GetBridgeWorkerData, GetBridgeWorkerResponse, GetBridgeWorkerError, UpdateBridgeWorkerData, UpdateBridgeWorkerResponse, UpdateBridgeWorkerError, GetBridgeWorkerExtendedData, GetBridgeWorkerExtendedResponse, GetBridgeWorkerExtendedError, ListBridgeWorkerFunctionsData, ListBridgeWorkerFunctionsResponse, ListBridgeWorkerFunctionsError, ListBridgeWorkerStatusesData, ListBridgeWorkerStatusesResponse, ListBridgeWorkerStatusesError, GetBridgeWorkerStatusData, GetBridgeWorkerStatusResponse, GetBridgeWorkerStatusError, GetSpaceExtendedData, GetSpaceExtendedResponse, GetSpaceExtendedError, ListFunctionsData, ListFunctionsResponse, ListFunctionsError, InvokeFunctionsData, InvokeFunctionsResponse, InvokeFunctionsError, ListLinksData, ListLinksResponse, ListLinksError, CreateLinkData, CreateLinkResponse, CreateLinkError, DeleteLinkData, DeleteLinkResponse, DeleteLinkError, GetLinkData, GetLinkResponse, GetLinkError, UpdateLinkData, UpdateLinkResponse, UpdateLinkError, GetLinkExtendedData, GetLinkExtendedResponse, GetLinkExtendedError, ListSetsData, ListSetsResponse, ListSetsError, CreateSetData, CreateSetResponse, CreateSetError, DeleteSetData, DeleteSetResponse, DeleteSetError, GetSetData, GetSetResponse, GetSetError, UpdateSetData, UpdateSetResponse, UpdateSetError, GetSetExtendedData, GetSetExtendedResponse, GetSetExtendedError, ListTargetsData, ListTargetsResponse, ListTargetsError, CreateTargetData, CreateTargetResponse, CreateTargetError, DeleteTargetData, DeleteTargetResponse, DeleteTargetError, GetTargetData, GetTargetResponse, GetTargetError, UpdateTargetData, UpdateTargetResponse, UpdateTargetError, GetTargetExtendedData, GetTargetExtendedResponse, GetTargetExtendedError, ListTriggersData, ListTriggersResponse, ListTriggersError, CreateTriggerData, CreateTriggerResponse, CreateTriggerError, DeleteTriggerData, DeleteTriggerResponse, DeleteTriggerError, GetTriggerData, GetTriggerResponse, GetTriggerError, UpdateTriggerData, UpdateTriggerResponse, UpdateTriggerError, GetTriggerExtendedData, GetTriggerExtendedResponse, GetTriggerExtendedError, ListUnitsData, ListUnitsResponse, ListUnitsError, CreateUnitData, CreateUnitResponse, CreateUnitError, ListExtendedUnitsData, ListExtendedUnitsResponse, ListExtendedUnitsError, DeleteUnitData, DeleteUnitResponse, DeleteUnitError, GetUnitData, GetUnitResponse, GetUnitError, UpdateUnitData, UpdateUnitResponse, UpdateUnitError, ApplyUnitData, ApplyUnitResponse, ApplyUnitError, ApproveUnitData, ApproveUnitResponse, ApproveUnitError, DestroyUnitData, DestroyUnitResponse, DestroyUnitError, GetUnitExtendedData, GetUnitExtendedResponse, GetUnitExtendedError, ImportUnitData, ImportUnitResponse, ImportUnitError, DownloadLiveStateUnitData, DownloadLiveStateUnitResponse, DownloadLiveStateUnitError, ListExtendedMutationsData, ListExtendedMutationsResponse, ListExtendedMutationsError, GetExtendedMutationData, GetExtendedMutationResponse, GetExtendedMutationError, GetMutationExtendedData, GetMutationExtendedResponse, GetMutationExtendedError, RefreshUnitData, RefreshUnitResponse, RefreshUnitError, ListExtendedRevisionsData, ListExtendedRevisionsResponse, ListExtendedRevisionsError, GetExtendedRevisionData, GetExtendedRevisionResponse, GetExtendedRevisionError, GetRevisionDataData, GetRevisionDataResponse, GetRevisionDataError, GetRevisionExtendedData, GetRevisionExtendedResponse, GetRevisionExtendedError, ListUnitEventsData, ListUnitEventsResponse, ListUnitEventsError, GetUnitEventData, GetUnitEventResponse, GetUnitEventError, UpgradeDownstreamUnitsData, UpgradeDownstreamUnitsResponse, UpgradeDownstreamUnitsError, ListAllTargetsData, ListAllTargetsResponse, ListAllTargetsError, ListAllUnitsData, ListAllUnitsResponse, ListAllUnitsError, ListUsersData, ListUsersResponse, ListUsersError, GetUserData, GetUserResponse, GetUserError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List all BridgeWorker across spaces
 * List all BridgeWorker across spaces
 */
export const listAllBridgeWorkers = <ThrowOnError extends boolean = false>(options?: Options<ListAllBridgeWorkersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAllBridgeWorkersResponse, ListAllBridgeWorkersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bridge_worker',
        ...options
    });
};

/**
 * Create action result
 * Records the status/result of an action executed by a bridge worker
 */
export const createActionResult = <ThrowOnError extends boolean = false>(options: Options<CreateActionResultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateActionResultResponse, CreateActionResultError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bridge_worker/{bridge_worker_id}/action_result',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Gets the current BridgeWorker from context
 * Gets the current BridgeWorker from context
 */
export const getSelf = <ThrowOnError extends boolean = false>(options: Options<GetSelfData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSelfResponse, GetSelfError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bridge_worker/{bridge_worker_id}/me',
        ...options
    });
};

/**
 * Stream events to bridge worker
 * Establishes an SSE connection with a bridge worker for real-time event streaming
 */
export const streamBridgeWorker = <ThrowOnError extends boolean = false>(options: Options<StreamBridgeWorkerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StreamBridgeWorkerResponse, StreamBridgeWorkerError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/bridge_worker/{bridge_worker_id}/stream',
        ...options
    });
};

/**
 * List retrieves a map of Functions across the Organization
 * List retrieves a map of Functions across the Organization
 */
export const listOrgFunctions = <ThrowOnError extends boolean = false>(options?: Options<ListOrgFunctionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListOrgFunctionsResponse, ListOrgFunctionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/function',
        ...options
    });
};

/**
 * Invoke Functions across Org
 * Invoke Functions across Units in the Organization
 */
export const invokeFunctionsOnOrg = <ThrowOnError extends boolean = false>(options?: Options<InvokeFunctionsOnOrgData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<InvokeFunctionsOnOrgResponse, InvokeFunctionsOnOrgError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/function/invoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get info about this api server
 * Get info about this api server
 */
export const apiInfo = <ThrowOnError extends boolean = false>(options?: Options<ApiInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiInfoResponse, ApiInfoError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/info',
        ...options
    });
};

/**
 * Get the current user's information
 * Get the current user's information
 */
export const getMe = <ThrowOnError extends boolean = false>(options?: Options<GetMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeResponse, GetMeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/me',
        ...options
    });
};

/**
 * List Organizations
 * List Organizations
 */
export const listOrganizations = <ThrowOnError extends boolean = false>(options?: Options<ListOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListOrganizationsResponse, ListOrganizationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organization',
        ...options
    });
};

/**
 * Create Organization
 * Create Organization
 */
export const createOrganization = <ThrowOnError extends boolean = false>(options?: Options<CreateOrganizationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateOrganizationResponse, CreateOrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organization',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Organization
 * Delete Organization
 */
export const deleteOrganization = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOrganizationResponse, DeleteOrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organization/{organization_id}',
        ...options
    });
};

/**
 * Get Organization
 * Get Organization
 */
export const getOrganization = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationResponse, GetOrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organization/{organization_id}',
        ...options
    });
};

/**
 * Update Organization
 * Update Organization
 */
export const updateOrganization = <ThrowOnError extends boolean = false>(options: Options<UpdateOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOrganizationResponse, UpdateOrganizationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organization/{organization_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Organization details with expanded relationships
 * Get Organization details with expanded relationships
 */
export const getOrganizationExtended = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationExtendedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationExtendedResponse, GetOrganizationExtendedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organization/{organization_id}/extended',
        ...options
    });
};

/**
 * List OrganizationMembers
 * List OrganizationMembers
 */
export const listOrganizationMembers = <ThrowOnError extends boolean = false>(options: Options<ListOrganizationMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListOrganizationMembersResponse, ListOrganizationMembersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organization/{organization_id}/organization_member',
        ...options
    });
};

/**
 * Create OrganizationMember
 * Create OrganizationMember
 */
export const createOrganizationMember = <ThrowOnError extends boolean = false>(options: Options<CreateOrganizationMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOrganizationMemberResponse, CreateOrganizationMemberError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organization/{organization_id}/organization_member',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete OrganizationMember
 * Delete OrganizationMember
 */
export const deleteOrganizationMember = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOrganizationMemberResponse, DeleteOrganizationMemberError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organization/{organization_id}/organization_member/{organization_member_id}',
        ...options
    });
};

/**
 * Get OrganizationMember
 * Get OrganizationMember
 */
export const getOrganizationMember = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationMemberResponse, GetOrganizationMemberError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organization/{organization_id}/organization_member/{organization_member_id}',
        ...options
    });
};

/**
 * List Spaces
 * List Spaces
 */
export const listSpaces = <ThrowOnError extends boolean = false>(options?: Options<ListSpacesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSpacesResponse, ListSpacesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space',
        ...options
    });
};

/**
 * Create Space
 * Create Space
 */
export const createSpace = <ThrowOnError extends boolean = false>(options?: Options<CreateSpaceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateSpaceResponse, CreateSpaceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Space
 * Delete Space
 */
export const deleteSpace = <ThrowOnError extends boolean = false>(options: Options<DeleteSpaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSpaceResponse, DeleteSpaceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}',
        ...options
    });
};

/**
 * Get Space
 * Get Space
 */
export const getSpace = <ThrowOnError extends boolean = false>(options: Options<GetSpaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSpaceResponse, GetSpaceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}',
        ...options
    });
};

/**
 * Update Space
 * Update Space
 */
export const updateSpace = <ThrowOnError extends boolean = false>(options: Options<UpdateSpaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSpaceResponse, UpdateSpaceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List BridgeWorkers
 * List BridgeWorkers
 */
export const listBridgeWorkers = <ThrowOnError extends boolean = false>(options: Options<ListBridgeWorkersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListBridgeWorkersResponse, ListBridgeWorkersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/bridge_worker',
        ...options
    });
};

/**
 * Create BridgeWorker
 * Create BridgeWorker
 */
export const createBridgeWorker = <ThrowOnError extends boolean = false>(options: Options<CreateBridgeWorkerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateBridgeWorkerResponse, CreateBridgeWorkerError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/bridge_worker',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete BridgeWorker
 * Delete BridgeWorker
 */
export const deleteBridgeWorker = <ThrowOnError extends boolean = false>(options: Options<DeleteBridgeWorkerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBridgeWorkerResponse, DeleteBridgeWorkerError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/bridge_worker/{bridge_worker_id}',
        ...options
    });
};

/**
 * Get BridgeWorker
 * Get BridgeWorker
 */
export const getBridgeWorker = <ThrowOnError extends boolean = false>(options: Options<GetBridgeWorkerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBridgeWorkerResponse, GetBridgeWorkerError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/bridge_worker/{bridge_worker_id}',
        ...options
    });
};

/**
 * Update BridgeWorker
 * Update BridgeWorker
 */
export const updateBridgeWorker = <ThrowOnError extends boolean = false>(options: Options<UpdateBridgeWorkerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateBridgeWorkerResponse, UpdateBridgeWorkerError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/bridge_worker/{bridge_worker_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get BridgeWorker details with expanded relationships
 * Get BridgeWorker details with expanded relationships
 */
export const getBridgeWorkerExtended = <ThrowOnError extends boolean = false>(options: Options<GetBridgeWorkerExtendedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBridgeWorkerExtendedResponse, GetBridgeWorkerExtendedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/bridge_worker/{bridge_worker_id}/extended',
        ...options
    });
};

/**
 * List available functions supported by a specific bridge worker
 * List available functions supported by a specific bridge worker
 */
export const listBridgeWorkerFunctions = <ThrowOnError extends boolean = false>(options: Options<ListBridgeWorkerFunctionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListBridgeWorkerFunctionsResponse, ListBridgeWorkerFunctionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/bridge_worker/{bridge_worker_id}/function',
        ...options
    });
};

/**
 * List BridgeWorkerStatuses
 * List BridgeWorkerStatuses
 */
export const listBridgeWorkerStatuses = <ThrowOnError extends boolean = false>(options: Options<ListBridgeWorkerStatusesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListBridgeWorkerStatusesResponse, ListBridgeWorkerStatusesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/bridge_worker/{bridge_worker_id}/status',
        ...options
    });
};

/**
 * Get BridgeWorkerStatus
 * Get BridgeWorkerStatus
 */
export const getBridgeWorkerStatus = <ThrowOnError extends boolean = false>(options: Options<GetBridgeWorkerStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBridgeWorkerStatusResponse, GetBridgeWorkerStatusError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/bridge_worker/{bridge_worker_id}/status/{status_id}',
        ...options
    });
};

/**
 * Get Space details with expanded relationships
 * Get Space details with expanded relationships
 */
export const getSpaceExtended = <ThrowOnError extends boolean = false>(options: Options<GetSpaceExtendedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSpaceExtendedResponse, GetSpaceExtendedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/extended',
        ...options
    });
};

/**
 * List retrieves a map of Functions
 * List retrieves a map of Functions
 */
export const listFunctions = <ThrowOnError extends boolean = false>(options: Options<ListFunctionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFunctionsResponse, ListFunctionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/function',
        ...options
    });
};

/**
 * Invoke Functions
 * Invoke Functions
 */
export const invokeFunctions = <ThrowOnError extends boolean = false>(options: Options<InvokeFunctionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InvokeFunctionsResponse, InvokeFunctionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/function/invoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Links
 * List Links
 */
export const listLinks = <ThrowOnError extends boolean = false>(options: Options<ListLinksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListLinksResponse, ListLinksError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/link',
        ...options
    });
};

/**
 * Create Link
 * Create Link
 */
export const createLink = <ThrowOnError extends boolean = false>(options: Options<CreateLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLinkResponse, CreateLinkError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/link',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Link
 * Delete Link
 */
export const deleteLink = <ThrowOnError extends boolean = false>(options: Options<DeleteLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLinkResponse, DeleteLinkError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/link/{link_id}',
        ...options
    });
};

/**
 * Get Link
 * Get Link
 */
export const getLink = <ThrowOnError extends boolean = false>(options: Options<GetLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinkResponse, GetLinkError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/link/{link_id}',
        ...options
    });
};

/**
 * Update Link
 * Update Link
 */
export const updateLink = <ThrowOnError extends boolean = false>(options: Options<UpdateLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateLinkResponse, UpdateLinkError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/link/{link_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Link details with expanded relationships
 * Get Link details with expanded relationships
 */
export const getLinkExtended = <ThrowOnError extends boolean = false>(options: Options<GetLinkExtendedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinkExtendedResponse, GetLinkExtendedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/link/{link_id}/extended',
        ...options
    });
};

/**
 * List Sets
 * List Sets
 */
export const listSets = <ThrowOnError extends boolean = false>(options: Options<ListSetsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListSetsResponse, ListSetsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/set',
        ...options
    });
};

/**
 * Create Set
 * Create Set
 */
export const createSet = <ThrowOnError extends boolean = false>(options: Options<CreateSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSetResponse, CreateSetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/set',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Set
 * Delete Set
 */
export const deleteSet = <ThrowOnError extends boolean = false>(options: Options<DeleteSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSetResponse, DeleteSetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/set/{set_id}',
        ...options
    });
};

/**
 * Get Set
 * Get Set
 */
export const getSet = <ThrowOnError extends boolean = false>(options: Options<GetSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSetResponse, GetSetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/set/{set_id}',
        ...options
    });
};

/**
 * Update Set
 * Update Set
 */
export const updateSet = <ThrowOnError extends boolean = false>(options: Options<UpdateSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSetResponse, UpdateSetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/set/{set_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Set details with expanded relationships
 * Get Set details with expanded relationships
 */
export const getSetExtended = <ThrowOnError extends boolean = false>(options: Options<GetSetExtendedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSetExtendedResponse, GetSetExtendedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/set/{set_id}/extended',
        ...options
    });
};

/**
 * List Targets
 * List Targets
 */
export const listTargets = <ThrowOnError extends boolean = false>(options: Options<ListTargetsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTargetsResponse, ListTargetsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/target',
        ...options
    });
};

/**
 * Create Target
 * Create Target
 */
export const createTarget = <ThrowOnError extends boolean = false>(options: Options<CreateTargetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTargetResponse, CreateTargetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/target',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Target
 * Delete Target
 */
export const deleteTarget = <ThrowOnError extends boolean = false>(options: Options<DeleteTargetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTargetResponse, DeleteTargetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/target/{target_id}',
        ...options
    });
};

/**
 * Get Target
 * Get Target
 */
export const getTarget = <ThrowOnError extends boolean = false>(options: Options<GetTargetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTargetResponse, GetTargetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/target/{target_id}',
        ...options
    });
};

/**
 * Update Target
 * Update Target
 */
export const updateTarget = <ThrowOnError extends boolean = false>(options: Options<UpdateTargetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTargetResponse, UpdateTargetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/target/{target_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Target details with expanded relationships
 * Get Target details with expanded relationships
 */
export const getTargetExtended = <ThrowOnError extends boolean = false>(options: Options<GetTargetExtendedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTargetExtendedResponse, GetTargetExtendedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/target/{target_id}/extended',
        ...options
    });
};

/**
 * List Triggers
 * List Triggers
 */
export const listTriggers = <ThrowOnError extends boolean = false>(options: Options<ListTriggersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTriggersResponse, ListTriggersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/trigger',
        ...options
    });
};

/**
 * Create Trigger
 * Create Trigger
 */
export const createTrigger = <ThrowOnError extends boolean = false>(options: Options<CreateTriggerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTriggerResponse, CreateTriggerError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/trigger',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Trigger
 * Delete Trigger
 */
export const deleteTrigger = <ThrowOnError extends boolean = false>(options: Options<DeleteTriggerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTriggerResponse, DeleteTriggerError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/trigger/{trigger_id}',
        ...options
    });
};

/**
 * Get Trigger
 * Get Trigger
 */
export const getTrigger = <ThrowOnError extends boolean = false>(options: Options<GetTriggerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTriggerResponse, GetTriggerError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/trigger/{trigger_id}',
        ...options
    });
};

/**
 * Update Trigger
 * Update Trigger
 */
export const updateTrigger = <ThrowOnError extends boolean = false>(options: Options<UpdateTriggerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTriggerResponse, UpdateTriggerError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/trigger/{trigger_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Trigger details with expanded relationships
 * Get Trigger details with expanded relationships
 */
export const getTriggerExtended = <ThrowOnError extends boolean = false>(options: Options<GetTriggerExtendedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTriggerExtendedResponse, GetTriggerExtendedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/trigger/{trigger_id}/extended',
        ...options
    });
};

/**
 * List Units
 * List Units
 */
export const listUnits = <ThrowOnError extends boolean = false>(options: Options<ListUnitsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUnitsResponse, ListUnitsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit',
        ...options
    });
};

/**
 * Create Unit
 * Create Unit
 */
export const createUnit = <ThrowOnError extends boolean = false>(options: Options<CreateUnitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUnitResponse, CreateUnitError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List of Units in the space with optional expanded relationships
 * List of Units in the space with optional expanded relationships
 */
export const listExtendedUnits = <ThrowOnError extends boolean = false>(options: Options<ListExtendedUnitsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListExtendedUnitsResponse, ListExtendedUnitsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/extended',
        ...options
    });
};

/**
 * Delete Unit
 * Delete Unit
 */
export const deleteUnit = <ThrowOnError extends boolean = false>(options: Options<DeleteUnitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUnitResponse, DeleteUnitError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}',
        ...options
    });
};

/**
 * Get Unit
 * Get Unit
 */
export const getUnit = <ThrowOnError extends boolean = false>(options: Options<GetUnitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUnitResponse, GetUnitError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}',
        ...options
    });
};

/**
 * Update Unit
 * Update Unit
 */
export const updateUnit = <ThrowOnError extends boolean = false>(options: Options<UpdateUnitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUnitResponse, UpdateUnitError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Apply a unit configuration
 * Triggers an apply operation using the config data to a Bridge Worker
 */
export const applyUnit = <ThrowOnError extends boolean = false>(options: Options<ApplyUnitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApplyUnitResponse, ApplyUnitError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/apply',
        ...options
    });
};

/**
 * Approve a unit configuration
 * Record that the user invoking this operation approves the configuration data
 */
export const approveUnit = <ThrowOnError extends boolean = false>(options: Options<ApproveUnitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApproveUnitResponse, ApproveUnitError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/approve',
        ...options
    });
};

/**
 * Destroy a unit configuration
 * Triggers a destroy operation using the config data to a Bridge Worker
 */
export const destroyUnit = <ThrowOnError extends boolean = false>(options: Options<DestroyUnitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DestroyUnitResponse, DestroyUnitError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/destroy',
        ...options
    });
};

/**
 * Get Unit details with expanded relationships
 * Get Unit details with expanded relationships
 */
export const getUnitExtended = <ThrowOnError extends boolean = false>(options: Options<GetUnitExtendedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUnitExtendedResponse, GetUnitExtendedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/extended',
        ...options
    });
};

/**
 * Import a configuration unit
 * Triggers an import operation using the config data to a Bridge Worker
 */
export const importUnit = <ThrowOnError extends boolean = false>(options: Options<ImportUnitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ImportUnitResponse, ImportUnitError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Download live state
 * Download the live state of a unit
 */
export const downloadLiveStateUnit = <ThrowOnError extends boolean = false>(options: Options<DownloadLiveStateUnitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadLiveStateUnitResponse, DownloadLiveStateUnitError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/live-state',
        ...options
    });
};

/**
 * List ExtendedMutations
 * List ExtendedMutations
 */
export const listExtendedMutations = <ThrowOnError extends boolean = false>(options: Options<ListExtendedMutationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListExtendedMutationsResponse, ListExtendedMutationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/mutation',
        ...options
    });
};

/**
 * Get ExtendedMutation
 * Get ExtendedMutation
 */
export const getExtendedMutation = <ThrowOnError extends boolean = false>(options: Options<GetExtendedMutationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExtendedMutationResponse, GetExtendedMutationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/mutation/{mutation_id}',
        ...options
    });
};

/**
 * Get Mutation details with expanded relationships
 * Get Mutation details with expanded relationships
 */
export const getMutationExtended = <ThrowOnError extends boolean = false>(options: Options<GetMutationExtendedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMutationExtendedResponse, GetMutationExtendedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/mutation/{mutation_id}/extended',
        ...options
    });
};

/**
 * Refresh a unit configuration
 * Triggers a refresh operation using the config data to a Bridge Worker
 */
export const refreshUnit = <ThrowOnError extends boolean = false>(options: Options<RefreshUnitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefreshUnitResponse, RefreshUnitError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/refresh',
        ...options
    });
};

/**
 * List ExtendedRevisions
 * List ExtendedRevisions
 */
export const listExtendedRevisions = <ThrowOnError extends boolean = false>(options: Options<ListExtendedRevisionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListExtendedRevisionsResponse, ListExtendedRevisionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/revision',
        ...options
    });
};

/**
 * Get ExtendedRevision
 * Get ExtendedRevision
 */
export const getExtendedRevision = <ThrowOnError extends boolean = false>(options: Options<GetExtendedRevisionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExtendedRevisionResponse, GetExtendedRevisionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/revision/{revision_id}',
        ...options
    });
};

/**
 * Download the selected Revision's data
 * Download the selected Revision's data
 */
export const getRevisionData = <ThrowOnError extends boolean = false>(options: Options<GetRevisionDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRevisionDataResponse, GetRevisionDataError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/revision/{revision_id}/data',
        ...options
    });
};

/**
 * Get Revision details with expanded relationships
 * Get Revision details with expanded relationships
 */
export const getRevisionExtended = <ThrowOnError extends boolean = false>(options: Options<GetRevisionExtendedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRevisionExtendedResponse, GetRevisionExtendedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended',
        ...options
    });
};

/**
 * List UnitEvents
 * List UnitEvents
 */
export const listUnitEvents = <ThrowOnError extends boolean = false>(options: Options<ListUnitEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUnitEventsResponse, ListUnitEventsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/unit_event',
        ...options
    });
};

/**
 * Get UnitEvent
 * Get UnitEvent
 */
export const getUnitEvent = <ThrowOnError extends boolean = false>(options: Options<GetUnitEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUnitEventResponse, GetUnitEventError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/unit_event/{unit_event_id}',
        ...options
    });
};

/**
 * Bulk Upgrades a given Unit to downstream Units
 * Bulk Upgrades a given Unit for upgrading downstream Units
 */
export const upgradeDownstreamUnits = <ThrowOnError extends boolean = false>(options: Options<UpgradeDownstreamUnitsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpgradeDownstreamUnitsResponse, UpgradeDownstreamUnitsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/space/{space_id}/unit/{unit_id}/upgrade',
        ...options
    });
};

/**
 * List of Targets across spaces
 * Retrieves a list of Targets across spaces in the Organization
 */
export const listAllTargets = <ThrowOnError extends boolean = false>(options?: Options<ListAllTargetsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAllTargetsResponse, ListAllTargetsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/target',
        ...options
    });
};

/**
 * List of Units across spaces
 * Retrieves a list of Units across spaces in the Organization
 */
export const listAllUnits = <ThrowOnError extends boolean = false>(options?: Options<ListAllUnitsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAllUnitsResponse, ListAllUnitsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/unit',
        ...options
    });
};

/**
 * List Users
 * List Users
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersResponse, ListUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user',
        ...options
    });
};

/**
 * Get User
 * Get User
 */
export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/{user_id}',
        ...options
    });
};