// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsRevision models revision
//
// swagger:model models.Revision
type ModelsRevision struct {

	// ApplyGates contains conditions that must be satisfied before applying this revision.
	// See also the Apply Gates documentation.
	ApplyGates map[string]bool `json:"ApplyGates,omitempty"`

	// ApprovedBy contains the unique identifiers of users that have approved this revision.
	// example: ["123e4567-e89b-12d3-a456-426614174002","123e4567-e89b-12d3-a456-426614174003"]
	ApprovedBy []string `json:"ApprovedBy"`

	// ContentHash is the CRC32 hash of this revision's data.
	ContentHash int64 `json:"ContentHash,omitempty"`

	// CreatedAt is the timestamp when the entity was created in "2023-01-01T12:00:00Z" format.
	// Example: 2025-04-04T11:50:02.95102-07:00
	CreatedAt string `json:"CreatedAt,omitempty"`

	// CursorID is an auto-incrementing sequence number used for pagination.
	CursorID int64 `json:"CursorID,omitempty"`

	// Data is the configuration data at this revision.
	// Format: byte
	Data strfmt.Base64 `json:"Data,omitempty"`

	// Description is the user description of the change.
	// It is copied from the LastChangeDescription field of the Unit at the time the change was made that created the Revision.
	// example: "Updated replicas to 3 by function set-replicas"
	Description string `json:"Description,omitempty"`

	// LiveAt is the time at which the revision was applied, if it was applied.
	// If not applied, the value is "0001-01-01T00:00:00Z".
	// example: "2023-01-01T12:00:00Z"
	LiveAt string `json:"LiveAt,omitempty"`

	// MutationSources contains fine-grained details regarding the sources of mutations to the config data.
	MutationSources []*APIResourceMutation `json:"MutationSources"`

	// organization ID
	OrganizationID string `json:"OrganizationID,omitempty"`

	// RevisionID is the unique identifier for the revision.
	RevisionID string `json:"RevisionID,omitempty"`

	// RevisionNum is the sequence number of this revision.
	RevisionNum int64 `json:"RevisionNum,omitempty"`

	// Source is the ConfigHub operation that created this revision.
	// required: true
	// example: "UpdateUnit"
	Source string `json:"Source,omitempty"`

	// space ID
	SpaceID string `json:"SpaceID,omitempty"`

	// unit ID
	UnitID string `json:"UnitID,omitempty"`

	// UpdatedAt is the timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.
	// Example: 2025-04-04T11:50:02.95102-07:00
	UpdatedAt string `json:"UpdatedAt,omitempty"`

	// UserAgent is the User-Agent string if this revision is created by an API call.
	// example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
	UserAgent string `json:"UserAgent,omitempty"`

	// UserID is the unique identifier of the user who made the change.
	// Automated changes, such as by triggers and resolve, are currently made with the UserID "00000000-0000-0000-0000-000000000000".
	// example: "123e4567-e89b-12d3-a456-426614174001"
	UserID string `json:"UserID,omitempty"`

	// Version is an entity-specific sequence number used for optimistic concurrency control.
	// The value read must be sent in calls to Update.
	Version int64 `json:"Version,omitempty"`
}

// Validate validates this models revision
func (m *ModelsRevision) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMutationSources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsRevision) validateMutationSources(formats strfmt.Registry) error {
	if swag.IsZero(m.MutationSources) { // not required
		return nil
	}

	for i := 0; i < len(m.MutationSources); i++ {
		if swag.IsZero(m.MutationSources[i]) { // not required
			continue
		}

		if m.MutationSources[i] != nil {
			if err := m.MutationSources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MutationSources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("MutationSources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this models revision based on the context it is used
func (m *ModelsRevision) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMutationSources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsRevision) contextValidateMutationSources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MutationSources); i++ {

		if m.MutationSources[i] != nil {

			if swag.IsZero(m.MutationSources[i]) { // not required
				return nil
			}

			if err := m.MutationSources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MutationSources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("MutationSources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsRevision) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsRevision) UnmarshalBinary(b []byte) error {
	var res ModelsRevision
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
