// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIResourceMutation api resource mutation
//
// swagger:model api.ResourceMutation
type APIResourceMutation struct {

	// path mutation map
	PathMutationMap APIMutationMap `json:"PathMutationMap,omitempty"`

	// resource
	Resource *APIResourceInfo `json:"Resource,omitempty"`

	// resource mutation info
	ResourceMutationInfo *APIMutationInfo `json:"ResourceMutationInfo,omitempty"`
}

// Validate validates this api resource mutation
func (m *APIResourceMutation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePathMutationMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceMutationInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIResourceMutation) validatePathMutationMap(formats strfmt.Registry) error {
	if swag.IsZero(m.PathMutationMap) { // not required
		return nil
	}

	if m.PathMutationMap != nil {
		if err := m.PathMutationMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PathMutationMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PathMutationMap")
			}
			return err
		}
	}

	return nil
}

func (m *APIResourceMutation) validateResource(formats strfmt.Registry) error {
	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Resource")
			}
			return err
		}
	}

	return nil
}

func (m *APIResourceMutation) validateResourceMutationInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceMutationInfo) { // not required
		return nil
	}

	if m.ResourceMutationInfo != nil {
		if err := m.ResourceMutationInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResourceMutationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResourceMutationInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this api resource mutation based on the context it is used
func (m *APIResourceMutation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePathMutationMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceMutationInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIResourceMutation) contextValidatePathMutationMap(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PathMutationMap) { // not required
		return nil
	}

	if err := m.PathMutationMap.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PathMutationMap")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PathMutationMap")
		}
		return err
	}

	return nil
}

func (m *APIResourceMutation) contextValidateResource(ctx context.Context, formats strfmt.Registry) error {

	if m.Resource != nil {

		if swag.IsZero(m.Resource) { // not required
			return nil
		}

		if err := m.Resource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Resource")
			}
			return err
		}
	}

	return nil
}

func (m *APIResourceMutation) contextValidateResourceMutationInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceMutationInfo != nil {

		if swag.IsZero(m.ResourceMutationInfo) { // not required
			return nil
		}

		if err := m.ResourceMutationInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResourceMutationInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResourceMutationInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIResourceMutation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIResourceMutation) UnmarshalBinary(b []byte) error {
	var res APIResourceMutation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
