// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// APIMutationType api mutation type
//
// swagger:model api.MutationType
type APIMutationType string

func NewAPIMutationType(value APIMutationType) *APIMutationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated APIMutationType.
func (m APIMutationType) Pointer() *APIMutationType {
	return &m
}

const (

	// APIMutationTypeNone captures enum value "None"
	APIMutationTypeNone APIMutationType = "None"

	// APIMutationTypeAdd captures enum value "Add"
	APIMutationTypeAdd APIMutationType = "Add"

	// APIMutationTypeUpdate captures enum value "Update"
	APIMutationTypeUpdate APIMutationType = "Update"

	// APIMutationTypeReplace captures enum value "Replace"
	APIMutationTypeReplace APIMutationType = "Replace"

	// APIMutationTypeDelete captures enum value "Delete"
	APIMutationTypeDelete APIMutationType = "Delete"
)

// for schema
var apiMutationTypeEnum []interface{}

func init() {
	var res []APIMutationType
	if err := json.Unmarshal([]byte(`["None","Add","Update","Replace","Delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiMutationTypeEnum = append(apiMutationTypeEnum, v)
	}
}

func (m APIMutationType) validateAPIMutationTypeEnum(path, location string, value APIMutationType) error {
	if err := validate.EnumCase(path, location, value, apiMutationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this api mutation type
func (m APIMutationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAPIMutationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this api mutation type based on context it is used
func (m APIMutationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
