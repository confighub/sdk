// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelsTriggerEvent models trigger event
//
// swagger:model models.TriggerEvent
type ModelsTriggerEvent string

func NewModelsTriggerEvent(value ModelsTriggerEvent) *ModelsTriggerEvent {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelsTriggerEvent.
func (m ModelsTriggerEvent) Pointer() *ModelsTriggerEvent {
	return &m
}

const (

	// ModelsTriggerEventEmpty captures enum value ""
	ModelsTriggerEventEmpty ModelsTriggerEvent = ""

	// ModelsTriggerEventMutation captures enum value "Mutation"
	ModelsTriggerEventMutation ModelsTriggerEvent = "Mutation"

	// ModelsTriggerEventPreClone captures enum value "PreClone"
	ModelsTriggerEventPreClone ModelsTriggerEvent = "PreClone"

	// ModelsTriggerEventPostClone captures enum value "PostClone"
	ModelsTriggerEventPostClone ModelsTriggerEvent = "PostClone"
)

// for schema
var modelsTriggerEventEnum []interface{}

func init() {
	var res []ModelsTriggerEvent
	if err := json.Unmarshal([]byte(`["","Mutation","PreClone","PostClone"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelsTriggerEventEnum = append(modelsTriggerEventEnum, v)
	}
}

func (m ModelsTriggerEvent) validateModelsTriggerEventEnum(path, location string, value ModelsTriggerEvent) error {
	if err := validate.EnumCase(path, location, value, modelsTriggerEventEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this models trigger event
func (m ModelsTriggerEvent) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelsTriggerEventEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this models trigger event based on context it is used
func (m ModelsTriggerEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
