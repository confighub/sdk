// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsBridgeWorkerStatus models bridge worker status
//
// swagger:model models.BridgeWorkerStatus
type ModelsBridgeWorkerStatus struct {

	// BridgeWorkerID is the unique identifier of the associated bridge worker.
	BridgeWorkerID string `json:"BridgeWorkerID,omitempty"`

	// BridgeWorkerSlug is a unique identifier (slug) of the bridge worker.
	BridgeWorkerSlug string `json:"BridgeWorkerSlug,omitempty"`

	// BridgeWorkerStatusID is the unique identifier for the bridge worker status entry.
	BridgeWorkerStatusID string `json:"BridgeWorkerStatusID,omitempty"`

	// IPAddress is the IP address from which the bridge worker is connecting.
	IPAddress string `json:"IPAddress,omitempty"`

	// OrganizationID references the organization to which the bridge worker belongs.
	OrganizationID string `json:"OrganizationID,omitempty"`

	// SeenAt is the timestamp when the bridge worker was last seen.
	SeenAt string `json:"SeenAt,omitempty"`

	// SpaceID references the space to which the bridge worker belongs.
	SpaceID string `json:"SpaceID,omitempty"`

	// Status indicates the current status of the bridge worker.
	// This status is read-only.
	// Possible values include Connected, Disconnected, ActionSent, ActionResultReceived.
	Status string `json:"Status,omitempty"`
}

// Validate validates this models bridge worker status
func (m *ModelsBridgeWorkerStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this models bridge worker status based on context it is used
func (m *ModelsBridgeWorkerStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsBridgeWorkerStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsBridgeWorkerStatus) UnmarshalBinary(b []byte) error {
	var res ModelsBridgeWorkerStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
