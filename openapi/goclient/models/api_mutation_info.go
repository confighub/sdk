// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIMutationInfo api mutation info
//
// swagger:model api.MutationInfo
type APIMutationInfo struct {

	// function index or sequence number corresponding to the change
	Index int64 `json:"Index,omitempty"`

	// mutation type
	MutationType APIMutationType `json:"MutationType,omitempty"`

	// used to decide how to use the mututation
	Predicate bool `json:"Predicate,omitempty"`

	// removed configuration data if MutationType is Delete and otherwise the new data
	Value string `json:"Value,omitempty"`
}

// Validate validates this api mutation info
func (m *APIMutationInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMutationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIMutationInfo) validateMutationType(formats strfmt.Registry) error {
	if swag.IsZero(m.MutationType) { // not required
		return nil
	}

	if err := m.MutationType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MutationType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("MutationType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this api mutation info based on the context it is used
func (m *APIMutationInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMutationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIMutationInfo) contextValidateMutationType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.MutationType) { // not required
		return nil
	}

	if err := m.MutationType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MutationType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("MutationType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIMutationInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIMutationInfo) UnmarshalBinary(b []byte) error {
	var res APIMutationInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
