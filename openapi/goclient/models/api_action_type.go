// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// APIActionType api action type
//
// swagger:model api.ActionType
type APIActionType string

func NewAPIActionType(value APIActionType) *APIActionType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated APIActionType.
func (m APIActionType) Pointer() *APIActionType {
	return &m
}

const (

	// APIActionTypeNA captures enum value "N/A"
	APIActionTypeNA APIActionType = "N/A"

	// APIActionTypeApply captures enum value "Apply"
	APIActionTypeApply APIActionType = "Apply"

	// APIActionTypeDestroy captures enum value "Destroy"
	APIActionTypeDestroy APIActionType = "Destroy"

	// APIActionTypeRefresh captures enum value "Refresh"
	APIActionTypeRefresh APIActionType = "Refresh"

	// APIActionTypeImport captures enum value "Import"
	APIActionTypeImport APIActionType = "Import"

	// APIActionTypeFinalize captures enum value "Finalize"
	APIActionTypeFinalize APIActionType = "Finalize"

	// APIActionTypeHeartbeat captures enum value "Heartbeat"
	APIActionTypeHeartbeat APIActionType = "Heartbeat"

	// APIActionTypeInvokeFunctions captures enum value "InvokeFunctions"
	APIActionTypeInvokeFunctions APIActionType = "InvokeFunctions"

	// APIActionTypeListFunctions captures enum value "ListFunctions"
	APIActionTypeListFunctions APIActionType = "ListFunctions"
)

// for schema
var apiActionTypeEnum []interface{}

func init() {
	var res []APIActionType
	if err := json.Unmarshal([]byte(`["N/A","Apply","Destroy","Refresh","Import","Finalize","Heartbeat","InvokeFunctions","ListFunctions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiActionTypeEnum = append(apiActionTypeEnum, v)
	}
}

func (m APIActionType) validateAPIActionTypeEnum(path, location string, value APIActionType) error {
	if err := validate.EnumCase(path, location, value, apiActionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this api action type
func (m APIActionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAPIActionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this api action type based on context it is used
func (m APIActionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
