// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsMutation models mutation
//
// swagger:model models.Mutation
type ModelsMutation struct {

	// CreatedAt is the timestamp when the entity was created in "2023-01-01T12:00:00Z" format.
	// Example: 2025-04-04T11:50:02.95102-07:00
	CreatedAt string `json:"CreatedAt,omitempty"`

	// CursorID is an auto-incrementing sequence number used for pagination.
	CursorID int64 `json:"CursorID,omitempty"`

	// FunctionInvocation contains information about the non-trigger function invoked if the change was made by a function.
	FunctionInvocation struct {
		APIFunctionInvocation
	} `json:"FunctionInvocation,omitempty"`

	// LinkID is the unique identifier of the link if the change was made due to resolving a link.
	LinkID string `json:"LinkID,omitempty"`

	// MutationID is the unique identifier for the mutation.
	MutationID string `json:"MutationID,omitempty"`

	// MutationNum is the sequence number of this mutation.
	MutationNum int64 `json:"MutationNum,omitempty"`

	// organization ID
	OrganizationID string `json:"OrganizationID,omitempty"`

	// ProvidedPath is the path of the provided value used to satisfy a needed value if the change was made due to resolving a link.
	ProvidedPath string `json:"ProvidedPath,omitempty"`

	// ProvidedResource contains the type and name of the resource which provided a value used to satisfy a needed value if the change was made due to resolving a link.
	ProvidedResource struct {
		APIResourceInfo
	} `json:"ProvidedResource,omitempty"`

	// revision ID
	RevisionID string `json:"RevisionID,omitempty"`

	// RevisionNum is the sequence number of the corresponding revision.
	RevisionNum int64 `json:"RevisionNum,omitempty"`

	// space ID
	SpaceID string `json:"SpaceID,omitempty"`

	// TriggerID is the unique identifier of the trigger if the change was made by a trigger.
	TriggerID string `json:"TriggerID,omitempty"`

	// unit ID
	UnitID string `json:"UnitID,omitempty"`

	// UpdatedAt is the timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.
	// Example: 2025-04-04T11:50:02.95102-07:00
	UpdatedAt string `json:"UpdatedAt,omitempty"`

	// Version is an entity-specific sequence number used for optimistic concurrency control.
	// The value read must be sent in calls to Update.
	Version int64 `json:"Version,omitempty"`
}

// Validate validates this models mutation
func (m *ModelsMutation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFunctionInvocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvidedResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsMutation) validateFunctionInvocation(formats strfmt.Registry) error {
	if swag.IsZero(m.FunctionInvocation) { // not required
		return nil
	}

	return nil
}

func (m *ModelsMutation) validateProvidedResource(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvidedResource) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this models mutation based on the context it is used
func (m *ModelsMutation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFunctionInvocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvidedResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsMutation) contextValidateFunctionInvocation(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ModelsMutation) contextValidateProvidedResource(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsMutation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsMutation) UnmarshalBinary(b []byte) error {
	var res ModelsMutation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
