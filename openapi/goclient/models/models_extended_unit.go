// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsExtendedUnit models extended unit
//
// swagger:model models.ExtendedUnit
type ModelsExtendedUnit struct {

	// approved by
	ApprovedBy []*ModelsUser `json:"ApprovedBy"`

	// head mutation
	HeadMutation *ModelsMutation `json:"HeadMutation,omitempty"`

	// head revision
	HeadRevision *ModelsRevision `json:"HeadRevision,omitempty"`

	// last applied revision
	LastAppliedRevision *ModelsRevision `json:"LastAppliedRevision,omitempty"`

	// latest unit event
	LatestUnitEvent *ModelsUnitEvent `json:"LatestUnitEvent,omitempty"`

	// live revision
	LiveRevision *ModelsRevision `json:"LiveRevision,omitempty"`

	// organization
	Organization *ModelsOrganization `json:"Organization,omitempty"`

	// set
	Set *ModelsSet `json:"Set,omitempty"`

	// space
	Space *ModelsSpace `json:"Space,omitempty"`

	// target
	Target *ModelsTarget `json:"Target,omitempty"`

	// unit
	Unit *ModelsUnit `json:"Unit,omitempty"`

	// upstream space
	UpstreamSpace *ModelsSpace `json:"UpstreamSpace,omitempty"`

	// upstream unit
	UpstreamUnit *ModelsUnit `json:"UpstreamUnit,omitempty"`
}

// Validate validates this models extended unit
func (m *ModelsExtendedUnit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadMutation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastAppliedRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestUnitEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLiveRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpstreamSpace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpstreamUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsExtendedUnit) validateApprovedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovedBy) { // not required
		return nil
	}

	for i := 0; i < len(m.ApprovedBy); i++ {
		if swag.IsZero(m.ApprovedBy[i]) { // not required
			continue
		}

		if m.ApprovedBy[i] != nil {
			if err := m.ApprovedBy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ApprovedBy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ApprovedBy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsExtendedUnit) validateHeadMutation(formats strfmt.Registry) error {
	if swag.IsZero(m.HeadMutation) { // not required
		return nil
	}

	if m.HeadMutation != nil {
		if err := m.HeadMutation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HeadMutation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("HeadMutation")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) validateHeadRevision(formats strfmt.Registry) error {
	if swag.IsZero(m.HeadRevision) { // not required
		return nil
	}

	if m.HeadRevision != nil {
		if err := m.HeadRevision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HeadRevision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("HeadRevision")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) validateLastAppliedRevision(formats strfmt.Registry) error {
	if swag.IsZero(m.LastAppliedRevision) { // not required
		return nil
	}

	if m.LastAppliedRevision != nil {
		if err := m.LastAppliedRevision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LastAppliedRevision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LastAppliedRevision")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) validateLatestUnitEvent(formats strfmt.Registry) error {
	if swag.IsZero(m.LatestUnitEvent) { // not required
		return nil
	}

	if m.LatestUnitEvent != nil {
		if err := m.LatestUnitEvent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LatestUnitEvent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LatestUnitEvent")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) validateLiveRevision(formats strfmt.Registry) error {
	if swag.IsZero(m.LiveRevision) { // not required
		return nil
	}

	if m.LiveRevision != nil {
		if err := m.LiveRevision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LiveRevision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LiveRevision")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) validateOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) validateSet(formats strfmt.Registry) error {
	if swag.IsZero(m.Set) { // not required
		return nil
	}

	if m.Set != nil {
		if err := m.Set.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Set")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Set")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) validateSpace(formats strfmt.Registry) error {
	if swag.IsZero(m.Space) { // not required
		return nil
	}

	if m.Space != nil {
		if err := m.Space.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Space")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Space")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) validateTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Target")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) validateUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.Unit) { // not required
		return nil
	}

	if m.Unit != nil {
		if err := m.Unit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Unit")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) validateUpstreamSpace(formats strfmt.Registry) error {
	if swag.IsZero(m.UpstreamSpace) { // not required
		return nil
	}

	if m.UpstreamSpace != nil {
		if err := m.UpstreamSpace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpstreamSpace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpstreamSpace")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) validateUpstreamUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.UpstreamUnit) { // not required
		return nil
	}

	if m.UpstreamUnit != nil {
		if err := m.UpstreamUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpstreamUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpstreamUnit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models extended unit based on the context it is used
func (m *ModelsExtendedUnit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApprovedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeadMutation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeadRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastAppliedRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatestUnitEvent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLiveRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpstreamSpace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpstreamUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsExtendedUnit) contextValidateApprovedBy(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ApprovedBy); i++ {

		if m.ApprovedBy[i] != nil {

			if swag.IsZero(m.ApprovedBy[i]) { // not required
				return nil
			}

			if err := m.ApprovedBy[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ApprovedBy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ApprovedBy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsExtendedUnit) contextValidateHeadMutation(ctx context.Context, formats strfmt.Registry) error {

	if m.HeadMutation != nil {

		if swag.IsZero(m.HeadMutation) { // not required
			return nil
		}

		if err := m.HeadMutation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HeadMutation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("HeadMutation")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) contextValidateHeadRevision(ctx context.Context, formats strfmt.Registry) error {

	if m.HeadRevision != nil {

		if swag.IsZero(m.HeadRevision) { // not required
			return nil
		}

		if err := m.HeadRevision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HeadRevision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("HeadRevision")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) contextValidateLastAppliedRevision(ctx context.Context, formats strfmt.Registry) error {

	if m.LastAppliedRevision != nil {

		if swag.IsZero(m.LastAppliedRevision) { // not required
			return nil
		}

		if err := m.LastAppliedRevision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LastAppliedRevision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LastAppliedRevision")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) contextValidateLatestUnitEvent(ctx context.Context, formats strfmt.Registry) error {

	if m.LatestUnitEvent != nil {

		if swag.IsZero(m.LatestUnitEvent) { // not required
			return nil
		}

		if err := m.LatestUnitEvent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LatestUnitEvent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LatestUnitEvent")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) contextValidateLiveRevision(ctx context.Context, formats strfmt.Registry) error {

	if m.LiveRevision != nil {

		if swag.IsZero(m.LiveRevision) { // not required
			return nil
		}

		if err := m.LiveRevision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LiveRevision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LiveRevision")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) contextValidateOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.Organization != nil {

		if swag.IsZero(m.Organization) { // not required
			return nil
		}

		if err := m.Organization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) contextValidateSet(ctx context.Context, formats strfmt.Registry) error {

	if m.Set != nil {

		if swag.IsZero(m.Set) { // not required
			return nil
		}

		if err := m.Set.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Set")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Set")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) contextValidateSpace(ctx context.Context, formats strfmt.Registry) error {

	if m.Space != nil {

		if swag.IsZero(m.Space) { // not required
			return nil
		}

		if err := m.Space.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Space")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Space")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.Target != nil {

		if swag.IsZero(m.Target) { // not required
			return nil
		}

		if err := m.Target.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Target")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) contextValidateUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.Unit != nil {

		if swag.IsZero(m.Unit) { // not required
			return nil
		}

		if err := m.Unit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Unit")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) contextValidateUpstreamSpace(ctx context.Context, formats strfmt.Registry) error {

	if m.UpstreamSpace != nil {

		if swag.IsZero(m.UpstreamSpace) { // not required
			return nil
		}

		if err := m.UpstreamSpace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpstreamSpace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpstreamSpace")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedUnit) contextValidateUpstreamUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.UpstreamUnit != nil {

		if swag.IsZero(m.UpstreamUnit) { // not required
			return nil
		}

		if err := m.UpstreamUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpstreamUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UpstreamUnit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsExtendedUnit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsExtendedUnit) UnmarshalBinary(b []byte) error {
	var res ModelsExtendedUnit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
