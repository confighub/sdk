// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIFunctionSignature api function signature
//
// swagger:model api.FunctionSignature
type APIFunctionSignature struct {

	// description of the function
	Description string `json:"Description,omitempty"`

	// function name
	FunctionName string `json:"FunctionName,omitempty"`

	// does not call other systems
	Hermetic bool `json:"Hermetic,omitempty"`

	// will return the same result if invoked again
	Idempotent bool `json:"Idempotent,omitempty"`

	// may change the configuration data
	Mutating bool `json:"Mutating,omitempty"`

	// output description
	OutputInfo struct {
		APIFunctionOutput
	} `json:"OutputInfo,omitempty"`

	// parameters
	Parameters []*APIFunctionParameter `json:"Parameters"`

	// number of required parameters
	RequiredParameters int64 `json:"RequiredParameters,omitempty"`

	// returns ValidationResult
	Validating bool `json:"Validating,omitempty"`

	// last parameter may be repeated
	VarArgs bool `json:"VarArgs,omitempty"`
}

// Validate validates this api function signature
func (m *APIFunctionSignature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOutputInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIFunctionSignature) validateOutputInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputInfo) { // not required
		return nil
	}

	return nil
}

func (m *APIFunctionSignature) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this api function signature based on the context it is used
func (m *APIFunctionSignature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOutputInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIFunctionSignature) contextValidateOutputInfo(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *APIFunctionSignature) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameters); i++ {

		if m.Parameters[i] != nil {

			if swag.IsZero(m.Parameters[i]) { // not required
				return nil
			}

			if err := m.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIFunctionSignature) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIFunctionSignature) UnmarshalBinary(b []byte) error {
	var res APIFunctionSignature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
