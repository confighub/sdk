// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsUnitExtended models unit extended
//
// swagger:model models.UnitExtended
type ModelsUnitExtended struct {

	// action
	Action string `json:"Action,omitempty"`

	// action result
	ActionResult string `json:"ActionResult,omitempty"`

	// action started at
	ActionStartedAt string `json:"ActionStartedAt,omitempty"`

	// action terminated at
	ActionTerminatedAt string `json:"ActionTerminatedAt,omitempty"`

	// approved by users
	ApprovedByUsers []string `json:"ApprovedByUsers"`

	// drift
	Drift string `json:"Drift,omitempty"`

	// from links
	FromLinks []*ModelsLink `json:"FromLinks"`

	// status
	Status string `json:"Status,omitempty"`

	// to links
	ToLinks []*ModelsLink `json:"ToLinks"`

	// unit
	Unit *ModelsUnit `json:"Unit,omitempty"`
}

// Validate validates this models unit extended
func (m *ModelsUnitExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFromLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsUnitExtended) validateFromLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.FromLinks) { // not required
		return nil
	}

	for i := 0; i < len(m.FromLinks); i++ {
		if swag.IsZero(m.FromLinks[i]) { // not required
			continue
		}

		if m.FromLinks[i] != nil {
			if err := m.FromLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FromLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("FromLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsUnitExtended) validateToLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.ToLinks) { // not required
		return nil
	}

	for i := 0; i < len(m.ToLinks); i++ {
		if swag.IsZero(m.ToLinks[i]) { // not required
			continue
		}

		if m.ToLinks[i] != nil {
			if err := m.ToLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ToLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ToLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsUnitExtended) validateUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.Unit) { // not required
		return nil
	}

	if m.Unit != nil {
		if err := m.Unit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Unit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models unit extended based on the context it is used
func (m *ModelsUnitExtended) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFromLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateToLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsUnitExtended) contextValidateFromLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FromLinks); i++ {

		if m.FromLinks[i] != nil {

			if swag.IsZero(m.FromLinks[i]) { // not required
				return nil
			}

			if err := m.FromLinks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FromLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("FromLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsUnitExtended) contextValidateToLinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ToLinks); i++ {

		if m.ToLinks[i] != nil {

			if swag.IsZero(m.ToLinks[i]) { // not required
				return nil
			}

			if err := m.ToLinks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ToLinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ToLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsUnitExtended) contextValidateUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.Unit != nil {

		if swag.IsZero(m.Unit) { // not required
			return nil
		}

		if err := m.Unit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Unit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsUnitExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsUnitExtended) UnmarshalBinary(b []byte) error {
	var res ModelsUnitExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
