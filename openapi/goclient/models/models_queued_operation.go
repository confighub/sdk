// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsQueuedOperation models queued operation
//
// swagger:model models.QueuedOperation
type ModelsQueuedOperation struct {

	// action
	Action APIActionType `json:"Action,omitempty"`

	// BridgeworkerID is the unique identifier of the bridge worker that will process this operation.
	BridgeWorkerID string `json:"BridgeWorkerID,omitempty"`

	// CreatedAt is the timestamp when the operation was created.
	CreatedAt string `json:"CreatedAt,omitempty"`

	// ExtraParams contains additional parameters for the operation in string format.
	ExtraParams string `json:"ExtraParams,omitempty"`

	// OrganizationID is the unique identifier of the organization this operation belongs to.
	OrganizationID string `json:"OrganizationID,omitempty"`

	// QueuedOperationID is the unique identifier for the queued operation.
	QueuedOperationID string `json:"QueuedOperationID,omitempty"`

	// RevisionNum is the revision number this operation was performed on.
	// example: 42
	RevisionNum int64 `json:"RevisionNum,omitempty"`

	// SpaceID is the unique identifier of the space this operation belongs to.
	SpaceID string `json:"SpaceID,omitempty"`

	// Status indicates the current status of the queued operation.
	Status string `json:"Status,omitempty"`

	// TargetID is the unique identifier of the target this operation is directed to.
	TargetID string `json:"TargetID,omitempty"`

	// UnitID is the unique identifier of the unit this operation is performed on.
	UnitID string `json:"UnitID,omitempty"`

	// Version is used for optimistic concurrency control.
	Version int64 `json:"Version,omitempty"`
}

// Validate validates this models queued operation
func (m *ModelsQueuedOperation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsQueuedOperation) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if err := m.Action.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Action")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Action")
		}
		return err
	}

	return nil
}

// ContextValidate validate this models queued operation based on the context it is used
func (m *ModelsQueuedOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsQueuedOperation) contextValidateAction(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if err := m.Action.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Action")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Action")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsQueuedOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsQueuedOperation) UnmarshalBinary(b []byte) error {
	var res ModelsQueuedOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
