// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsRevisionExtended models revision extended
//
// swagger:model models.RevisionExtended
type ModelsRevisionExtended struct {

	// approved by users
	ApprovedByUsers []string `json:"ApprovedByUsers"`

	// revision
	Revision *ModelsRevision `json:"Revision,omitempty"`

	// username
	Username string `json:"Username,omitempty"`
}

// Validate validates this models revision extended
func (m *ModelsRevisionExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsRevisionExtended) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(m.Revision) { // not required
		return nil
	}

	if m.Revision != nil {
		if err := m.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Revision")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models revision extended based on the context it is used
func (m *ModelsRevisionExtended) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsRevisionExtended) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if m.Revision != nil {

		if swag.IsZero(m.Revision) { // not required
			return nil
		}

		if err := m.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Revision")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsRevisionExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsRevisionExtended) UnmarshalBinary(b []byte) error {
	var res ModelsRevisionExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
