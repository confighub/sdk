// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsTrigger models trigger
//
// swagger:model models.Trigger
type ModelsTrigger struct {

	// annotations
	Annotations map[string]string `json:"Annotations,omitempty"`

	// function arguments
	Arguments []*APIFunctionArgument `json:"Arguments"`

	// CreatedAt is the timestamp when the entity was created in "2023-01-01T12:00:00Z" format.
	// Example: 2025-04-04T11:50:02.95102-07:00
	CreatedAt string `json:"CreatedAt,omitempty"`

	// CursorID is an auto-incrementing sequence number used for pagination.
	CursorID int64 `json:"CursorID,omitempty"`

	// Disabled indicates whether this trigger is currently disabled.
	// When disabled, the trigger will not be executed even when matching events occur.
	// example: false
	Disabled bool `json:"Disabled,omitempty"`

	// not URL-safe
	DisplayName string `json:"DisplayName,omitempty"`

	// Enforced indicates whether this trigger cannot be overridden.
	// Enforced triggers implement mandatory policies that cannot be bypassed.
	// example: true
	Enforced bool `json:"Enforced,omitempty"`

	// event
	Event ModelsTriggerEvent `json:"Event,omitempty"`

	// function name
	FunctionName string `json:"FunctionName,omitempty"`

	// labels
	Labels map[string]string `json:"Labels,omitempty"`

	// Child ID uniqueness is scoped to an organization
	OrganizationID string `json:"OrganizationID,omitempty"`

	// URL-safe; must be unique within the same container hierarchy
	Slug string `json:"Slug,omitempty"`

	// space ID
	SpaceID string `json:"SpaceID,omitempty"`

	// ToolchainType specifies the type of toolchain this trigger works with.
	// This determines which configuration formats the trigger can process.
	// required: true
	// example: "Kubernetes/YAML"
	ToolchainType string `json:"ToolchainType,omitempty"`

	// TriggerID uniquely identifies a trigger within the system
	TriggerID string `json:"TriggerID,omitempty"`

	// UpdatedAt is the timestamp when the entity was last updated in "2023-01-01T12:00:00Z" format.
	// Example: 2025-04-04T11:50:02.95102-07:00
	UpdatedAt string `json:"UpdatedAt,omitempty"`

	// Validating indicates whether this is a validating function (true) or mutating function (false).
	// Validating functions check configuration validity without modifying it.
	// Mutating functions can make changes to the configuration.
	// This value is returned by ConfigHub based on the corresponding property of the specified function.
	// example: true
	Validating bool `json:"Validating,omitempty"`

	// Version is an entity-specific sequence number used for optimistic concurrency control.
	// The value read must be sent in calls to Update.
	Version int64 `json:"Version,omitempty"`
}

// Validate validates this models trigger
func (m *ModelsTrigger) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArguments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsTrigger) validateArguments(formats strfmt.Registry) error {
	if swag.IsZero(m.Arguments) { // not required
		return nil
	}

	for i := 0; i < len(m.Arguments); i++ {
		if swag.IsZero(m.Arguments[i]) { // not required
			continue
		}

		if m.Arguments[i] != nil {
			if err := m.Arguments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Arguments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Arguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsTrigger) validateEvent(formats strfmt.Registry) error {
	if swag.IsZero(m.Event) { // not required
		return nil
	}

	if err := m.Event.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Event")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Event")
		}
		return err
	}

	return nil
}

// ContextValidate validate this models trigger based on the context it is used
func (m *ModelsTrigger) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArguments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsTrigger) contextValidateArguments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Arguments); i++ {

		if m.Arguments[i] != nil {

			if swag.IsZero(m.Arguments[i]) { // not required
				return nil
			}

			if err := m.Arguments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Arguments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Arguments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ModelsTrigger) contextValidateEvent(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Event) { // not required
		return nil
	}

	if err := m.Event.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Event")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Event")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsTrigger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsTrigger) UnmarshalBinary(b []byte) error {
	var res ModelsTrigger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
