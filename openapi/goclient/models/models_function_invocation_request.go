// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsFunctionInvocationRequest models function invocation request
//
// swagger:model models.FunctionInvocationRequest
type ModelsFunctionInvocationRequest struct {

	// CastStringArgsToScalars indicates whether to expect string arguments and cast them to int and bool types as necessary.
	// example: true
	CastStringArgsToScalars bool `json:"CastStringArgsToScalars,omitempty"`

	// CombineResults indicates whether to combine the Outputs of all functions in the FunctionInvocations list. In the case of ValidationResult, the Passed results are ANDed together and a single ValidationResult is returned instead of a ValidationResultList. In the case of AttributeValueList and ResourceInfoList, the lists are concatenated. All output-generating functions must return the same OutputType, or only the first OutputType will be returned.
	CombineResults bool `json:"CombineResults,omitempty"`

	// FunctionInvocations is a list of functions and their arguments to execute in the specified order.
	FunctionInvocations []*APIFunctionInvocation `json:"FunctionInvocations"`

	// NumFilters is the number of validating functions from the FunctionInvocations to treat as filters for the remaining functions in the list. In the case that the validation function does not pass, stop and don't execute the remaining functions, but don't report an error.
	NumFilters int64 `json:"NumFilters,omitempty"`

	// StopOnError indicates whether to stop executing functions from the FunctionInvocations list on the first error, or to execute all of the functions and return all of the errors.
	StopOnError bool `json:"StopOnError,omitempty"`
}

// Validate validates this models function invocation request
func (m *ModelsFunctionInvocationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFunctionInvocations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsFunctionInvocationRequest) validateFunctionInvocations(formats strfmt.Registry) error {
	if swag.IsZero(m.FunctionInvocations) { // not required
		return nil
	}

	for i := 0; i < len(m.FunctionInvocations); i++ {
		if swag.IsZero(m.FunctionInvocations[i]) { // not required
			continue
		}

		if m.FunctionInvocations[i] != nil {
			if err := m.FunctionInvocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FunctionInvocations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("FunctionInvocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this models function invocation request based on the context it is used
func (m *ModelsFunctionInvocationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFunctionInvocations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsFunctionInvocationRequest) contextValidateFunctionInvocations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FunctionInvocations); i++ {

		if m.FunctionInvocations[i] != nil {

			if swag.IsZero(m.FunctionInvocations[i]) { // not required
				return nil
			}

			if err := m.FunctionInvocations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FunctionInvocations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("FunctionInvocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsFunctionInvocationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsFunctionInvocationRequest) UnmarshalBinary(b []byte) error {
	var res ModelsFunctionInvocationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
