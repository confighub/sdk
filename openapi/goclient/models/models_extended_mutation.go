// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsExtendedMutation models extended mutation
//
// swagger:model models.ExtendedMutation
type ModelsExtendedMutation struct {

	// link
	Link *ModelsLink `json:"Link,omitempty"`

	// mutation
	Mutation *ModelsMutation `json:"Mutation,omitempty"`

	// organization
	Organization *ModelsOrganization `json:"Organization,omitempty"`

	// revision
	Revision *ModelsRevision `json:"Revision,omitempty"`

	// space
	Space *ModelsSpace `json:"Space,omitempty"`

	// trigger
	Trigger *ModelsTrigger `json:"Trigger,omitempty"`

	// unit
	Unit *ModelsUnit `json:"Unit,omitempty"`
}

// Validate validates this models extended mutation
func (m *ModelsExtendedMutation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMutation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsExtendedMutation) validateLink(formats strfmt.Registry) error {
	if swag.IsZero(m.Link) { // not required
		return nil
	}

	if m.Link != nil {
		if err := m.Link.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Link")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Link")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedMutation) validateMutation(formats strfmt.Registry) error {
	if swag.IsZero(m.Mutation) { // not required
		return nil
	}

	if m.Mutation != nil {
		if err := m.Mutation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Mutation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Mutation")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedMutation) validateOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedMutation) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(m.Revision) { // not required
		return nil
	}

	if m.Revision != nil {
		if err := m.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Revision")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedMutation) validateSpace(formats strfmt.Registry) error {
	if swag.IsZero(m.Space) { // not required
		return nil
	}

	if m.Space != nil {
		if err := m.Space.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Space")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Space")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedMutation) validateTrigger(formats strfmt.Registry) error {
	if swag.IsZero(m.Trigger) { // not required
		return nil
	}

	if m.Trigger != nil {
		if err := m.Trigger.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Trigger")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedMutation) validateUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.Unit) { // not required
		return nil
	}

	if m.Unit != nil {
		if err := m.Unit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Unit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this models extended mutation based on the context it is used
func (m *ModelsExtendedMutation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLink(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMutation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrigger(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsExtendedMutation) contextValidateLink(ctx context.Context, formats strfmt.Registry) error {

	if m.Link != nil {

		if swag.IsZero(m.Link) { // not required
			return nil
		}

		if err := m.Link.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Link")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Link")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedMutation) contextValidateMutation(ctx context.Context, formats strfmt.Registry) error {

	if m.Mutation != nil {

		if swag.IsZero(m.Mutation) { // not required
			return nil
		}

		if err := m.Mutation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Mutation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Mutation")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedMutation) contextValidateOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.Organization != nil {

		if swag.IsZero(m.Organization) { // not required
			return nil
		}

		if err := m.Organization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedMutation) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if m.Revision != nil {

		if swag.IsZero(m.Revision) { // not required
			return nil
		}

		if err := m.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Revision")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedMutation) contextValidateSpace(ctx context.Context, formats strfmt.Registry) error {

	if m.Space != nil {

		if swag.IsZero(m.Space) { // not required
			return nil
		}

		if err := m.Space.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Space")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Space")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedMutation) contextValidateTrigger(ctx context.Context, formats strfmt.Registry) error {

	if m.Trigger != nil {

		if swag.IsZero(m.Trigger) { // not required
			return nil
		}

		if err := m.Trigger.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Trigger")
			}
			return err
		}
	}

	return nil
}

func (m *ModelsExtendedMutation) contextValidateUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.Unit != nil {

		if swag.IsZero(m.Unit) { // not required
			return nil
		}

		if err := m.Unit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Unit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsExtendedMutation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsExtendedMutation) UnmarshalBinary(b []byte) error {
	var res ModelsExtendedMutation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
