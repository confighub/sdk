// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIFunctionInvocationResponse api function invocation response
//
// swagger:model api.FunctionInvocationResponse
type APIFunctionInvocationResponse struct {

	// the mutated config data
	// Format: byte
	ConfigData strfmt.Base64 `json:"ConfigData,omitempty"`

	// will be empty if Success is true
	ErrorMessages []string `json:"ErrorMessages"`

	// list of mutations in the same order as the resources in ConfigData
	Mutations []*APIResourceMutation `json:"Mutations"`

	// list of function invocation indices that resulted in mutations
	Mutators []int64 `json:"Mutators"`

	// output other than config data, as embedded JSON
	// Format: byte
	Output strfmt.Base64 `json:"Output,omitempty"`

	// type of structured function output, if any
	OutputType string `json:"OutputType,omitempty"`

	// for correlation in bulk execution
	RevisionID string `json:"RevisionID,omitempty"`

	// for correlation in bulk execution
	SpaceID string `json:"SpaceID,omitempty"`

	// true if all functions executed successfully
	Success bool `json:"Success,omitempty"`

	// for correlation in bulk execution
	UnitID string `json:"UnitID,omitempty"`
}

// Validate validates this api function invocation response
func (m *APIFunctionInvocationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMutations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIFunctionInvocationResponse) validateMutations(formats strfmt.Registry) error {
	if swag.IsZero(m.Mutations) { // not required
		return nil
	}

	for i := 0; i < len(m.Mutations); i++ {
		if swag.IsZero(m.Mutations[i]) { // not required
			continue
		}

		if m.Mutations[i] != nil {
			if err := m.Mutations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Mutations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Mutations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this api function invocation response based on the context it is used
func (m *APIFunctionInvocationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMutations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIFunctionInvocationResponse) contextValidateMutations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Mutations); i++ {

		if m.Mutations[i] != nil {

			if swag.IsZero(m.Mutations[i]) { // not required
				return nil
			}

			if err := m.Mutations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Mutations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Mutations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIFunctionInvocationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIFunctionInvocationResponse) UnmarshalBinary(b []byte) error {
	var res APIFunctionInvocationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
