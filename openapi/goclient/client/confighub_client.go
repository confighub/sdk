// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/client/bridge_worker"
	"github.com/confighub/sdk/openapi/goclient/client/function"
	"github.com/confighub/sdk/openapi/goclient/client/link"
	"github.com/confighub/sdk/openapi/goclient/client/meta"
	"github.com/confighub/sdk/openapi/goclient/client/mutation"
	"github.com/confighub/sdk/openapi/goclient/client/organization"
	"github.com/confighub/sdk/openapi/goclient/client/revision"
	"github.com/confighub/sdk/openapi/goclient/client/set"
	"github.com/confighub/sdk/openapi/goclient/client/space"
	"github.com/confighub/sdk/openapi/goclient/client/target"
	"github.com/confighub/sdk/openapi/goclient/client/trigger"
	"github.com/confighub/sdk/openapi/goclient/client/unit"
	"github.com/confighub/sdk/openapi/goclient/client/unit_event"
	"github.com/confighub/sdk/openapi/goclient/client/user"
)

// Default confighub HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "hub.confighub.com"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new confighub HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Confighub {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new confighub HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Confighub {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new confighub client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Confighub {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Confighub)
	cli.Transport = transport
	cli.BridgeWorker = bridge_worker.New(transport, formats)
	cli.Function = function.New(transport, formats)
	cli.Link = link.New(transport, formats)
	cli.Meta = meta.New(transport, formats)
	cli.Mutation = mutation.New(transport, formats)
	cli.Organization = organization.New(transport, formats)
	cli.Revision = revision.New(transport, formats)
	cli.Set = set.New(transport, formats)
	cli.Space = space.New(transport, formats)
	cli.Target = target.New(transport, formats)
	cli.Trigger = trigger.New(transport, formats)
	cli.Unit = unit.New(transport, formats)
	cli.UnitEvent = unit_event.New(transport, formats)
	cli.User = user.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Confighub is a client for confighub
type Confighub struct {
	BridgeWorker bridge_worker.ClientService

	Function function.ClientService

	Link link.ClientService

	Meta meta.ClientService

	Mutation mutation.ClientService

	Organization organization.ClientService

	Revision revision.ClientService

	Set set.ClientService

	Space space.ClientService

	Target target.ClientService

	Trigger trigger.ClientService

	Unit unit.ClientService

	UnitEvent unit_event.ClientService

	User user.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Confighub) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.BridgeWorker.SetTransport(transport)
	c.Function.SetTransport(transport)
	c.Link.SetTransport(transport)
	c.Meta.SetTransport(transport)
	c.Mutation.SetTransport(transport)
	c.Organization.SetTransport(transport)
	c.Revision.SetTransport(transport)
	c.Set.SetTransport(transport)
	c.Space.SetTransport(transport)
	c.Target.SetTransport(transport)
	c.Trigger.SetTransport(transport)
	c.Unit.SetTransport(transport)
	c.UnitEvent.SetTransport(transport)
	c.User.SetTransport(transport)
}
