// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package revision

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// GetRevisionReader is a Reader for the GetRevision structure.
type GetRevisionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRevisionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRevisionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRevisionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRevisionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRevisionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRevisionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRevisionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}] GetRevision", response, response.Code())
	}
}

// NewGetRevisionOK creates a GetRevisionOK with default headers values
func NewGetRevisionOK() *GetRevisionOK {
	return &GetRevisionOK{}
}

/*
GetRevisionOK describes a response with status code 200, with default header values.

OK
*/
type GetRevisionOK struct {
	Payload *models.ModelsExtendedRevision
}

// IsSuccess returns true when this get revision o k response has a 2xx status code
func (o *GetRevisionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get revision o k response has a 3xx status code
func (o *GetRevisionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get revision o k response has a 4xx status code
func (o *GetRevisionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get revision o k response has a 5xx status code
func (o *GetRevisionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get revision o k response a status code equal to that given
func (o *GetRevisionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get revision o k response
func (o *GetRevisionOK) Code() int {
	return 200
}

func (o *GetRevisionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}][%d] getRevisionOK %s", 200, payload)
}

func (o *GetRevisionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}][%d] getRevisionOK %s", 200, payload)
}

func (o *GetRevisionOK) GetPayload() *models.ModelsExtendedRevision {
	return o.Payload
}

func (o *GetRevisionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsExtendedRevision)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevisionBadRequest creates a GetRevisionBadRequest with default headers values
func NewGetRevisionBadRequest() *GetRevisionBadRequest {
	return &GetRevisionBadRequest{}
}

/*
GetRevisionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRevisionBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get revision bad request response has a 2xx status code
func (o *GetRevisionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get revision bad request response has a 3xx status code
func (o *GetRevisionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get revision bad request response has a 4xx status code
func (o *GetRevisionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get revision bad request response has a 5xx status code
func (o *GetRevisionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get revision bad request response a status code equal to that given
func (o *GetRevisionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get revision bad request response
func (o *GetRevisionBadRequest) Code() int {
	return 400
}

func (o *GetRevisionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}][%d] getRevisionBadRequest %s", 400, payload)
}

func (o *GetRevisionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}][%d] getRevisionBadRequest %s", 400, payload)
}

func (o *GetRevisionBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetRevisionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevisionUnauthorized creates a GetRevisionUnauthorized with default headers values
func NewGetRevisionUnauthorized() *GetRevisionUnauthorized {
	return &GetRevisionUnauthorized{}
}

/*
GetRevisionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRevisionUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get revision unauthorized response has a 2xx status code
func (o *GetRevisionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get revision unauthorized response has a 3xx status code
func (o *GetRevisionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get revision unauthorized response has a 4xx status code
func (o *GetRevisionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get revision unauthorized response has a 5xx status code
func (o *GetRevisionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get revision unauthorized response a status code equal to that given
func (o *GetRevisionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get revision unauthorized response
func (o *GetRevisionUnauthorized) Code() int {
	return 401
}

func (o *GetRevisionUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}][%d] getRevisionUnauthorized %s", 401, payload)
}

func (o *GetRevisionUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}][%d] getRevisionUnauthorized %s", 401, payload)
}

func (o *GetRevisionUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetRevisionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevisionForbidden creates a GetRevisionForbidden with default headers values
func NewGetRevisionForbidden() *GetRevisionForbidden {
	return &GetRevisionForbidden{}
}

/*
GetRevisionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRevisionForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get revision forbidden response has a 2xx status code
func (o *GetRevisionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get revision forbidden response has a 3xx status code
func (o *GetRevisionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get revision forbidden response has a 4xx status code
func (o *GetRevisionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get revision forbidden response has a 5xx status code
func (o *GetRevisionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get revision forbidden response a status code equal to that given
func (o *GetRevisionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get revision forbidden response
func (o *GetRevisionForbidden) Code() int {
	return 403
}

func (o *GetRevisionForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}][%d] getRevisionForbidden %s", 403, payload)
}

func (o *GetRevisionForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}][%d] getRevisionForbidden %s", 403, payload)
}

func (o *GetRevisionForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetRevisionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevisionNotFound creates a GetRevisionNotFound with default headers values
func NewGetRevisionNotFound() *GetRevisionNotFound {
	return &GetRevisionNotFound{}
}

/*
GetRevisionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetRevisionNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get revision not found response has a 2xx status code
func (o *GetRevisionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get revision not found response has a 3xx status code
func (o *GetRevisionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get revision not found response has a 4xx status code
func (o *GetRevisionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get revision not found response has a 5xx status code
func (o *GetRevisionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get revision not found response a status code equal to that given
func (o *GetRevisionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get revision not found response
func (o *GetRevisionNotFound) Code() int {
	return 404
}

func (o *GetRevisionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}][%d] getRevisionNotFound %s", 404, payload)
}

func (o *GetRevisionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}][%d] getRevisionNotFound %s", 404, payload)
}

func (o *GetRevisionNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetRevisionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevisionInternalServerError creates a GetRevisionInternalServerError with default headers values
func NewGetRevisionInternalServerError() *GetRevisionInternalServerError {
	return &GetRevisionInternalServerError{}
}

/*
GetRevisionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetRevisionInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get revision internal server error response has a 2xx status code
func (o *GetRevisionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get revision internal server error response has a 3xx status code
func (o *GetRevisionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get revision internal server error response has a 4xx status code
func (o *GetRevisionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get revision internal server error response has a 5xx status code
func (o *GetRevisionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get revision internal server error response a status code equal to that given
func (o *GetRevisionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get revision internal server error response
func (o *GetRevisionInternalServerError) Code() int {
	return 500
}

func (o *GetRevisionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}][%d] getRevisionInternalServerError %s", 500, payload)
}

func (o *GetRevisionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}][%d] getRevisionInternalServerError %s", 500, payload)
}

func (o *GetRevisionInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetRevisionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
