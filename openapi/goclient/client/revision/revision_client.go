// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package revision

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new revision API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new revision API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new revision API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for revision API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationOctetStream sets the Accept header to "application/octet-stream".
func WithAcceptApplicationOctetStream(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/octet-stream"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DownloadRevision(params *DownloadRevisionParams, opts ...ClientOption) (*DownloadRevisionOK, error)

	GetRevision(params *GetRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRevisionOK, error)

	GetRevisionExtended(params *GetRevisionExtendedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRevisionExtendedOK, error)

	ListRevisions(params *ListRevisionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRevisionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DownloadRevision downloads a revision

Download the data for a revision
*/
func (a *Client) DownloadRevision(params *DownloadRevisionParams, opts ...ClientOption) (*DownloadRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DownloadRevision",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/unit/{unit_id}/revision/{revision_id}/data",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadRevisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DownloadRevision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRevision gets retrieves a revision

Get retrieves a Revision in the space for the Unit
*/
func (a *Client) GetRevision(params *GetRevisionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRevisionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRevision",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/unit/{unit_id}/revision/{revision_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRevision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRevisionExtended gets extended retrieves extended information about a revision

GetExtended retrieves extended information about a revision for the unit
*/
func (a *Client) GetRevisionExtended(params *GetRevisionExtendedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRevisionExtendedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRevisionExtendedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRevisionExtended",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRevisionExtendedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRevisionExtendedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRevisionExtended: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRevisions lists retrieves a list of revisions

List retrieves a list of Revisions for the Unit
*/
func (a *Client) ListRevisions(params *ListRevisionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRevisionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRevisionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListRevisions",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/unit/{unit_id}/revision",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRevisionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRevisionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListRevisions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
