// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package revision

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// GetRevisionExtendedReader is a Reader for the GetRevisionExtended structure.
type GetRevisionExtendedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRevisionExtendedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRevisionExtendedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRevisionExtendedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRevisionExtendedUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRevisionExtendedForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRevisionExtendedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRevisionExtendedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended] GetRevisionExtended", response, response.Code())
	}
}

// NewGetRevisionExtendedOK creates a GetRevisionExtendedOK with default headers values
func NewGetRevisionExtendedOK() *GetRevisionExtendedOK {
	return &GetRevisionExtendedOK{}
}

/*
GetRevisionExtendedOK describes a response with status code 200, with default header values.

OK
*/
type GetRevisionExtendedOK struct {
	Payload *models.ModelsRevisionExtended
}

// IsSuccess returns true when this get revision extended o k response has a 2xx status code
func (o *GetRevisionExtendedOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get revision extended o k response has a 3xx status code
func (o *GetRevisionExtendedOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get revision extended o k response has a 4xx status code
func (o *GetRevisionExtendedOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get revision extended o k response has a 5xx status code
func (o *GetRevisionExtendedOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get revision extended o k response a status code equal to that given
func (o *GetRevisionExtendedOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get revision extended o k response
func (o *GetRevisionExtendedOK) Code() int {
	return 200
}

func (o *GetRevisionExtendedOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended][%d] getRevisionExtendedOK %s", 200, payload)
}

func (o *GetRevisionExtendedOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended][%d] getRevisionExtendedOK %s", 200, payload)
}

func (o *GetRevisionExtendedOK) GetPayload() *models.ModelsRevisionExtended {
	return o.Payload
}

func (o *GetRevisionExtendedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsRevisionExtended)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevisionExtendedBadRequest creates a GetRevisionExtendedBadRequest with default headers values
func NewGetRevisionExtendedBadRequest() *GetRevisionExtendedBadRequest {
	return &GetRevisionExtendedBadRequest{}
}

/*
GetRevisionExtendedBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRevisionExtendedBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get revision extended bad request response has a 2xx status code
func (o *GetRevisionExtendedBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get revision extended bad request response has a 3xx status code
func (o *GetRevisionExtendedBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get revision extended bad request response has a 4xx status code
func (o *GetRevisionExtendedBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get revision extended bad request response has a 5xx status code
func (o *GetRevisionExtendedBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get revision extended bad request response a status code equal to that given
func (o *GetRevisionExtendedBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get revision extended bad request response
func (o *GetRevisionExtendedBadRequest) Code() int {
	return 400
}

func (o *GetRevisionExtendedBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended][%d] getRevisionExtendedBadRequest %s", 400, payload)
}

func (o *GetRevisionExtendedBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended][%d] getRevisionExtendedBadRequest %s", 400, payload)
}

func (o *GetRevisionExtendedBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetRevisionExtendedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevisionExtendedUnauthorized creates a GetRevisionExtendedUnauthorized with default headers values
func NewGetRevisionExtendedUnauthorized() *GetRevisionExtendedUnauthorized {
	return &GetRevisionExtendedUnauthorized{}
}

/*
GetRevisionExtendedUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRevisionExtendedUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get revision extended unauthorized response has a 2xx status code
func (o *GetRevisionExtendedUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get revision extended unauthorized response has a 3xx status code
func (o *GetRevisionExtendedUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get revision extended unauthorized response has a 4xx status code
func (o *GetRevisionExtendedUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get revision extended unauthorized response has a 5xx status code
func (o *GetRevisionExtendedUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get revision extended unauthorized response a status code equal to that given
func (o *GetRevisionExtendedUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get revision extended unauthorized response
func (o *GetRevisionExtendedUnauthorized) Code() int {
	return 401
}

func (o *GetRevisionExtendedUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended][%d] getRevisionExtendedUnauthorized %s", 401, payload)
}

func (o *GetRevisionExtendedUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended][%d] getRevisionExtendedUnauthorized %s", 401, payload)
}

func (o *GetRevisionExtendedUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetRevisionExtendedUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevisionExtendedForbidden creates a GetRevisionExtendedForbidden with default headers values
func NewGetRevisionExtendedForbidden() *GetRevisionExtendedForbidden {
	return &GetRevisionExtendedForbidden{}
}

/*
GetRevisionExtendedForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRevisionExtendedForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get revision extended forbidden response has a 2xx status code
func (o *GetRevisionExtendedForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get revision extended forbidden response has a 3xx status code
func (o *GetRevisionExtendedForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get revision extended forbidden response has a 4xx status code
func (o *GetRevisionExtendedForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get revision extended forbidden response has a 5xx status code
func (o *GetRevisionExtendedForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get revision extended forbidden response a status code equal to that given
func (o *GetRevisionExtendedForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get revision extended forbidden response
func (o *GetRevisionExtendedForbidden) Code() int {
	return 403
}

func (o *GetRevisionExtendedForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended][%d] getRevisionExtendedForbidden %s", 403, payload)
}

func (o *GetRevisionExtendedForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended][%d] getRevisionExtendedForbidden %s", 403, payload)
}

func (o *GetRevisionExtendedForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetRevisionExtendedForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevisionExtendedNotFound creates a GetRevisionExtendedNotFound with default headers values
func NewGetRevisionExtendedNotFound() *GetRevisionExtendedNotFound {
	return &GetRevisionExtendedNotFound{}
}

/*
GetRevisionExtendedNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetRevisionExtendedNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get revision extended not found response has a 2xx status code
func (o *GetRevisionExtendedNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get revision extended not found response has a 3xx status code
func (o *GetRevisionExtendedNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get revision extended not found response has a 4xx status code
func (o *GetRevisionExtendedNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get revision extended not found response has a 5xx status code
func (o *GetRevisionExtendedNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get revision extended not found response a status code equal to that given
func (o *GetRevisionExtendedNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get revision extended not found response
func (o *GetRevisionExtendedNotFound) Code() int {
	return 404
}

func (o *GetRevisionExtendedNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended][%d] getRevisionExtendedNotFound %s", 404, payload)
}

func (o *GetRevisionExtendedNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended][%d] getRevisionExtendedNotFound %s", 404, payload)
}

func (o *GetRevisionExtendedNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetRevisionExtendedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevisionExtendedInternalServerError creates a GetRevisionExtendedInternalServerError with default headers values
func NewGetRevisionExtendedInternalServerError() *GetRevisionExtendedInternalServerError {
	return &GetRevisionExtendedInternalServerError{}
}

/*
GetRevisionExtendedInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetRevisionExtendedInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get revision extended internal server error response has a 2xx status code
func (o *GetRevisionExtendedInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get revision extended internal server error response has a 3xx status code
func (o *GetRevisionExtendedInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get revision extended internal server error response has a 4xx status code
func (o *GetRevisionExtendedInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get revision extended internal server error response has a 5xx status code
func (o *GetRevisionExtendedInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get revision extended internal server error response a status code equal to that given
func (o *GetRevisionExtendedInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get revision extended internal server error response
func (o *GetRevisionExtendedInternalServerError) Code() int {
	return 500
}

func (o *GetRevisionExtendedInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended][%d] getRevisionExtendedInternalServerError %s", 500, payload)
}

func (o *GetRevisionExtendedInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/extended][%d] getRevisionExtendedInternalServerError %s", 500, payload)
}

func (o *GetRevisionExtendedInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetRevisionExtendedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
