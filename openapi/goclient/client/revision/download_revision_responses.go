// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package revision

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// DownloadRevisionReader is a Reader for the DownloadRevision structure.
type DownloadRevisionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadRevisionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadRevisionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDownloadRevisionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDownloadRevisionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDownloadRevisionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadRevisionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDownloadRevisionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/data] DownloadRevision", response, response.Code())
	}
}

// NewDownloadRevisionOK creates a DownloadRevisionOK with default headers values
func NewDownloadRevisionOK() *DownloadRevisionOK {
	return &DownloadRevisionOK{}
}

/*
DownloadRevisionOK describes a response with status code 200, with default header values.

Data
*/
type DownloadRevisionOK struct {
	Payload string
}

// IsSuccess returns true when this download revision o k response has a 2xx status code
func (o *DownloadRevisionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download revision o k response has a 3xx status code
func (o *DownloadRevisionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download revision o k response has a 4xx status code
func (o *DownloadRevisionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download revision o k response has a 5xx status code
func (o *DownloadRevisionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download revision o k response a status code equal to that given
func (o *DownloadRevisionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download revision o k response
func (o *DownloadRevisionOK) Code() int {
	return 200
}

func (o *DownloadRevisionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/data][%d] downloadRevisionOK %s", 200, payload)
}

func (o *DownloadRevisionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/data][%d] downloadRevisionOK %s", 200, payload)
}

func (o *DownloadRevisionOK) GetPayload() string {
	return o.Payload
}

func (o *DownloadRevisionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadRevisionBadRequest creates a DownloadRevisionBadRequest with default headers values
func NewDownloadRevisionBadRequest() *DownloadRevisionBadRequest {
	return &DownloadRevisionBadRequest{}
}

/*
DownloadRevisionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DownloadRevisionBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this download revision bad request response has a 2xx status code
func (o *DownloadRevisionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download revision bad request response has a 3xx status code
func (o *DownloadRevisionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download revision bad request response has a 4xx status code
func (o *DownloadRevisionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this download revision bad request response has a 5xx status code
func (o *DownloadRevisionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this download revision bad request response a status code equal to that given
func (o *DownloadRevisionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the download revision bad request response
func (o *DownloadRevisionBadRequest) Code() int {
	return 400
}

func (o *DownloadRevisionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/data][%d] downloadRevisionBadRequest %s", 400, payload)
}

func (o *DownloadRevisionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/data][%d] downloadRevisionBadRequest %s", 400, payload)
}

func (o *DownloadRevisionBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DownloadRevisionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadRevisionUnauthorized creates a DownloadRevisionUnauthorized with default headers values
func NewDownloadRevisionUnauthorized() *DownloadRevisionUnauthorized {
	return &DownloadRevisionUnauthorized{}
}

/*
DownloadRevisionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DownloadRevisionUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this download revision unauthorized response has a 2xx status code
func (o *DownloadRevisionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download revision unauthorized response has a 3xx status code
func (o *DownloadRevisionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download revision unauthorized response has a 4xx status code
func (o *DownloadRevisionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this download revision unauthorized response has a 5xx status code
func (o *DownloadRevisionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this download revision unauthorized response a status code equal to that given
func (o *DownloadRevisionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the download revision unauthorized response
func (o *DownloadRevisionUnauthorized) Code() int {
	return 401
}

func (o *DownloadRevisionUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/data][%d] downloadRevisionUnauthorized %s", 401, payload)
}

func (o *DownloadRevisionUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/data][%d] downloadRevisionUnauthorized %s", 401, payload)
}

func (o *DownloadRevisionUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DownloadRevisionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadRevisionForbidden creates a DownloadRevisionForbidden with default headers values
func NewDownloadRevisionForbidden() *DownloadRevisionForbidden {
	return &DownloadRevisionForbidden{}
}

/*
DownloadRevisionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DownloadRevisionForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this download revision forbidden response has a 2xx status code
func (o *DownloadRevisionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download revision forbidden response has a 3xx status code
func (o *DownloadRevisionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download revision forbidden response has a 4xx status code
func (o *DownloadRevisionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this download revision forbidden response has a 5xx status code
func (o *DownloadRevisionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this download revision forbidden response a status code equal to that given
func (o *DownloadRevisionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the download revision forbidden response
func (o *DownloadRevisionForbidden) Code() int {
	return 403
}

func (o *DownloadRevisionForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/data][%d] downloadRevisionForbidden %s", 403, payload)
}

func (o *DownloadRevisionForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/data][%d] downloadRevisionForbidden %s", 403, payload)
}

func (o *DownloadRevisionForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DownloadRevisionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadRevisionNotFound creates a DownloadRevisionNotFound with default headers values
func NewDownloadRevisionNotFound() *DownloadRevisionNotFound {
	return &DownloadRevisionNotFound{}
}

/*
DownloadRevisionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DownloadRevisionNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this download revision not found response has a 2xx status code
func (o *DownloadRevisionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download revision not found response has a 3xx status code
func (o *DownloadRevisionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download revision not found response has a 4xx status code
func (o *DownloadRevisionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this download revision not found response has a 5xx status code
func (o *DownloadRevisionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this download revision not found response a status code equal to that given
func (o *DownloadRevisionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the download revision not found response
func (o *DownloadRevisionNotFound) Code() int {
	return 404
}

func (o *DownloadRevisionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/data][%d] downloadRevisionNotFound %s", 404, payload)
}

func (o *DownloadRevisionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/data][%d] downloadRevisionNotFound %s", 404, payload)
}

func (o *DownloadRevisionNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DownloadRevisionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadRevisionInternalServerError creates a DownloadRevisionInternalServerError with default headers values
func NewDownloadRevisionInternalServerError() *DownloadRevisionInternalServerError {
	return &DownloadRevisionInternalServerError{}
}

/*
DownloadRevisionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DownloadRevisionInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this download revision internal server error response has a 2xx status code
func (o *DownloadRevisionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download revision internal server error response has a 3xx status code
func (o *DownloadRevisionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download revision internal server error response has a 4xx status code
func (o *DownloadRevisionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this download revision internal server error response has a 5xx status code
func (o *DownloadRevisionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this download revision internal server error response a status code equal to that given
func (o *DownloadRevisionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the download revision internal server error response
func (o *DownloadRevisionInternalServerError) Code() int {
	return 500
}

func (o *DownloadRevisionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/data][%d] downloadRevisionInternalServerError %s", 500, payload)
}

func (o *DownloadRevisionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/unit/{unit_id}/revision/{revision_id}/data][%d] downloadRevisionInternalServerError %s", 500, payload)
}

func (o *DownloadRevisionInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DownloadRevisionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
