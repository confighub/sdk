// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package trigger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// GetTriggerReader is a Reader for the GetTrigger structure.
type GetTriggerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTriggerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTriggerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTriggerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTriggerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTriggerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTriggerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTriggerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /space/{space_id}/trigger/{trigger_id}] GetTrigger", response, response.Code())
	}
}

// NewGetTriggerOK creates a GetTriggerOK with default headers values
func NewGetTriggerOK() *GetTriggerOK {
	return &GetTriggerOK{}
}

/*
GetTriggerOK describes a response with status code 200, with default header values.

OK
*/
type GetTriggerOK struct {
	Payload *models.ModelsTrigger
}

// IsSuccess returns true when this get trigger o k response has a 2xx status code
func (o *GetTriggerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get trigger o k response has a 3xx status code
func (o *GetTriggerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get trigger o k response has a 4xx status code
func (o *GetTriggerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get trigger o k response has a 5xx status code
func (o *GetTriggerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get trigger o k response a status code equal to that given
func (o *GetTriggerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get trigger o k response
func (o *GetTriggerOK) Code() int {
	return 200
}

func (o *GetTriggerOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}][%d] getTriggerOK %s", 200, payload)
}

func (o *GetTriggerOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}][%d] getTriggerOK %s", 200, payload)
}

func (o *GetTriggerOK) GetPayload() *models.ModelsTrigger {
	return o.Payload
}

func (o *GetTriggerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsTrigger)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTriggerBadRequest creates a GetTriggerBadRequest with default headers values
func NewGetTriggerBadRequest() *GetTriggerBadRequest {
	return &GetTriggerBadRequest{}
}

/*
GetTriggerBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetTriggerBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get trigger bad request response has a 2xx status code
func (o *GetTriggerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get trigger bad request response has a 3xx status code
func (o *GetTriggerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get trigger bad request response has a 4xx status code
func (o *GetTriggerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get trigger bad request response has a 5xx status code
func (o *GetTriggerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get trigger bad request response a status code equal to that given
func (o *GetTriggerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get trigger bad request response
func (o *GetTriggerBadRequest) Code() int {
	return 400
}

func (o *GetTriggerBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}][%d] getTriggerBadRequest %s", 400, payload)
}

func (o *GetTriggerBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}][%d] getTriggerBadRequest %s", 400, payload)
}

func (o *GetTriggerBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTriggerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTriggerUnauthorized creates a GetTriggerUnauthorized with default headers values
func NewGetTriggerUnauthorized() *GetTriggerUnauthorized {
	return &GetTriggerUnauthorized{}
}

/*
GetTriggerUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTriggerUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get trigger unauthorized response has a 2xx status code
func (o *GetTriggerUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get trigger unauthorized response has a 3xx status code
func (o *GetTriggerUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get trigger unauthorized response has a 4xx status code
func (o *GetTriggerUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get trigger unauthorized response has a 5xx status code
func (o *GetTriggerUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get trigger unauthorized response a status code equal to that given
func (o *GetTriggerUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get trigger unauthorized response
func (o *GetTriggerUnauthorized) Code() int {
	return 401
}

func (o *GetTriggerUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}][%d] getTriggerUnauthorized %s", 401, payload)
}

func (o *GetTriggerUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}][%d] getTriggerUnauthorized %s", 401, payload)
}

func (o *GetTriggerUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTriggerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTriggerForbidden creates a GetTriggerForbidden with default headers values
func NewGetTriggerForbidden() *GetTriggerForbidden {
	return &GetTriggerForbidden{}
}

/*
GetTriggerForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetTriggerForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get trigger forbidden response has a 2xx status code
func (o *GetTriggerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get trigger forbidden response has a 3xx status code
func (o *GetTriggerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get trigger forbidden response has a 4xx status code
func (o *GetTriggerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get trigger forbidden response has a 5xx status code
func (o *GetTriggerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get trigger forbidden response a status code equal to that given
func (o *GetTriggerForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get trigger forbidden response
func (o *GetTriggerForbidden) Code() int {
	return 403
}

func (o *GetTriggerForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}][%d] getTriggerForbidden %s", 403, payload)
}

func (o *GetTriggerForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}][%d] getTriggerForbidden %s", 403, payload)
}

func (o *GetTriggerForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTriggerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTriggerNotFound creates a GetTriggerNotFound with default headers values
func NewGetTriggerNotFound() *GetTriggerNotFound {
	return &GetTriggerNotFound{}
}

/*
GetTriggerNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetTriggerNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get trigger not found response has a 2xx status code
func (o *GetTriggerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get trigger not found response has a 3xx status code
func (o *GetTriggerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get trigger not found response has a 4xx status code
func (o *GetTriggerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get trigger not found response has a 5xx status code
func (o *GetTriggerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get trigger not found response a status code equal to that given
func (o *GetTriggerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get trigger not found response
func (o *GetTriggerNotFound) Code() int {
	return 404
}

func (o *GetTriggerNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}][%d] getTriggerNotFound %s", 404, payload)
}

func (o *GetTriggerNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}][%d] getTriggerNotFound %s", 404, payload)
}

func (o *GetTriggerNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTriggerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTriggerInternalServerError creates a GetTriggerInternalServerError with default headers values
func NewGetTriggerInternalServerError() *GetTriggerInternalServerError {
	return &GetTriggerInternalServerError{}
}

/*
GetTriggerInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetTriggerInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get trigger internal server error response has a 2xx status code
func (o *GetTriggerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get trigger internal server error response has a 3xx status code
func (o *GetTriggerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get trigger internal server error response has a 4xx status code
func (o *GetTriggerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get trigger internal server error response has a 5xx status code
func (o *GetTriggerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get trigger internal server error response a status code equal to that given
func (o *GetTriggerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get trigger internal server error response
func (o *GetTriggerInternalServerError) Code() int {
	return 500
}

func (o *GetTriggerInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}][%d] getTriggerInternalServerError %s", 500, payload)
}

func (o *GetTriggerInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}][%d] getTriggerInternalServerError %s", 500, payload)
}

func (o *GetTriggerInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTriggerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
