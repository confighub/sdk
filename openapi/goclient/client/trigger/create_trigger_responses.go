// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package trigger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// CreateTriggerReader is a Reader for the CreateTrigger structure.
type CreateTriggerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateTriggerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateTriggerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateTriggerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateTriggerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateTriggerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateTriggerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /space/{space_id}/trigger] CreateTrigger", response, response.Code())
	}
}

// NewCreateTriggerOK creates a CreateTriggerOK with default headers values
func NewCreateTriggerOK() *CreateTriggerOK {
	return &CreateTriggerOK{}
}

/*
CreateTriggerOK describes a response with status code 200, with default header values.

OK
*/
type CreateTriggerOK struct {
	Payload *models.ModelsTrigger
}

// IsSuccess returns true when this create trigger o k response has a 2xx status code
func (o *CreateTriggerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create trigger o k response has a 3xx status code
func (o *CreateTriggerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create trigger o k response has a 4xx status code
func (o *CreateTriggerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create trigger o k response has a 5xx status code
func (o *CreateTriggerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create trigger o k response a status code equal to that given
func (o *CreateTriggerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create trigger o k response
func (o *CreateTriggerOK) Code() int {
	return 200
}

func (o *CreateTriggerOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/trigger][%d] createTriggerOK %s", 200, payload)
}

func (o *CreateTriggerOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/trigger][%d] createTriggerOK %s", 200, payload)
}

func (o *CreateTriggerOK) GetPayload() *models.ModelsTrigger {
	return o.Payload
}

func (o *CreateTriggerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsTrigger)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTriggerBadRequest creates a CreateTriggerBadRequest with default headers values
func NewCreateTriggerBadRequest() *CreateTriggerBadRequest {
	return &CreateTriggerBadRequest{}
}

/*
CreateTriggerBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateTriggerBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this create trigger bad request response has a 2xx status code
func (o *CreateTriggerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create trigger bad request response has a 3xx status code
func (o *CreateTriggerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create trigger bad request response has a 4xx status code
func (o *CreateTriggerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create trigger bad request response has a 5xx status code
func (o *CreateTriggerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create trigger bad request response a status code equal to that given
func (o *CreateTriggerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create trigger bad request response
func (o *CreateTriggerBadRequest) Code() int {
	return 400
}

func (o *CreateTriggerBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/trigger][%d] createTriggerBadRequest %s", 400, payload)
}

func (o *CreateTriggerBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/trigger][%d] createTriggerBadRequest %s", 400, payload)
}

func (o *CreateTriggerBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CreateTriggerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTriggerUnauthorized creates a CreateTriggerUnauthorized with default headers values
func NewCreateTriggerUnauthorized() *CreateTriggerUnauthorized {
	return &CreateTriggerUnauthorized{}
}

/*
CreateTriggerUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateTriggerUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this create trigger unauthorized response has a 2xx status code
func (o *CreateTriggerUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create trigger unauthorized response has a 3xx status code
func (o *CreateTriggerUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create trigger unauthorized response has a 4xx status code
func (o *CreateTriggerUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create trigger unauthorized response has a 5xx status code
func (o *CreateTriggerUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create trigger unauthorized response a status code equal to that given
func (o *CreateTriggerUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create trigger unauthorized response
func (o *CreateTriggerUnauthorized) Code() int {
	return 401
}

func (o *CreateTriggerUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/trigger][%d] createTriggerUnauthorized %s", 401, payload)
}

func (o *CreateTriggerUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/trigger][%d] createTriggerUnauthorized %s", 401, payload)
}

func (o *CreateTriggerUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CreateTriggerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTriggerForbidden creates a CreateTriggerForbidden with default headers values
func NewCreateTriggerForbidden() *CreateTriggerForbidden {
	return &CreateTriggerForbidden{}
}

/*
CreateTriggerForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateTriggerForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this create trigger forbidden response has a 2xx status code
func (o *CreateTriggerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create trigger forbidden response has a 3xx status code
func (o *CreateTriggerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create trigger forbidden response has a 4xx status code
func (o *CreateTriggerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create trigger forbidden response has a 5xx status code
func (o *CreateTriggerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create trigger forbidden response a status code equal to that given
func (o *CreateTriggerForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create trigger forbidden response
func (o *CreateTriggerForbidden) Code() int {
	return 403
}

func (o *CreateTriggerForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/trigger][%d] createTriggerForbidden %s", 403, payload)
}

func (o *CreateTriggerForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/trigger][%d] createTriggerForbidden %s", 403, payload)
}

func (o *CreateTriggerForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CreateTriggerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTriggerInternalServerError creates a CreateTriggerInternalServerError with default headers values
func NewCreateTriggerInternalServerError() *CreateTriggerInternalServerError {
	return &CreateTriggerInternalServerError{}
}

/*
CreateTriggerInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateTriggerInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this create trigger internal server error response has a 2xx status code
func (o *CreateTriggerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create trigger internal server error response has a 3xx status code
func (o *CreateTriggerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create trigger internal server error response has a 4xx status code
func (o *CreateTriggerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create trigger internal server error response has a 5xx status code
func (o *CreateTriggerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create trigger internal server error response a status code equal to that given
func (o *CreateTriggerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create trigger internal server error response
func (o *CreateTriggerInternalServerError) Code() int {
	return 500
}

func (o *CreateTriggerInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/trigger][%d] createTriggerInternalServerError %s", 500, payload)
}

func (o *CreateTriggerInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/trigger][%d] createTriggerInternalServerError %s", 500, payload)
}

func (o *CreateTriggerInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CreateTriggerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
