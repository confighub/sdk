// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package trigger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// UpdateTriggerReader is a Reader for the UpdateTrigger structure.
type UpdateTriggerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTriggerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateTriggerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateTriggerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateTriggerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateTriggerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateTriggerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateTriggerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /space/{space_id}/trigger/{trigger_id}] UpdateTrigger", response, response.Code())
	}
}

// NewUpdateTriggerOK creates a UpdateTriggerOK with default headers values
func NewUpdateTriggerOK() *UpdateTriggerOK {
	return &UpdateTriggerOK{}
}

/*
UpdateTriggerOK describes a response with status code 200, with default header values.

OK
*/
type UpdateTriggerOK struct {
	Payload *models.ModelsTrigger
}

// IsSuccess returns true when this update trigger o k response has a 2xx status code
func (o *UpdateTriggerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update trigger o k response has a 3xx status code
func (o *UpdateTriggerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update trigger o k response has a 4xx status code
func (o *UpdateTriggerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update trigger o k response has a 5xx status code
func (o *UpdateTriggerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update trigger o k response a status code equal to that given
func (o *UpdateTriggerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update trigger o k response
func (o *UpdateTriggerOK) Code() int {
	return 200
}

func (o *UpdateTriggerOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/trigger/{trigger_id}][%d] updateTriggerOK %s", 200, payload)
}

func (o *UpdateTriggerOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/trigger/{trigger_id}][%d] updateTriggerOK %s", 200, payload)
}

func (o *UpdateTriggerOK) GetPayload() *models.ModelsTrigger {
	return o.Payload
}

func (o *UpdateTriggerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsTrigger)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTriggerBadRequest creates a UpdateTriggerBadRequest with default headers values
func NewUpdateTriggerBadRequest() *UpdateTriggerBadRequest {
	return &UpdateTriggerBadRequest{}
}

/*
UpdateTriggerBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateTriggerBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update trigger bad request response has a 2xx status code
func (o *UpdateTriggerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update trigger bad request response has a 3xx status code
func (o *UpdateTriggerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update trigger bad request response has a 4xx status code
func (o *UpdateTriggerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update trigger bad request response has a 5xx status code
func (o *UpdateTriggerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update trigger bad request response a status code equal to that given
func (o *UpdateTriggerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update trigger bad request response
func (o *UpdateTriggerBadRequest) Code() int {
	return 400
}

func (o *UpdateTriggerBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/trigger/{trigger_id}][%d] updateTriggerBadRequest %s", 400, payload)
}

func (o *UpdateTriggerBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/trigger/{trigger_id}][%d] updateTriggerBadRequest %s", 400, payload)
}

func (o *UpdateTriggerBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateTriggerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTriggerUnauthorized creates a UpdateTriggerUnauthorized with default headers values
func NewUpdateTriggerUnauthorized() *UpdateTriggerUnauthorized {
	return &UpdateTriggerUnauthorized{}
}

/*
UpdateTriggerUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateTriggerUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update trigger unauthorized response has a 2xx status code
func (o *UpdateTriggerUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update trigger unauthorized response has a 3xx status code
func (o *UpdateTriggerUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update trigger unauthorized response has a 4xx status code
func (o *UpdateTriggerUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update trigger unauthorized response has a 5xx status code
func (o *UpdateTriggerUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update trigger unauthorized response a status code equal to that given
func (o *UpdateTriggerUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update trigger unauthorized response
func (o *UpdateTriggerUnauthorized) Code() int {
	return 401
}

func (o *UpdateTriggerUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/trigger/{trigger_id}][%d] updateTriggerUnauthorized %s", 401, payload)
}

func (o *UpdateTriggerUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/trigger/{trigger_id}][%d] updateTriggerUnauthorized %s", 401, payload)
}

func (o *UpdateTriggerUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateTriggerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTriggerForbidden creates a UpdateTriggerForbidden with default headers values
func NewUpdateTriggerForbidden() *UpdateTriggerForbidden {
	return &UpdateTriggerForbidden{}
}

/*
UpdateTriggerForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateTriggerForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update trigger forbidden response has a 2xx status code
func (o *UpdateTriggerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update trigger forbidden response has a 3xx status code
func (o *UpdateTriggerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update trigger forbidden response has a 4xx status code
func (o *UpdateTriggerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update trigger forbidden response has a 5xx status code
func (o *UpdateTriggerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update trigger forbidden response a status code equal to that given
func (o *UpdateTriggerForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update trigger forbidden response
func (o *UpdateTriggerForbidden) Code() int {
	return 403
}

func (o *UpdateTriggerForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/trigger/{trigger_id}][%d] updateTriggerForbidden %s", 403, payload)
}

func (o *UpdateTriggerForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/trigger/{trigger_id}][%d] updateTriggerForbidden %s", 403, payload)
}

func (o *UpdateTriggerForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateTriggerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTriggerNotFound creates a UpdateTriggerNotFound with default headers values
func NewUpdateTriggerNotFound() *UpdateTriggerNotFound {
	return &UpdateTriggerNotFound{}
}

/*
UpdateTriggerNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateTriggerNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update trigger not found response has a 2xx status code
func (o *UpdateTriggerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update trigger not found response has a 3xx status code
func (o *UpdateTriggerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update trigger not found response has a 4xx status code
func (o *UpdateTriggerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update trigger not found response has a 5xx status code
func (o *UpdateTriggerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update trigger not found response a status code equal to that given
func (o *UpdateTriggerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update trigger not found response
func (o *UpdateTriggerNotFound) Code() int {
	return 404
}

func (o *UpdateTriggerNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/trigger/{trigger_id}][%d] updateTriggerNotFound %s", 404, payload)
}

func (o *UpdateTriggerNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/trigger/{trigger_id}][%d] updateTriggerNotFound %s", 404, payload)
}

func (o *UpdateTriggerNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateTriggerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTriggerInternalServerError creates a UpdateTriggerInternalServerError with default headers values
func NewUpdateTriggerInternalServerError() *UpdateTriggerInternalServerError {
	return &UpdateTriggerInternalServerError{}
}

/*
UpdateTriggerInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateTriggerInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update trigger internal server error response has a 2xx status code
func (o *UpdateTriggerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update trigger internal server error response has a 3xx status code
func (o *UpdateTriggerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update trigger internal server error response has a 4xx status code
func (o *UpdateTriggerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update trigger internal server error response has a 5xx status code
func (o *UpdateTriggerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update trigger internal server error response a status code equal to that given
func (o *UpdateTriggerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update trigger internal server error response
func (o *UpdateTriggerInternalServerError) Code() int {
	return 500
}

func (o *UpdateTriggerInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/trigger/{trigger_id}][%d] updateTriggerInternalServerError %s", 500, payload)
}

func (o *UpdateTriggerInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/trigger/{trigger_id}][%d] updateTriggerInternalServerError %s", 500, payload)
}

func (o *UpdateTriggerInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateTriggerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
