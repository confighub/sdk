// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package trigger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new trigger API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new trigger API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new trigger API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for trigger API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTrigger(params *CreateTriggerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTriggerOK, error)

	DeleteTrigger(params *DeleteTriggerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTriggerOK, error)

	GetTrigger(params *GetTriggerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTriggerOK, error)

	GetTriggerExtended(params *GetTriggerExtendedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTriggerExtendedOK, error)

	ListTriggers(params *ListTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTriggersOK, error)

	UpdateTrigger(params *UpdateTriggerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTriggerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateTrigger creates a trigger

Create registers a trigger for a Space
*/
func (a *Client) CreateTrigger(params *CreateTriggerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTriggerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTrigger",
		Method:             "POST",
		PathPattern:        "/space/{space_id}/trigger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateTrigger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTrigger deletes removes a trigger

Delete removes a trigger in the space
*/
func (a *Client) DeleteTrigger(params *DeleteTriggerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTriggerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTrigger",
		Method:             "DELETE",
		PathPattern:        "/space/{space_id}/trigger/{trigger_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTrigger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTrigger gets retrieves a trigger

Get retrieves a trigger in the space
*/
func (a *Client) GetTrigger(params *GetTriggerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTriggerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTrigger",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/trigger/{trigger_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTrigger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTriggerExtended gets extended retrieves extended information about a trigger

GetExtended retrieves extended information about a trigger in the space
*/
func (a *Client) GetTriggerExtended(params *GetTriggerExtendedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTriggerExtendedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTriggerExtendedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTriggerExtended",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/trigger/{trigger_id}/extended",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTriggerExtendedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTriggerExtendedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTriggerExtended: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTriggers lists all triggers

List all Triggers
*/
func (a *Client) ListTriggers(params *ListTriggersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTriggersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTriggers",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/trigger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTriggersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTrigger updates retrieves and updates a trigger

Update retrieves and updates a trigger in the space
*/
func (a *Client) UpdateTrigger(params *UpdateTriggerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTriggerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTrigger",
		Method:             "PUT",
		PathPattern:        "/space/{space_id}/trigger/{trigger_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateTrigger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
