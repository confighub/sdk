// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package trigger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// GetTriggerExtendedReader is a Reader for the GetTriggerExtended structure.
type GetTriggerExtendedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTriggerExtendedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTriggerExtendedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTriggerExtendedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTriggerExtendedUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTriggerExtendedForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTriggerExtendedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTriggerExtendedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /space/{space_id}/trigger/{trigger_id}/extended] GetTriggerExtended", response, response.Code())
	}
}

// NewGetTriggerExtendedOK creates a GetTriggerExtendedOK with default headers values
func NewGetTriggerExtendedOK() *GetTriggerExtendedOK {
	return &GetTriggerExtendedOK{}
}

/*
GetTriggerExtendedOK describes a response with status code 200, with default header values.

OK
*/
type GetTriggerExtendedOK struct {
	Payload *models.ModelsTriggerExtended
}

// IsSuccess returns true when this get trigger extended o k response has a 2xx status code
func (o *GetTriggerExtendedOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get trigger extended o k response has a 3xx status code
func (o *GetTriggerExtendedOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get trigger extended o k response has a 4xx status code
func (o *GetTriggerExtendedOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get trigger extended o k response has a 5xx status code
func (o *GetTriggerExtendedOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get trigger extended o k response a status code equal to that given
func (o *GetTriggerExtendedOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get trigger extended o k response
func (o *GetTriggerExtendedOK) Code() int {
	return 200
}

func (o *GetTriggerExtendedOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}/extended][%d] getTriggerExtendedOK %s", 200, payload)
}

func (o *GetTriggerExtendedOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}/extended][%d] getTriggerExtendedOK %s", 200, payload)
}

func (o *GetTriggerExtendedOK) GetPayload() *models.ModelsTriggerExtended {
	return o.Payload
}

func (o *GetTriggerExtendedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsTriggerExtended)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTriggerExtendedBadRequest creates a GetTriggerExtendedBadRequest with default headers values
func NewGetTriggerExtendedBadRequest() *GetTriggerExtendedBadRequest {
	return &GetTriggerExtendedBadRequest{}
}

/*
GetTriggerExtendedBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetTriggerExtendedBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get trigger extended bad request response has a 2xx status code
func (o *GetTriggerExtendedBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get trigger extended bad request response has a 3xx status code
func (o *GetTriggerExtendedBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get trigger extended bad request response has a 4xx status code
func (o *GetTriggerExtendedBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get trigger extended bad request response has a 5xx status code
func (o *GetTriggerExtendedBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get trigger extended bad request response a status code equal to that given
func (o *GetTriggerExtendedBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get trigger extended bad request response
func (o *GetTriggerExtendedBadRequest) Code() int {
	return 400
}

func (o *GetTriggerExtendedBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}/extended][%d] getTriggerExtendedBadRequest %s", 400, payload)
}

func (o *GetTriggerExtendedBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}/extended][%d] getTriggerExtendedBadRequest %s", 400, payload)
}

func (o *GetTriggerExtendedBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTriggerExtendedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTriggerExtendedUnauthorized creates a GetTriggerExtendedUnauthorized with default headers values
func NewGetTriggerExtendedUnauthorized() *GetTriggerExtendedUnauthorized {
	return &GetTriggerExtendedUnauthorized{}
}

/*
GetTriggerExtendedUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTriggerExtendedUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get trigger extended unauthorized response has a 2xx status code
func (o *GetTriggerExtendedUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get trigger extended unauthorized response has a 3xx status code
func (o *GetTriggerExtendedUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get trigger extended unauthorized response has a 4xx status code
func (o *GetTriggerExtendedUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get trigger extended unauthorized response has a 5xx status code
func (o *GetTriggerExtendedUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get trigger extended unauthorized response a status code equal to that given
func (o *GetTriggerExtendedUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get trigger extended unauthorized response
func (o *GetTriggerExtendedUnauthorized) Code() int {
	return 401
}

func (o *GetTriggerExtendedUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}/extended][%d] getTriggerExtendedUnauthorized %s", 401, payload)
}

func (o *GetTriggerExtendedUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}/extended][%d] getTriggerExtendedUnauthorized %s", 401, payload)
}

func (o *GetTriggerExtendedUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTriggerExtendedUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTriggerExtendedForbidden creates a GetTriggerExtendedForbidden with default headers values
func NewGetTriggerExtendedForbidden() *GetTriggerExtendedForbidden {
	return &GetTriggerExtendedForbidden{}
}

/*
GetTriggerExtendedForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetTriggerExtendedForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get trigger extended forbidden response has a 2xx status code
func (o *GetTriggerExtendedForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get trigger extended forbidden response has a 3xx status code
func (o *GetTriggerExtendedForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get trigger extended forbidden response has a 4xx status code
func (o *GetTriggerExtendedForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get trigger extended forbidden response has a 5xx status code
func (o *GetTriggerExtendedForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get trigger extended forbidden response a status code equal to that given
func (o *GetTriggerExtendedForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get trigger extended forbidden response
func (o *GetTriggerExtendedForbidden) Code() int {
	return 403
}

func (o *GetTriggerExtendedForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}/extended][%d] getTriggerExtendedForbidden %s", 403, payload)
}

func (o *GetTriggerExtendedForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}/extended][%d] getTriggerExtendedForbidden %s", 403, payload)
}

func (o *GetTriggerExtendedForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTriggerExtendedForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTriggerExtendedNotFound creates a GetTriggerExtendedNotFound with default headers values
func NewGetTriggerExtendedNotFound() *GetTriggerExtendedNotFound {
	return &GetTriggerExtendedNotFound{}
}

/*
GetTriggerExtendedNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetTriggerExtendedNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get trigger extended not found response has a 2xx status code
func (o *GetTriggerExtendedNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get trigger extended not found response has a 3xx status code
func (o *GetTriggerExtendedNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get trigger extended not found response has a 4xx status code
func (o *GetTriggerExtendedNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get trigger extended not found response has a 5xx status code
func (o *GetTriggerExtendedNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get trigger extended not found response a status code equal to that given
func (o *GetTriggerExtendedNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get trigger extended not found response
func (o *GetTriggerExtendedNotFound) Code() int {
	return 404
}

func (o *GetTriggerExtendedNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}/extended][%d] getTriggerExtendedNotFound %s", 404, payload)
}

func (o *GetTriggerExtendedNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}/extended][%d] getTriggerExtendedNotFound %s", 404, payload)
}

func (o *GetTriggerExtendedNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTriggerExtendedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTriggerExtendedInternalServerError creates a GetTriggerExtendedInternalServerError with default headers values
func NewGetTriggerExtendedInternalServerError() *GetTriggerExtendedInternalServerError {
	return &GetTriggerExtendedInternalServerError{}
}

/*
GetTriggerExtendedInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetTriggerExtendedInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get trigger extended internal server error response has a 2xx status code
func (o *GetTriggerExtendedInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get trigger extended internal server error response has a 3xx status code
func (o *GetTriggerExtendedInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get trigger extended internal server error response has a 4xx status code
func (o *GetTriggerExtendedInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get trigger extended internal server error response has a 5xx status code
func (o *GetTriggerExtendedInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get trigger extended internal server error response a status code equal to that given
func (o *GetTriggerExtendedInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get trigger extended internal server error response
func (o *GetTriggerExtendedInternalServerError) Code() int {
	return 500
}

func (o *GetTriggerExtendedInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}/extended][%d] getTriggerExtendedInternalServerError %s", 500, payload)
}

func (o *GetTriggerExtendedInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/trigger/{trigger_id}/extended][%d] getTriggerExtendedInternalServerError %s", 500, payload)
}

func (o *GetTriggerExtendedInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTriggerExtendedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
