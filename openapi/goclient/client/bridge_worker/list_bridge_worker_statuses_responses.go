// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package bridge_worker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// ListBridgeWorkerStatusesReader is a Reader for the ListBridgeWorkerStatuses structure.
type ListBridgeWorkerStatusesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListBridgeWorkerStatusesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListBridgeWorkerStatusesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListBridgeWorkerStatusesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListBridgeWorkerStatusesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListBridgeWorkerStatusesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListBridgeWorkerStatusesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /space/{space_id}/bridge_worker/{bridge_worker_id}/status] ListBridgeWorkerStatuses", response, response.Code())
	}
}

// NewListBridgeWorkerStatusesOK creates a ListBridgeWorkerStatusesOK with default headers values
func NewListBridgeWorkerStatusesOK() *ListBridgeWorkerStatusesOK {
	return &ListBridgeWorkerStatusesOK{}
}

/*
ListBridgeWorkerStatusesOK describes a response with status code 200, with default header values.

OK
*/
type ListBridgeWorkerStatusesOK struct {
	Payload []*models.ModelsBridgeWorkerStatus
}

// IsSuccess returns true when this list bridge worker statuses o k response has a 2xx status code
func (o *ListBridgeWorkerStatusesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list bridge worker statuses o k response has a 3xx status code
func (o *ListBridgeWorkerStatusesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list bridge worker statuses o k response has a 4xx status code
func (o *ListBridgeWorkerStatusesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list bridge worker statuses o k response has a 5xx status code
func (o *ListBridgeWorkerStatusesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list bridge worker statuses o k response a status code equal to that given
func (o *ListBridgeWorkerStatusesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list bridge worker statuses o k response
func (o *ListBridgeWorkerStatusesOK) Code() int {
	return 200
}

func (o *ListBridgeWorkerStatusesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/bridge_worker/{bridge_worker_id}/status][%d] listBridgeWorkerStatusesOK %s", 200, payload)
}

func (o *ListBridgeWorkerStatusesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/bridge_worker/{bridge_worker_id}/status][%d] listBridgeWorkerStatusesOK %s", 200, payload)
}

func (o *ListBridgeWorkerStatusesOK) GetPayload() []*models.ModelsBridgeWorkerStatus {
	return o.Payload
}

func (o *ListBridgeWorkerStatusesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBridgeWorkerStatusesBadRequest creates a ListBridgeWorkerStatusesBadRequest with default headers values
func NewListBridgeWorkerStatusesBadRequest() *ListBridgeWorkerStatusesBadRequest {
	return &ListBridgeWorkerStatusesBadRequest{}
}

/*
ListBridgeWorkerStatusesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ListBridgeWorkerStatusesBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list bridge worker statuses bad request response has a 2xx status code
func (o *ListBridgeWorkerStatusesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list bridge worker statuses bad request response has a 3xx status code
func (o *ListBridgeWorkerStatusesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list bridge worker statuses bad request response has a 4xx status code
func (o *ListBridgeWorkerStatusesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list bridge worker statuses bad request response has a 5xx status code
func (o *ListBridgeWorkerStatusesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list bridge worker statuses bad request response a status code equal to that given
func (o *ListBridgeWorkerStatusesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list bridge worker statuses bad request response
func (o *ListBridgeWorkerStatusesBadRequest) Code() int {
	return 400
}

func (o *ListBridgeWorkerStatusesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/bridge_worker/{bridge_worker_id}/status][%d] listBridgeWorkerStatusesBadRequest %s", 400, payload)
}

func (o *ListBridgeWorkerStatusesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/bridge_worker/{bridge_worker_id}/status][%d] listBridgeWorkerStatusesBadRequest %s", 400, payload)
}

func (o *ListBridgeWorkerStatusesBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListBridgeWorkerStatusesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBridgeWorkerStatusesUnauthorized creates a ListBridgeWorkerStatusesUnauthorized with default headers values
func NewListBridgeWorkerStatusesUnauthorized() *ListBridgeWorkerStatusesUnauthorized {
	return &ListBridgeWorkerStatusesUnauthorized{}
}

/*
ListBridgeWorkerStatusesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListBridgeWorkerStatusesUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list bridge worker statuses unauthorized response has a 2xx status code
func (o *ListBridgeWorkerStatusesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list bridge worker statuses unauthorized response has a 3xx status code
func (o *ListBridgeWorkerStatusesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list bridge worker statuses unauthorized response has a 4xx status code
func (o *ListBridgeWorkerStatusesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list bridge worker statuses unauthorized response has a 5xx status code
func (o *ListBridgeWorkerStatusesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list bridge worker statuses unauthorized response a status code equal to that given
func (o *ListBridgeWorkerStatusesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list bridge worker statuses unauthorized response
func (o *ListBridgeWorkerStatusesUnauthorized) Code() int {
	return 401
}

func (o *ListBridgeWorkerStatusesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/bridge_worker/{bridge_worker_id}/status][%d] listBridgeWorkerStatusesUnauthorized %s", 401, payload)
}

func (o *ListBridgeWorkerStatusesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/bridge_worker/{bridge_worker_id}/status][%d] listBridgeWorkerStatusesUnauthorized %s", 401, payload)
}

func (o *ListBridgeWorkerStatusesUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListBridgeWorkerStatusesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBridgeWorkerStatusesForbidden creates a ListBridgeWorkerStatusesForbidden with default headers values
func NewListBridgeWorkerStatusesForbidden() *ListBridgeWorkerStatusesForbidden {
	return &ListBridgeWorkerStatusesForbidden{}
}

/*
ListBridgeWorkerStatusesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListBridgeWorkerStatusesForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list bridge worker statuses forbidden response has a 2xx status code
func (o *ListBridgeWorkerStatusesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list bridge worker statuses forbidden response has a 3xx status code
func (o *ListBridgeWorkerStatusesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list bridge worker statuses forbidden response has a 4xx status code
func (o *ListBridgeWorkerStatusesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list bridge worker statuses forbidden response has a 5xx status code
func (o *ListBridgeWorkerStatusesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list bridge worker statuses forbidden response a status code equal to that given
func (o *ListBridgeWorkerStatusesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list bridge worker statuses forbidden response
func (o *ListBridgeWorkerStatusesForbidden) Code() int {
	return 403
}

func (o *ListBridgeWorkerStatusesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/bridge_worker/{bridge_worker_id}/status][%d] listBridgeWorkerStatusesForbidden %s", 403, payload)
}

func (o *ListBridgeWorkerStatusesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/bridge_worker/{bridge_worker_id}/status][%d] listBridgeWorkerStatusesForbidden %s", 403, payload)
}

func (o *ListBridgeWorkerStatusesForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListBridgeWorkerStatusesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListBridgeWorkerStatusesInternalServerError creates a ListBridgeWorkerStatusesInternalServerError with default headers values
func NewListBridgeWorkerStatusesInternalServerError() *ListBridgeWorkerStatusesInternalServerError {
	return &ListBridgeWorkerStatusesInternalServerError{}
}

/*
ListBridgeWorkerStatusesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ListBridgeWorkerStatusesInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list bridge worker statuses internal server error response has a 2xx status code
func (o *ListBridgeWorkerStatusesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list bridge worker statuses internal server error response has a 3xx status code
func (o *ListBridgeWorkerStatusesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list bridge worker statuses internal server error response has a 4xx status code
func (o *ListBridgeWorkerStatusesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list bridge worker statuses internal server error response has a 5xx status code
func (o *ListBridgeWorkerStatusesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list bridge worker statuses internal server error response a status code equal to that given
func (o *ListBridgeWorkerStatusesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list bridge worker statuses internal server error response
func (o *ListBridgeWorkerStatusesInternalServerError) Code() int {
	return 500
}

func (o *ListBridgeWorkerStatusesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/bridge_worker/{bridge_worker_id}/status][%d] listBridgeWorkerStatusesInternalServerError %s", 500, payload)
}

func (o *ListBridgeWorkerStatusesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/bridge_worker/{bridge_worker_id}/status][%d] listBridgeWorkerStatusesInternalServerError %s", 500, payload)
}

func (o *ListBridgeWorkerStatusesInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListBridgeWorkerStatusesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
