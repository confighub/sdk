// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package bridge_worker

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new bridge worker API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new bridge worker API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new bridge worker API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for bridge worker API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextEventStream sets the Accept header to "text/event-stream".
func WithAcceptTextEventStream(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/event-stream"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBridgeWorker(params *CreateBridgeWorkerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBridgeWorkerOK, error)

	CrossListBridgeWorkers(params *CrossListBridgeWorkersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CrossListBridgeWorkersOK, error)

	DeleteBridgeWorker(params *DeleteBridgeWorkerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBridgeWorkerOK, error)

	GetBridgeWorker(params *GetBridgeWorkerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBridgeWorkerOK, error)

	GetBridgeWorkerExtended(params *GetBridgeWorkerExtendedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBridgeWorkerExtendedOK, error)

	GetBridgeWorkerStatus(params *GetBridgeWorkerStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBridgeWorkerStatusOK, error)

	ListBridgeWorkerStatuses(params *ListBridgeWorkerStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBridgeWorkerStatusesOK, error)

	ListBridgeWorkers(params *ListBridgeWorkersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBridgeWorkersOK, error)

	PostBridgeWorkerBridgeWorkerIDActionResult(params *PostBridgeWorkerBridgeWorkerIDActionResultParams, opts ...ClientOption) (*PostBridgeWorkerBridgeWorkerIDActionResultOK, error)

	PostBridgeWorkerBridgeWorkerIDStream(params *PostBridgeWorkerBridgeWorkerIDStreamParams, opts ...ClientOption) (*PostBridgeWorkerBridgeWorkerIDStreamOK, error)

	UpdateBridgeWorker(params *UpdateBridgeWorkerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBridgeWorkerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateBridgeWorker creates a bridge worker

Create registers a bridge worker for the space
*/
func (a *Client) CreateBridgeWorker(params *CreateBridgeWorkerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBridgeWorkerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBridgeWorkerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateBridgeWorker",
		Method:             "POST",
		PathPattern:        "/space/{space_id}/bridge_worker",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBridgeWorkerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBridgeWorkerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateBridgeWorker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CrossListBridgeWorkers lists retrieves a list of bridge workers across spaces

List retrieves a list of BridgeWorkers across spaces in the Organization
*/
func (a *Client) CrossListBridgeWorkers(params *CrossListBridgeWorkersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CrossListBridgeWorkersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCrossListBridgeWorkersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CrossListBridgeWorkers",
		Method:             "GET",
		PathPattern:        "/bridge_worker",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CrossListBridgeWorkersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CrossListBridgeWorkersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CrossListBridgeWorkers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteBridgeWorker deletes removes a bridge worker

Delete removes a bridge worker in the space
*/
func (a *Client) DeleteBridgeWorker(params *DeleteBridgeWorkerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBridgeWorkerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBridgeWorkerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBridgeWorker",
		Method:             "DELETE",
		PathPattern:        "/space/{space_id}/bridge_worker/{bridge_worker_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBridgeWorkerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBridgeWorkerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteBridgeWorker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBridgeWorker gets retrieves a bridge worker

Get retrieves a bridge worker in the space
*/
func (a *Client) GetBridgeWorker(params *GetBridgeWorkerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBridgeWorkerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBridgeWorkerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBridgeWorker",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/bridge_worker/{bridge_worker_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBridgeWorkerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBridgeWorkerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBridgeWorker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBridgeWorkerExtended gets extended retrieves extended information about a bridge worker

GetExtended retrieves extended information about a bridge worker in the space
*/
func (a *Client) GetBridgeWorkerExtended(params *GetBridgeWorkerExtendedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBridgeWorkerExtendedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBridgeWorkerExtendedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBridgeWorkerExtended",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/bridge_worker/{bridge_worker_id}/extended",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBridgeWorkerExtendedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBridgeWorkerExtendedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBridgeWorkerExtended: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBridgeWorkerStatus gets a bridge worker status

Get a specific Bridge Worker Status
*/
func (a *Client) GetBridgeWorkerStatus(params *GetBridgeWorkerStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBridgeWorkerStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBridgeWorkerStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBridgeWorkerStatus",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/bridge_worker/{bridge_worker_id}/status/{status_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBridgeWorkerStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBridgeWorkerStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBridgeWorkerStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBridgeWorkerStatuses lists bridge worker statuses

List Bridge Worker Statuses for a specific worker
*/
func (a *Client) ListBridgeWorkerStatuses(params *ListBridgeWorkerStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBridgeWorkerStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBridgeWorkerStatusesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListBridgeWorkerStatuses",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/bridge_worker/{bridge_worker_id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBridgeWorkerStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBridgeWorkerStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListBridgeWorkerStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBridgeWorkers lists all bridge workers

List all bridge workers
*/
func (a *Client) ListBridgeWorkers(params *ListBridgeWorkersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBridgeWorkersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBridgeWorkersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListBridgeWorkers",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/bridge_worker",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBridgeWorkersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBridgeWorkersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListBridgeWorkers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostBridgeWorkerBridgeWorkerIDActionResult creates action result by a bridge worker

Records the status/result of an action executed by a bridge worker
*/
func (a *Client) PostBridgeWorkerBridgeWorkerIDActionResult(params *PostBridgeWorkerBridgeWorkerIDActionResultParams, opts ...ClientOption) (*PostBridgeWorkerBridgeWorkerIDActionResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBridgeWorkerBridgeWorkerIDActionResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostBridgeWorkerBridgeWorkerIDActionResult",
		Method:             "POST",
		PathPattern:        "/bridge_worker/{bridge_worker_id}/action_result",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostBridgeWorkerBridgeWorkerIDActionResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostBridgeWorkerBridgeWorkerIDActionResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostBridgeWorkerBridgeWorkerIDActionResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostBridgeWorkerBridgeWorkerIDStream streams actions to bridge worker

Establishes an SSE connection with a bridge worker for real-time action streaming
*/
func (a *Client) PostBridgeWorkerBridgeWorkerIDStream(params *PostBridgeWorkerBridgeWorkerIDStreamParams, opts ...ClientOption) (*PostBridgeWorkerBridgeWorkerIDStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBridgeWorkerBridgeWorkerIDStreamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostBridgeWorkerBridgeWorkerIDStream",
		Method:             "POST",
		PathPattern:        "/bridge_worker/{bridge_worker_id}/stream",
		ProducesMediaTypes: []string{"text/event-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostBridgeWorkerBridgeWorkerIDStreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostBridgeWorkerBridgeWorkerIDStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostBridgeWorkerBridgeWorkerIDStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBridgeWorker updates retrieves and updates a bridge worker

Update retrieves and updates a bridge worker in the space
*/
func (a *Client) UpdateBridgeWorker(params *UpdateBridgeWorkerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBridgeWorkerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBridgeWorkerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateBridgeWorker",
		Method:             "PUT",
		PathPattern:        "/space/{space_id}/bridge_worker/{bridge_worker_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBridgeWorkerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBridgeWorkerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateBridgeWorker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
