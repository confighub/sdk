// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// ListUserReader is a Reader for the ListUser structure.
type ListUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /user] ListUser", response, response.Code())
	}
}

// NewListUserOK creates a ListUserOK with default headers values
func NewListUserOK() *ListUserOK {
	return &ListUserOK{}
}

/*
ListUserOK describes a response with status code 200, with default header values.

OK
*/
type ListUserOK struct {
	Payload []*models.ModelsUser
}

// IsSuccess returns true when this list user o k response has a 2xx status code
func (o *ListUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list user o k response has a 3xx status code
func (o *ListUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user o k response has a 4xx status code
func (o *ListUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list user o k response has a 5xx status code
func (o *ListUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list user o k response a status code equal to that given
func (o *ListUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list user o k response
func (o *ListUserOK) Code() int {
	return 200
}

func (o *ListUserOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /user][%d] listUserOK %s", 200, payload)
}

func (o *ListUserOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /user][%d] listUserOK %s", 200, payload)
}

func (o *ListUserOK) GetPayload() []*models.ModelsUser {
	return o.Payload
}

func (o *ListUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserBadRequest creates a ListUserBadRequest with default headers values
func NewListUserBadRequest() *ListUserBadRequest {
	return &ListUserBadRequest{}
}

/*
ListUserBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ListUserBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list user bad request response has a 2xx status code
func (o *ListUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user bad request response has a 3xx status code
func (o *ListUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user bad request response has a 4xx status code
func (o *ListUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user bad request response has a 5xx status code
func (o *ListUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list user bad request response a status code equal to that given
func (o *ListUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list user bad request response
func (o *ListUserBadRequest) Code() int {
	return 400
}

func (o *ListUserBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /user][%d] listUserBadRequest %s", 400, payload)
}

func (o *ListUserBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /user][%d] listUserBadRequest %s", 400, payload)
}

func (o *ListUserBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserUnauthorized creates a ListUserUnauthorized with default headers values
func NewListUserUnauthorized() *ListUserUnauthorized {
	return &ListUserUnauthorized{}
}

/*
ListUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListUserUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list user unauthorized response has a 2xx status code
func (o *ListUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user unauthorized response has a 3xx status code
func (o *ListUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user unauthorized response has a 4xx status code
func (o *ListUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user unauthorized response has a 5xx status code
func (o *ListUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list user unauthorized response a status code equal to that given
func (o *ListUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list user unauthorized response
func (o *ListUserUnauthorized) Code() int {
	return 401
}

func (o *ListUserUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /user][%d] listUserUnauthorized %s", 401, payload)
}

func (o *ListUserUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /user][%d] listUserUnauthorized %s", 401, payload)
}

func (o *ListUserUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserForbidden creates a ListUserForbidden with default headers values
func NewListUserForbidden() *ListUserForbidden {
	return &ListUserForbidden{}
}

/*
ListUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListUserForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list user forbidden response has a 2xx status code
func (o *ListUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user forbidden response has a 3xx status code
func (o *ListUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user forbidden response has a 4xx status code
func (o *ListUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user forbidden response has a 5xx status code
func (o *ListUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list user forbidden response a status code equal to that given
func (o *ListUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list user forbidden response
func (o *ListUserForbidden) Code() int {
	return 403
}

func (o *ListUserForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /user][%d] listUserForbidden %s", 403, payload)
}

func (o *ListUserForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /user][%d] listUserForbidden %s", 403, payload)
}

func (o *ListUserForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserInternalServerError creates a ListUserInternalServerError with default headers values
func NewListUserInternalServerError() *ListUserInternalServerError {
	return &ListUserInternalServerError{}
}

/*
ListUserInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ListUserInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list user internal server error response has a 2xx status code
func (o *ListUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user internal server error response has a 3xx status code
func (o *ListUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user internal server error response has a 4xx status code
func (o *ListUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list user internal server error response has a 5xx status code
func (o *ListUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list user internal server error response a status code equal to that given
func (o *ListUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list user internal server error response
func (o *ListUserInternalServerError) Code() int {
	return 500
}

func (o *ListUserInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /user][%d] listUserInternalServerError %s", 500, payload)
}

func (o *ListUserInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /user][%d] listUserInternalServerError %s", 500, payload)
}

func (o *ListUserInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
