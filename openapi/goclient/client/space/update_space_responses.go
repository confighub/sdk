// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package space

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// UpdateSpaceReader is a Reader for the UpdateSpace structure.
type UpdateSpaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSpaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSpaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSpaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateSpaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateSpaceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSpaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSpaceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /space/{space_id}] UpdateSpace", response, response.Code())
	}
}

// NewUpdateSpaceOK creates a UpdateSpaceOK with default headers values
func NewUpdateSpaceOK() *UpdateSpaceOK {
	return &UpdateSpaceOK{}
}

/*
UpdateSpaceOK describes a response with status code 200, with default header values.

OK
*/
type UpdateSpaceOK struct {
	Payload *models.ModelsSpace
}

// IsSuccess returns true when this update space o k response has a 2xx status code
func (o *UpdateSpaceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update space o k response has a 3xx status code
func (o *UpdateSpaceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update space o k response has a 4xx status code
func (o *UpdateSpaceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update space o k response has a 5xx status code
func (o *UpdateSpaceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update space o k response a status code equal to that given
func (o *UpdateSpaceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update space o k response
func (o *UpdateSpaceOK) Code() int {
	return 200
}

func (o *UpdateSpaceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}][%d] updateSpaceOK %s", 200, payload)
}

func (o *UpdateSpaceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}][%d] updateSpaceOK %s", 200, payload)
}

func (o *UpdateSpaceOK) GetPayload() *models.ModelsSpace {
	return o.Payload
}

func (o *UpdateSpaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsSpace)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSpaceBadRequest creates a UpdateSpaceBadRequest with default headers values
func NewUpdateSpaceBadRequest() *UpdateSpaceBadRequest {
	return &UpdateSpaceBadRequest{}
}

/*
UpdateSpaceBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateSpaceBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update space bad request response has a 2xx status code
func (o *UpdateSpaceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update space bad request response has a 3xx status code
func (o *UpdateSpaceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update space bad request response has a 4xx status code
func (o *UpdateSpaceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update space bad request response has a 5xx status code
func (o *UpdateSpaceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update space bad request response a status code equal to that given
func (o *UpdateSpaceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update space bad request response
func (o *UpdateSpaceBadRequest) Code() int {
	return 400
}

func (o *UpdateSpaceBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}][%d] updateSpaceBadRequest %s", 400, payload)
}

func (o *UpdateSpaceBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}][%d] updateSpaceBadRequest %s", 400, payload)
}

func (o *UpdateSpaceBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateSpaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSpaceUnauthorized creates a UpdateSpaceUnauthorized with default headers values
func NewUpdateSpaceUnauthorized() *UpdateSpaceUnauthorized {
	return &UpdateSpaceUnauthorized{}
}

/*
UpdateSpaceUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateSpaceUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update space unauthorized response has a 2xx status code
func (o *UpdateSpaceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update space unauthorized response has a 3xx status code
func (o *UpdateSpaceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update space unauthorized response has a 4xx status code
func (o *UpdateSpaceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update space unauthorized response has a 5xx status code
func (o *UpdateSpaceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update space unauthorized response a status code equal to that given
func (o *UpdateSpaceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update space unauthorized response
func (o *UpdateSpaceUnauthorized) Code() int {
	return 401
}

func (o *UpdateSpaceUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}][%d] updateSpaceUnauthorized %s", 401, payload)
}

func (o *UpdateSpaceUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}][%d] updateSpaceUnauthorized %s", 401, payload)
}

func (o *UpdateSpaceUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateSpaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSpaceForbidden creates a UpdateSpaceForbidden with default headers values
func NewUpdateSpaceForbidden() *UpdateSpaceForbidden {
	return &UpdateSpaceForbidden{}
}

/*
UpdateSpaceForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateSpaceForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update space forbidden response has a 2xx status code
func (o *UpdateSpaceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update space forbidden response has a 3xx status code
func (o *UpdateSpaceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update space forbidden response has a 4xx status code
func (o *UpdateSpaceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update space forbidden response has a 5xx status code
func (o *UpdateSpaceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update space forbidden response a status code equal to that given
func (o *UpdateSpaceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update space forbidden response
func (o *UpdateSpaceForbidden) Code() int {
	return 403
}

func (o *UpdateSpaceForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}][%d] updateSpaceForbidden %s", 403, payload)
}

func (o *UpdateSpaceForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}][%d] updateSpaceForbidden %s", 403, payload)
}

func (o *UpdateSpaceForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateSpaceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSpaceNotFound creates a UpdateSpaceNotFound with default headers values
func NewUpdateSpaceNotFound() *UpdateSpaceNotFound {
	return &UpdateSpaceNotFound{}
}

/*
UpdateSpaceNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateSpaceNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update space not found response has a 2xx status code
func (o *UpdateSpaceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update space not found response has a 3xx status code
func (o *UpdateSpaceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update space not found response has a 4xx status code
func (o *UpdateSpaceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update space not found response has a 5xx status code
func (o *UpdateSpaceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update space not found response a status code equal to that given
func (o *UpdateSpaceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update space not found response
func (o *UpdateSpaceNotFound) Code() int {
	return 404
}

func (o *UpdateSpaceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}][%d] updateSpaceNotFound %s", 404, payload)
}

func (o *UpdateSpaceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}][%d] updateSpaceNotFound %s", 404, payload)
}

func (o *UpdateSpaceNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateSpaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSpaceInternalServerError creates a UpdateSpaceInternalServerError with default headers values
func NewUpdateSpaceInternalServerError() *UpdateSpaceInternalServerError {
	return &UpdateSpaceInternalServerError{}
}

/*
UpdateSpaceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateSpaceInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update space internal server error response has a 2xx status code
func (o *UpdateSpaceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update space internal server error response has a 3xx status code
func (o *UpdateSpaceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update space internal server error response has a 4xx status code
func (o *UpdateSpaceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update space internal server error response has a 5xx status code
func (o *UpdateSpaceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update space internal server error response a status code equal to that given
func (o *UpdateSpaceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update space internal server error response
func (o *UpdateSpaceInternalServerError) Code() int {
	return 500
}

func (o *UpdateSpaceInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}][%d] updateSpaceInternalServerError %s", 500, payload)
}

func (o *UpdateSpaceInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}][%d] updateSpaceInternalServerError %s", 500, payload)
}

func (o *UpdateSpaceInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateSpaceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
