// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package space

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// DeleteSpaceReader is a Reader for the DeleteSpace structure.
type DeleteSpaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSpaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSpaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSpaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteSpaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSpaceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSpaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSpaceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /space/{space_id}] DeleteSpace", response, response.Code())
	}
}

// NewDeleteSpaceOK creates a DeleteSpaceOK with default headers values
func NewDeleteSpaceOK() *DeleteSpaceOK {
	return &DeleteSpaceOK{}
}

/*
DeleteSpaceOK describes a response with status code 200, with default header values.

Ok
*/
type DeleteSpaceOK struct {
	Payload string
}

// IsSuccess returns true when this delete space o k response has a 2xx status code
func (o *DeleteSpaceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete space o k response has a 3xx status code
func (o *DeleteSpaceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete space o k response has a 4xx status code
func (o *DeleteSpaceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete space o k response has a 5xx status code
func (o *DeleteSpaceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete space o k response a status code equal to that given
func (o *DeleteSpaceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete space o k response
func (o *DeleteSpaceOK) Code() int {
	return 200
}

func (o *DeleteSpaceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}][%d] deleteSpaceOK %s", 200, payload)
}

func (o *DeleteSpaceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}][%d] deleteSpaceOK %s", 200, payload)
}

func (o *DeleteSpaceOK) GetPayload() string {
	return o.Payload
}

func (o *DeleteSpaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpaceBadRequest creates a DeleteSpaceBadRequest with default headers values
func NewDeleteSpaceBadRequest() *DeleteSpaceBadRequest {
	return &DeleteSpaceBadRequest{}
}

/*
DeleteSpaceBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteSpaceBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete space bad request response has a 2xx status code
func (o *DeleteSpaceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete space bad request response has a 3xx status code
func (o *DeleteSpaceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete space bad request response has a 4xx status code
func (o *DeleteSpaceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete space bad request response has a 5xx status code
func (o *DeleteSpaceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete space bad request response a status code equal to that given
func (o *DeleteSpaceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete space bad request response
func (o *DeleteSpaceBadRequest) Code() int {
	return 400
}

func (o *DeleteSpaceBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}][%d] deleteSpaceBadRequest %s", 400, payload)
}

func (o *DeleteSpaceBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}][%d] deleteSpaceBadRequest %s", 400, payload)
}

func (o *DeleteSpaceBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteSpaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpaceUnauthorized creates a DeleteSpaceUnauthorized with default headers values
func NewDeleteSpaceUnauthorized() *DeleteSpaceUnauthorized {
	return &DeleteSpaceUnauthorized{}
}

/*
DeleteSpaceUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteSpaceUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete space unauthorized response has a 2xx status code
func (o *DeleteSpaceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete space unauthorized response has a 3xx status code
func (o *DeleteSpaceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete space unauthorized response has a 4xx status code
func (o *DeleteSpaceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete space unauthorized response has a 5xx status code
func (o *DeleteSpaceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete space unauthorized response a status code equal to that given
func (o *DeleteSpaceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete space unauthorized response
func (o *DeleteSpaceUnauthorized) Code() int {
	return 401
}

func (o *DeleteSpaceUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}][%d] deleteSpaceUnauthorized %s", 401, payload)
}

func (o *DeleteSpaceUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}][%d] deleteSpaceUnauthorized %s", 401, payload)
}

func (o *DeleteSpaceUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteSpaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpaceForbidden creates a DeleteSpaceForbidden with default headers values
func NewDeleteSpaceForbidden() *DeleteSpaceForbidden {
	return &DeleteSpaceForbidden{}
}

/*
DeleteSpaceForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteSpaceForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete space forbidden response has a 2xx status code
func (o *DeleteSpaceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete space forbidden response has a 3xx status code
func (o *DeleteSpaceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete space forbidden response has a 4xx status code
func (o *DeleteSpaceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete space forbidden response has a 5xx status code
func (o *DeleteSpaceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete space forbidden response a status code equal to that given
func (o *DeleteSpaceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete space forbidden response
func (o *DeleteSpaceForbidden) Code() int {
	return 403
}

func (o *DeleteSpaceForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}][%d] deleteSpaceForbidden %s", 403, payload)
}

func (o *DeleteSpaceForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}][%d] deleteSpaceForbidden %s", 403, payload)
}

func (o *DeleteSpaceForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteSpaceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpaceNotFound creates a DeleteSpaceNotFound with default headers values
func NewDeleteSpaceNotFound() *DeleteSpaceNotFound {
	return &DeleteSpaceNotFound{}
}

/*
DeleteSpaceNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteSpaceNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete space not found response has a 2xx status code
func (o *DeleteSpaceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete space not found response has a 3xx status code
func (o *DeleteSpaceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete space not found response has a 4xx status code
func (o *DeleteSpaceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete space not found response has a 5xx status code
func (o *DeleteSpaceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete space not found response a status code equal to that given
func (o *DeleteSpaceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete space not found response
func (o *DeleteSpaceNotFound) Code() int {
	return 404
}

func (o *DeleteSpaceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}][%d] deleteSpaceNotFound %s", 404, payload)
}

func (o *DeleteSpaceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}][%d] deleteSpaceNotFound %s", 404, payload)
}

func (o *DeleteSpaceNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteSpaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSpaceInternalServerError creates a DeleteSpaceInternalServerError with default headers values
func NewDeleteSpaceInternalServerError() *DeleteSpaceInternalServerError {
	return &DeleteSpaceInternalServerError{}
}

/*
DeleteSpaceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteSpaceInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete space internal server error response has a 2xx status code
func (o *DeleteSpaceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete space internal server error response has a 3xx status code
func (o *DeleteSpaceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete space internal server error response has a 4xx status code
func (o *DeleteSpaceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete space internal server error response has a 5xx status code
func (o *DeleteSpaceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete space internal server error response a status code equal to that given
func (o *DeleteSpaceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete space internal server error response
func (o *DeleteSpaceInternalServerError) Code() int {
	return 500
}

func (o *DeleteSpaceInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}][%d] deleteSpaceInternalServerError %s", 500, payload)
}

func (o *DeleteSpaceInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}][%d] deleteSpaceInternalServerError %s", 500, payload)
}

func (o *DeleteSpaceInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteSpaceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
