// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package unit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// NewUpdateUnitParams creates a new UpdateUnitParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateUnitParams() *UpdateUnitParams {
	return &UpdateUnitParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateUnitParamsWithTimeout creates a new UpdateUnitParams object
// with the ability to set a timeout on a request.
func NewUpdateUnitParamsWithTimeout(timeout time.Duration) *UpdateUnitParams {
	return &UpdateUnitParams{
		timeout: timeout,
	}
}

// NewUpdateUnitParamsWithContext creates a new UpdateUnitParams object
// with the ability to set a context for a request.
func NewUpdateUnitParamsWithContext(ctx context.Context) *UpdateUnitParams {
	return &UpdateUnitParams{
		Context: ctx,
	}
}

// NewUpdateUnitParamsWithHTTPClient creates a new UpdateUnitParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateUnitParamsWithHTTPClient(client *http.Client) *UpdateUnitParams {
	return &UpdateUnitParams{
		HTTPClient: client,
	}
}

/*
UpdateUnitParams contains all the parameters to send to the API endpoint

	for the update unit operation.

	Typically these are written to a http.Request.
*/
type UpdateUnitParams struct {

	/* RevisionID.

	   Revision ID to restore
	*/
	RevisionID *string

	/* SpaceID.

	   Space ID
	*/
	SpaceID string

	/* Unit.

	   Unit
	*/
	Unit *models.ModelsUnit

	/* UnitID.

	   Unit ID
	*/
	UnitID string

	/* Upgrade.

	   flag upgrade to Upstream Unit HeadRevision
	*/
	Upgrade *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update unit params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateUnitParams) WithDefaults() *UpdateUnitParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update unit params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateUnitParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update unit params
func (o *UpdateUnitParams) WithTimeout(timeout time.Duration) *UpdateUnitParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update unit params
func (o *UpdateUnitParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update unit params
func (o *UpdateUnitParams) WithContext(ctx context.Context) *UpdateUnitParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update unit params
func (o *UpdateUnitParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update unit params
func (o *UpdateUnitParams) WithHTTPClient(client *http.Client) *UpdateUnitParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update unit params
func (o *UpdateUnitParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRevisionID adds the revisionID to the update unit params
func (o *UpdateUnitParams) WithRevisionID(revisionID *string) *UpdateUnitParams {
	o.SetRevisionID(revisionID)
	return o
}

// SetRevisionID adds the revisionId to the update unit params
func (o *UpdateUnitParams) SetRevisionID(revisionID *string) {
	o.RevisionID = revisionID
}

// WithSpaceID adds the spaceID to the update unit params
func (o *UpdateUnitParams) WithSpaceID(spaceID string) *UpdateUnitParams {
	o.SetSpaceID(spaceID)
	return o
}

// SetSpaceID adds the spaceId to the update unit params
func (o *UpdateUnitParams) SetSpaceID(spaceID string) {
	o.SpaceID = spaceID
}

// WithUnit adds the unit to the update unit params
func (o *UpdateUnitParams) WithUnit(unit *models.ModelsUnit) *UpdateUnitParams {
	o.SetUnit(unit)
	return o
}

// SetUnit adds the unit to the update unit params
func (o *UpdateUnitParams) SetUnit(unit *models.ModelsUnit) {
	o.Unit = unit
}

// WithUnitID adds the unitID to the update unit params
func (o *UpdateUnitParams) WithUnitID(unitID string) *UpdateUnitParams {
	o.SetUnitID(unitID)
	return o
}

// SetUnitID adds the unitId to the update unit params
func (o *UpdateUnitParams) SetUnitID(unitID string) {
	o.UnitID = unitID
}

// WithUpgrade adds the upgrade to the update unit params
func (o *UpdateUnitParams) WithUpgrade(upgrade *bool) *UpdateUnitParams {
	o.SetUpgrade(upgrade)
	return o
}

// SetUpgrade adds the upgrade to the update unit params
func (o *UpdateUnitParams) SetUpgrade(upgrade *bool) {
	o.Upgrade = upgrade
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateUnitParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RevisionID != nil {

		// query param revision_id
		var qrRevisionID string

		if o.RevisionID != nil {
			qrRevisionID = *o.RevisionID
		}
		qRevisionID := qrRevisionID
		if qRevisionID != "" {

			if err := r.SetQueryParam("revision_id", qRevisionID); err != nil {
				return err
			}
		}
	}

	// path param space_id
	if err := r.SetPathParam("space_id", o.SpaceID); err != nil {
		return err
	}
	if o.Unit != nil {
		if err := r.SetBodyParam(o.Unit); err != nil {
			return err
		}
	}

	// path param unit_id
	if err := r.SetPathParam("unit_id", o.UnitID); err != nil {
		return err
	}

	if o.Upgrade != nil {

		// query param upgrade
		var qrUpgrade bool

		if o.Upgrade != nil {
			qrUpgrade = *o.Upgrade
		}
		qUpgrade := swag.FormatBool(qrUpgrade)
		if qUpgrade != "" {

			if err := r.SetQueryParam("upgrade", qUpgrade); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
