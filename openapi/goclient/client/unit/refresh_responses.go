// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package unit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// RefreshReader is a Reader for the Refresh structure.
type RefreshReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefreshReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRefreshOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRefreshBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRefreshUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRefreshForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRefreshNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRefreshInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /space/{space_id}/unit/{unit_id}/refresh] Refresh", response, response.Code())
	}
}

// NewRefreshOK creates a RefreshOK with default headers values
func NewRefreshOK() *RefreshOK {
	return &RefreshOK{}
}

/*
RefreshOK describes a response with status code 200, with default header values.

OK
*/
type RefreshOK struct {
	Payload *models.ModelsQueuedOperation
}

// IsSuccess returns true when this refresh o k response has a 2xx status code
func (o *RefreshOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this refresh o k response has a 3xx status code
func (o *RefreshOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh o k response has a 4xx status code
func (o *RefreshOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh o k response has a 5xx status code
func (o *RefreshOK) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh o k response a status code equal to that given
func (o *RefreshOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the refresh o k response
func (o *RefreshOK) Code() int {
	return 200
}

func (o *RefreshOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/refresh][%d] refreshOK %s", 200, payload)
}

func (o *RefreshOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/refresh][%d] refreshOK %s", 200, payload)
}

func (o *RefreshOK) GetPayload() *models.ModelsQueuedOperation {
	return o.Payload
}

func (o *RefreshOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsQueuedOperation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshBadRequest creates a RefreshBadRequest with default headers values
func NewRefreshBadRequest() *RefreshBadRequest {
	return &RefreshBadRequest{}
}

/*
RefreshBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RefreshBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this refresh bad request response has a 2xx status code
func (o *RefreshBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh bad request response has a 3xx status code
func (o *RefreshBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh bad request response has a 4xx status code
func (o *RefreshBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh bad request response has a 5xx status code
func (o *RefreshBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh bad request response a status code equal to that given
func (o *RefreshBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the refresh bad request response
func (o *RefreshBadRequest) Code() int {
	return 400
}

func (o *RefreshBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/refresh][%d] refreshBadRequest %s", 400, payload)
}

func (o *RefreshBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/refresh][%d] refreshBadRequest %s", 400, payload)
}

func (o *RefreshBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *RefreshBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshUnauthorized creates a RefreshUnauthorized with default headers values
func NewRefreshUnauthorized() *RefreshUnauthorized {
	return &RefreshUnauthorized{}
}

/*
RefreshUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RefreshUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this refresh unauthorized response has a 2xx status code
func (o *RefreshUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh unauthorized response has a 3xx status code
func (o *RefreshUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh unauthorized response has a 4xx status code
func (o *RefreshUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh unauthorized response has a 5xx status code
func (o *RefreshUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh unauthorized response a status code equal to that given
func (o *RefreshUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the refresh unauthorized response
func (o *RefreshUnauthorized) Code() int {
	return 401
}

func (o *RefreshUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/refresh][%d] refreshUnauthorized %s", 401, payload)
}

func (o *RefreshUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/refresh][%d] refreshUnauthorized %s", 401, payload)
}

func (o *RefreshUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *RefreshUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshForbidden creates a RefreshForbidden with default headers values
func NewRefreshForbidden() *RefreshForbidden {
	return &RefreshForbidden{}
}

/*
RefreshForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RefreshForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this refresh forbidden response has a 2xx status code
func (o *RefreshForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh forbidden response has a 3xx status code
func (o *RefreshForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh forbidden response has a 4xx status code
func (o *RefreshForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh forbidden response has a 5xx status code
func (o *RefreshForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh forbidden response a status code equal to that given
func (o *RefreshForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the refresh forbidden response
func (o *RefreshForbidden) Code() int {
	return 403
}

func (o *RefreshForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/refresh][%d] refreshForbidden %s", 403, payload)
}

func (o *RefreshForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/refresh][%d] refreshForbidden %s", 403, payload)
}

func (o *RefreshForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *RefreshForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshNotFound creates a RefreshNotFound with default headers values
func NewRefreshNotFound() *RefreshNotFound {
	return &RefreshNotFound{}
}

/*
RefreshNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RefreshNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this refresh not found response has a 2xx status code
func (o *RefreshNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh not found response has a 3xx status code
func (o *RefreshNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh not found response has a 4xx status code
func (o *RefreshNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh not found response has a 5xx status code
func (o *RefreshNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh not found response a status code equal to that given
func (o *RefreshNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the refresh not found response
func (o *RefreshNotFound) Code() int {
	return 404
}

func (o *RefreshNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/refresh][%d] refreshNotFound %s", 404, payload)
}

func (o *RefreshNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/refresh][%d] refreshNotFound %s", 404, payload)
}

func (o *RefreshNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *RefreshNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshInternalServerError creates a RefreshInternalServerError with default headers values
func NewRefreshInternalServerError() *RefreshInternalServerError {
	return &RefreshInternalServerError{}
}

/*
RefreshInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RefreshInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this refresh internal server error response has a 2xx status code
func (o *RefreshInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh internal server error response has a 3xx status code
func (o *RefreshInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh internal server error response has a 4xx status code
func (o *RefreshInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh internal server error response has a 5xx status code
func (o *RefreshInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this refresh internal server error response a status code equal to that given
func (o *RefreshInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the refresh internal server error response
func (o *RefreshInternalServerError) Code() int {
	return 500
}

func (o *RefreshInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/refresh][%d] refreshInternalServerError %s", 500, payload)
}

func (o *RefreshInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/refresh][%d] refreshInternalServerError %s", 500, payload)
}

func (o *RefreshInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *RefreshInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
