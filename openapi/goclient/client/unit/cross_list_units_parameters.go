// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package unit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCrossListUnitsParams creates a new CrossListUnitsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCrossListUnitsParams() *CrossListUnitsParams {
	return &CrossListUnitsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCrossListUnitsParamsWithTimeout creates a new CrossListUnitsParams object
// with the ability to set a timeout on a request.
func NewCrossListUnitsParamsWithTimeout(timeout time.Duration) *CrossListUnitsParams {
	return &CrossListUnitsParams{
		timeout: timeout,
	}
}

// NewCrossListUnitsParamsWithContext creates a new CrossListUnitsParams object
// with the ability to set a context for a request.
func NewCrossListUnitsParamsWithContext(ctx context.Context) *CrossListUnitsParams {
	return &CrossListUnitsParams{
		Context: ctx,
	}
}

// NewCrossListUnitsParamsWithHTTPClient creates a new CrossListUnitsParams object
// with the ability to set a custom HTTPClient for a request.
func NewCrossListUnitsParamsWithHTTPClient(client *http.Client) *CrossListUnitsParams {
	return &CrossListUnitsParams{
		HTTPClient: client,
	}
}

/*
CrossListUnitsParams contains all the parameters to send to the API endpoint

	for the cross list units operation.

	Typically these are written to a http.Request.
*/
type CrossListUnitsParams struct {

	/* Include.

	   include filter: The specified string is an expression for the purpose of expanding the related entities of the list of Units returned. The attribute names are case-sensitive and PascalCase, as in the JSON encoding. Supported attributes for Unit are `OrganizationID`, `SpaceID`, `SetID`, `TargetID`, `UpstreamUnitID`, `UpstreamSpaceID`, `HeadRevisionNum`, `LastAppliedRevisionNum`, `LiveRevisionNum`, `UnitEventID`. The whole string must be query-encoded and in comma-separated list format.
	*/
	Include *string

	/* ResourceType.

	   Resource type: Resource type to match for the desired ToolchainType, for example apps/v1/Deployment
	*/
	ResourceType *string

	/* Where.

	   Where filter: The specified string is an expression for the purpose of filtering the list of Units returned by Unit metadata. The expression syntax was inspired by SQL. It supports conjunctions using `AND` of relational expressions of the form *attribute* *operator* *attribute_or_literal*. The attribute names are case-sensitive and PascalCase, as in the JSON encoding. Supported attributes for Unit are `CreatedAt`, `UpdatedAt`, `LastActionAt`, `DisplayName`, `Slug`, `OrganizationID`, `SpaceID`, `UnitID`, `SetID`, `TargetID`, `UpstreamOrganizationID`, `UpstreamSpaceID`, `UpstreamUnitID`, `UpstreamRevisionNum`, `HeadRevisionNum`, `LastAppliedRevisionNum`, `LiveRevisionNum`, `PreviousLiveRevisionNum`, `ToolchainType`, and `LastChangeDescription`. `Labels` and `ApplyGates` are supported, using a dot notation to specify a particular map key, as in `Labels.tier = 'Backend'`. `ApprovedBy` is supported, using a `?` operator to match any element of the array, as in `ApprovedBy ? '7c61626f-ddbe-41af-93f6-b69f4ab6d308'`. `LEN()` may be applied to `ApplyGates` and `ApprovedBy`, as in `LEN(ApplyGates) > 0`. Strings and integers support the following operators: `<`, `>`, `<=`, `>=`, `=`, `!=`. UUIDs and boolean attributes support equality and inequality only. String literals are quoted with single quotes, such as `'string'`. UUID and time literals must be quoted as string literals, as in the preceding `ApprovedBy` example. Time literals use the same form as when serialized as JSON, such as: `CreatedAt > '2025-02-18T23:16:34'`. Integer and boolean literals are also supported for attributes of those types. An example conjunction is: `CreatedAt >= '2025-01-07' AND DisplayName = 'testunit' AND Labels.mykey = 'myvalue'`. Finding all units created by cloning can be done using the expression `UpstreamRevisionNum > 0`. Clones of a specific unit can be found by additionally filtering based on `UpstreamUnitID`. Unapplied units can be found using `LiveRevisionNum = 0`. Units with unapplied changes can be found with `HeadRevisionNum > LiveRevisionNum`. The whole string must be query-encoded.
	*/
	Where *string

	/* WhereData.

	   Where data filter: The specified string is an expression for the purpose of evaluating whether the configuration data matches the filter. The expression syntax was inspired by SQL. It supports conjunctions using `AND` of relational expressions of the form *path* *operator* *literal*. The path specifications are dot-separated, for both map fields and array indices, as in `spec.template.spec.containers.0.image = 'ghcr.io/headlamp-k8s/headlamp:latest' AND spec.replicas > 1`. Strings and integers support the following operators: `<`, `>`, `<=`, `>=`, `=`, `!=`. Boolean values support equality and inequality only. String literals are quoted with single quotes, such as `'string'`. Integer and boolean literals are also supported for attributes of those types. The whole string must be query-encoded.
	*/
	WhereData *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cross list units params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CrossListUnitsParams) WithDefaults() *CrossListUnitsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cross list units params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CrossListUnitsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the cross list units params
func (o *CrossListUnitsParams) WithTimeout(timeout time.Duration) *CrossListUnitsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cross list units params
func (o *CrossListUnitsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cross list units params
func (o *CrossListUnitsParams) WithContext(ctx context.Context) *CrossListUnitsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cross list units params
func (o *CrossListUnitsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cross list units params
func (o *CrossListUnitsParams) WithHTTPClient(client *http.Client) *CrossListUnitsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cross list units params
func (o *CrossListUnitsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInclude adds the include to the cross list units params
func (o *CrossListUnitsParams) WithInclude(include *string) *CrossListUnitsParams {
	o.SetInclude(include)
	return o
}

// SetInclude adds the include to the cross list units params
func (o *CrossListUnitsParams) SetInclude(include *string) {
	o.Include = include
}

// WithResourceType adds the resourceType to the cross list units params
func (o *CrossListUnitsParams) WithResourceType(resourceType *string) *CrossListUnitsParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the cross list units params
func (o *CrossListUnitsParams) SetResourceType(resourceType *string) {
	o.ResourceType = resourceType
}

// WithWhere adds the where to the cross list units params
func (o *CrossListUnitsParams) WithWhere(where *string) *CrossListUnitsParams {
	o.SetWhere(where)
	return o
}

// SetWhere adds the where to the cross list units params
func (o *CrossListUnitsParams) SetWhere(where *string) {
	o.Where = where
}

// WithWhereData adds the whereData to the cross list units params
func (o *CrossListUnitsParams) WithWhereData(whereData *string) *CrossListUnitsParams {
	o.SetWhereData(whereData)
	return o
}

// SetWhereData adds the whereData to the cross list units params
func (o *CrossListUnitsParams) SetWhereData(whereData *string) {
	o.WhereData = whereData
}

// WriteToRequest writes these params to a swagger request
func (o *CrossListUnitsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Include != nil {

		// query param include
		var qrInclude string

		if o.Include != nil {
			qrInclude = *o.Include
		}
		qInclude := qrInclude
		if qInclude != "" {

			if err := r.SetQueryParam("include", qInclude); err != nil {
				return err
			}
		}
	}

	if o.ResourceType != nil {

		// query param resource_type
		var qrResourceType string

		if o.ResourceType != nil {
			qrResourceType = *o.ResourceType
		}
		qResourceType := qrResourceType
		if qResourceType != "" {

			if err := r.SetQueryParam("resource_type", qResourceType); err != nil {
				return err
			}
		}
	}

	if o.Where != nil {

		// query param where
		var qrWhere string

		if o.Where != nil {
			qrWhere = *o.Where
		}
		qWhere := qrWhere
		if qWhere != "" {

			if err := r.SetQueryParam("where", qWhere); err != nil {
				return err
			}
		}
	}

	if o.WhereData != nil {

		// query param where_data
		var qrWhereData string

		if o.WhereData != nil {
			qrWhereData = *o.WhereData
		}
		qWhereData := qrWhereData
		if qWhereData != "" {

			if err := r.SetQueryParam("where_data", qWhereData); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
