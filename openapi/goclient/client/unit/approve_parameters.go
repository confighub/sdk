// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package unit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewApproveParams creates a new ApproveParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewApproveParams() *ApproveParams {
	return &ApproveParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewApproveParamsWithTimeout creates a new ApproveParams object
// with the ability to set a timeout on a request.
func NewApproveParamsWithTimeout(timeout time.Duration) *ApproveParams {
	return &ApproveParams{
		timeout: timeout,
	}
}

// NewApproveParamsWithContext creates a new ApproveParams object
// with the ability to set a context for a request.
func NewApproveParamsWithContext(ctx context.Context) *ApproveParams {
	return &ApproveParams{
		Context: ctx,
	}
}

// NewApproveParamsWithHTTPClient creates a new ApproveParams object
// with the ability to set a custom HTTPClient for a request.
func NewApproveParamsWithHTTPClient(client *http.Client) *ApproveParams {
	return &ApproveParams{
		HTTPClient: client,
	}
}

/*
ApproveParams contains all the parameters to send to the API endpoint

	for the approve operation.

	Typically these are written to a http.Request.
*/
type ApproveParams struct {

	/* SpaceID.

	   Space ID
	*/
	SpaceID string

	/* UnitID.

	   Unit ID
	*/
	UnitID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the approve params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApproveParams) WithDefaults() *ApproveParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the approve params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApproveParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the approve params
func (o *ApproveParams) WithTimeout(timeout time.Duration) *ApproveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the approve params
func (o *ApproveParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the approve params
func (o *ApproveParams) WithContext(ctx context.Context) *ApproveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the approve params
func (o *ApproveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the approve params
func (o *ApproveParams) WithHTTPClient(client *http.Client) *ApproveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the approve params
func (o *ApproveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSpaceID adds the spaceID to the approve params
func (o *ApproveParams) WithSpaceID(spaceID string) *ApproveParams {
	o.SetSpaceID(spaceID)
	return o
}

// SetSpaceID adds the spaceId to the approve params
func (o *ApproveParams) SetSpaceID(spaceID string) {
	o.SpaceID = spaceID
}

// WithUnitID adds the unitID to the approve params
func (o *ApproveParams) WithUnitID(unitID string) *ApproveParams {
	o.SetUnitID(unitID)
	return o
}

// SetUnitID adds the unitId to the approve params
func (o *ApproveParams) SetUnitID(unitID string) {
	o.UnitID = unitID
}

// WriteToRequest writes these params to a swagger request
func (o *ApproveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param space_id
	if err := r.SetPathParam("space_id", o.SpaceID); err != nil {
		return err
	}

	// path param unit_id
	if err := r.SetPathParam("unit_id", o.UnitID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
