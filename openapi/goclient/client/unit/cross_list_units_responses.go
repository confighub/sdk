// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package unit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// CrossListUnitsReader is a Reader for the CrossListUnits structure.
type CrossListUnitsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CrossListUnitsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCrossListUnitsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCrossListUnitsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCrossListUnitsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCrossListUnitsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCrossListUnitsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /unit] CrossListUnits", response, response.Code())
	}
}

// NewCrossListUnitsOK creates a CrossListUnitsOK with default headers values
func NewCrossListUnitsOK() *CrossListUnitsOK {
	return &CrossListUnitsOK{}
}

/*
CrossListUnitsOK describes a response with status code 200, with default header values.

OK
*/
type CrossListUnitsOK struct {
	Payload []*models.ModelsExtendedUnit
}

// IsSuccess returns true when this cross list units o k response has a 2xx status code
func (o *CrossListUnitsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cross list units o k response has a 3xx status code
func (o *CrossListUnitsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cross list units o k response has a 4xx status code
func (o *CrossListUnitsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cross list units o k response has a 5xx status code
func (o *CrossListUnitsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cross list units o k response a status code equal to that given
func (o *CrossListUnitsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cross list units o k response
func (o *CrossListUnitsOK) Code() int {
	return 200
}

func (o *CrossListUnitsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /unit][%d] crossListUnitsOK %s", 200, payload)
}

func (o *CrossListUnitsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /unit][%d] crossListUnitsOK %s", 200, payload)
}

func (o *CrossListUnitsOK) GetPayload() []*models.ModelsExtendedUnit {
	return o.Payload
}

func (o *CrossListUnitsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCrossListUnitsBadRequest creates a CrossListUnitsBadRequest with default headers values
func NewCrossListUnitsBadRequest() *CrossListUnitsBadRequest {
	return &CrossListUnitsBadRequest{}
}

/*
CrossListUnitsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CrossListUnitsBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this cross list units bad request response has a 2xx status code
func (o *CrossListUnitsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cross list units bad request response has a 3xx status code
func (o *CrossListUnitsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cross list units bad request response has a 4xx status code
func (o *CrossListUnitsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cross list units bad request response has a 5xx status code
func (o *CrossListUnitsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cross list units bad request response a status code equal to that given
func (o *CrossListUnitsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cross list units bad request response
func (o *CrossListUnitsBadRequest) Code() int {
	return 400
}

func (o *CrossListUnitsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /unit][%d] crossListUnitsBadRequest %s", 400, payload)
}

func (o *CrossListUnitsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /unit][%d] crossListUnitsBadRequest %s", 400, payload)
}

func (o *CrossListUnitsBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CrossListUnitsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCrossListUnitsUnauthorized creates a CrossListUnitsUnauthorized with default headers values
func NewCrossListUnitsUnauthorized() *CrossListUnitsUnauthorized {
	return &CrossListUnitsUnauthorized{}
}

/*
CrossListUnitsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CrossListUnitsUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this cross list units unauthorized response has a 2xx status code
func (o *CrossListUnitsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cross list units unauthorized response has a 3xx status code
func (o *CrossListUnitsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cross list units unauthorized response has a 4xx status code
func (o *CrossListUnitsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cross list units unauthorized response has a 5xx status code
func (o *CrossListUnitsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cross list units unauthorized response a status code equal to that given
func (o *CrossListUnitsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the cross list units unauthorized response
func (o *CrossListUnitsUnauthorized) Code() int {
	return 401
}

func (o *CrossListUnitsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /unit][%d] crossListUnitsUnauthorized %s", 401, payload)
}

func (o *CrossListUnitsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /unit][%d] crossListUnitsUnauthorized %s", 401, payload)
}

func (o *CrossListUnitsUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CrossListUnitsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCrossListUnitsForbidden creates a CrossListUnitsForbidden with default headers values
func NewCrossListUnitsForbidden() *CrossListUnitsForbidden {
	return &CrossListUnitsForbidden{}
}

/*
CrossListUnitsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CrossListUnitsForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this cross list units forbidden response has a 2xx status code
func (o *CrossListUnitsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cross list units forbidden response has a 3xx status code
func (o *CrossListUnitsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cross list units forbidden response has a 4xx status code
func (o *CrossListUnitsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cross list units forbidden response has a 5xx status code
func (o *CrossListUnitsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cross list units forbidden response a status code equal to that given
func (o *CrossListUnitsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cross list units forbidden response
func (o *CrossListUnitsForbidden) Code() int {
	return 403
}

func (o *CrossListUnitsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /unit][%d] crossListUnitsForbidden %s", 403, payload)
}

func (o *CrossListUnitsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /unit][%d] crossListUnitsForbidden %s", 403, payload)
}

func (o *CrossListUnitsForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CrossListUnitsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCrossListUnitsInternalServerError creates a CrossListUnitsInternalServerError with default headers values
func NewCrossListUnitsInternalServerError() *CrossListUnitsInternalServerError {
	return &CrossListUnitsInternalServerError{}
}

/*
CrossListUnitsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CrossListUnitsInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this cross list units internal server error response has a 2xx status code
func (o *CrossListUnitsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cross list units internal server error response has a 3xx status code
func (o *CrossListUnitsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cross list units internal server error response has a 4xx status code
func (o *CrossListUnitsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cross list units internal server error response has a 5xx status code
func (o *CrossListUnitsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cross list units internal server error response a status code equal to that given
func (o *CrossListUnitsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cross list units internal server error response
func (o *CrossListUnitsInternalServerError) Code() int {
	return 500
}

func (o *CrossListUnitsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /unit][%d] crossListUnitsInternalServerError %s", 500, payload)
}

func (o *CrossListUnitsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /unit][%d] crossListUnitsInternalServerError %s", 500, payload)
}

func (o *CrossListUnitsInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CrossListUnitsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
