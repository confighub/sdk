// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package unit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// ApplyReader is a Reader for the Apply structure.
type ApplyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApplyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewApplyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewApplyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewApplyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewApplyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewApplyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewApplyUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewApplyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /space/{space_id}/unit/{unit_id}/apply] Apply", response, response.Code())
	}
}

// NewApplyOK creates a ApplyOK with default headers values
func NewApplyOK() *ApplyOK {
	return &ApplyOK{}
}

/*
ApplyOK describes a response with status code 200, with default header values.

OK
*/
type ApplyOK struct {
	Payload *models.ModelsQueuedOperation
}

// IsSuccess returns true when this apply o k response has a 2xx status code
func (o *ApplyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this apply o k response has a 3xx status code
func (o *ApplyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply o k response has a 4xx status code
func (o *ApplyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this apply o k response has a 5xx status code
func (o *ApplyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this apply o k response a status code equal to that given
func (o *ApplyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the apply o k response
func (o *ApplyOK) Code() int {
	return 200
}

func (o *ApplyOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/apply][%d] applyOK %s", 200, payload)
}

func (o *ApplyOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/apply][%d] applyOK %s", 200, payload)
}

func (o *ApplyOK) GetPayload() *models.ModelsQueuedOperation {
	return o.Payload
}

func (o *ApplyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsQueuedOperation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyBadRequest creates a ApplyBadRequest with default headers values
func NewApplyBadRequest() *ApplyBadRequest {
	return &ApplyBadRequest{}
}

/*
ApplyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ApplyBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this apply bad request response has a 2xx status code
func (o *ApplyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply bad request response has a 3xx status code
func (o *ApplyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply bad request response has a 4xx status code
func (o *ApplyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply bad request response has a 5xx status code
func (o *ApplyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this apply bad request response a status code equal to that given
func (o *ApplyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the apply bad request response
func (o *ApplyBadRequest) Code() int {
	return 400
}

func (o *ApplyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/apply][%d] applyBadRequest %s", 400, payload)
}

func (o *ApplyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/apply][%d] applyBadRequest %s", 400, payload)
}

func (o *ApplyBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ApplyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyUnauthorized creates a ApplyUnauthorized with default headers values
func NewApplyUnauthorized() *ApplyUnauthorized {
	return &ApplyUnauthorized{}
}

/*
ApplyUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ApplyUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this apply unauthorized response has a 2xx status code
func (o *ApplyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply unauthorized response has a 3xx status code
func (o *ApplyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply unauthorized response has a 4xx status code
func (o *ApplyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply unauthorized response has a 5xx status code
func (o *ApplyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this apply unauthorized response a status code equal to that given
func (o *ApplyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the apply unauthorized response
func (o *ApplyUnauthorized) Code() int {
	return 401
}

func (o *ApplyUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/apply][%d] applyUnauthorized %s", 401, payload)
}

func (o *ApplyUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/apply][%d] applyUnauthorized %s", 401, payload)
}

func (o *ApplyUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ApplyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyForbidden creates a ApplyForbidden with default headers values
func NewApplyForbidden() *ApplyForbidden {
	return &ApplyForbidden{}
}

/*
ApplyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ApplyForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this apply forbidden response has a 2xx status code
func (o *ApplyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply forbidden response has a 3xx status code
func (o *ApplyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply forbidden response has a 4xx status code
func (o *ApplyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply forbidden response has a 5xx status code
func (o *ApplyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this apply forbidden response a status code equal to that given
func (o *ApplyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the apply forbidden response
func (o *ApplyForbidden) Code() int {
	return 403
}

func (o *ApplyForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/apply][%d] applyForbidden %s", 403, payload)
}

func (o *ApplyForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/apply][%d] applyForbidden %s", 403, payload)
}

func (o *ApplyForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ApplyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyNotFound creates a ApplyNotFound with default headers values
func NewApplyNotFound() *ApplyNotFound {
	return &ApplyNotFound{}
}

/*
ApplyNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ApplyNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this apply not found response has a 2xx status code
func (o *ApplyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply not found response has a 3xx status code
func (o *ApplyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply not found response has a 4xx status code
func (o *ApplyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply not found response has a 5xx status code
func (o *ApplyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this apply not found response a status code equal to that given
func (o *ApplyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the apply not found response
func (o *ApplyNotFound) Code() int {
	return 404
}

func (o *ApplyNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/apply][%d] applyNotFound %s", 404, payload)
}

func (o *ApplyNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/apply][%d] applyNotFound %s", 404, payload)
}

func (o *ApplyNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ApplyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyUnprocessableEntity creates a ApplyUnprocessableEntity with default headers values
func NewApplyUnprocessableEntity() *ApplyUnprocessableEntity {
	return &ApplyUnprocessableEntity{}
}

/*
ApplyUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type ApplyUnprocessableEntity struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this apply unprocessable entity response has a 2xx status code
func (o *ApplyUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply unprocessable entity response has a 3xx status code
func (o *ApplyUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply unprocessable entity response has a 4xx status code
func (o *ApplyUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this apply unprocessable entity response has a 5xx status code
func (o *ApplyUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this apply unprocessable entity response a status code equal to that given
func (o *ApplyUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the apply unprocessable entity response
func (o *ApplyUnprocessableEntity) Code() int {
	return 422
}

func (o *ApplyUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/apply][%d] applyUnprocessableEntity %s", 422, payload)
}

func (o *ApplyUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/apply][%d] applyUnprocessableEntity %s", 422, payload)
}

func (o *ApplyUnprocessableEntity) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ApplyUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplyInternalServerError creates a ApplyInternalServerError with default headers values
func NewApplyInternalServerError() *ApplyInternalServerError {
	return &ApplyInternalServerError{}
}

/*
ApplyInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ApplyInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this apply internal server error response has a 2xx status code
func (o *ApplyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this apply internal server error response has a 3xx status code
func (o *ApplyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this apply internal server error response has a 4xx status code
func (o *ApplyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this apply internal server error response has a 5xx status code
func (o *ApplyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this apply internal server error response a status code equal to that given
func (o *ApplyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the apply internal server error response
func (o *ApplyInternalServerError) Code() int {
	return 500
}

func (o *ApplyInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/apply][%d] applyInternalServerError %s", 500, payload)
}

func (o *ApplyInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/unit/{unit_id}/apply][%d] applyInternalServerError %s", 500, payload)
}

func (o *ApplyInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ApplyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
