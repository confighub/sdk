// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package unit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// UpdateUnitReader is a Reader for the UpdateUnit structure.
type UpdateUnitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUnitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUnitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUnitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateUnitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUnitForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUnitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateUnitConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateUnitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /space/{space_id}/unit/{unit_id}] UpdateUnit", response, response.Code())
	}
}

// NewUpdateUnitOK creates a UpdateUnitOK with default headers values
func NewUpdateUnitOK() *UpdateUnitOK {
	return &UpdateUnitOK{}
}

/*
UpdateUnitOK describes a response with status code 200, with default header values.

OK
*/
type UpdateUnitOK struct {
	Payload *models.ModelsUnit
}

// IsSuccess returns true when this update unit o k response has a 2xx status code
func (o *UpdateUnitOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update unit o k response has a 3xx status code
func (o *UpdateUnitOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update unit o k response has a 4xx status code
func (o *UpdateUnitOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update unit o k response has a 5xx status code
func (o *UpdateUnitOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update unit o k response a status code equal to that given
func (o *UpdateUnitOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update unit o k response
func (o *UpdateUnitOK) Code() int {
	return 200
}

func (o *UpdateUnitOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/unit/{unit_id}][%d] updateUnitOK %s", 200, payload)
}

func (o *UpdateUnitOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/unit/{unit_id}][%d] updateUnitOK %s", 200, payload)
}

func (o *UpdateUnitOK) GetPayload() *models.ModelsUnit {
	return o.Payload
}

func (o *UpdateUnitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsUnit)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUnitBadRequest creates a UpdateUnitBadRequest with default headers values
func NewUpdateUnitBadRequest() *UpdateUnitBadRequest {
	return &UpdateUnitBadRequest{}
}

/*
UpdateUnitBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateUnitBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update unit bad request response has a 2xx status code
func (o *UpdateUnitBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update unit bad request response has a 3xx status code
func (o *UpdateUnitBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update unit bad request response has a 4xx status code
func (o *UpdateUnitBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update unit bad request response has a 5xx status code
func (o *UpdateUnitBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update unit bad request response a status code equal to that given
func (o *UpdateUnitBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update unit bad request response
func (o *UpdateUnitBadRequest) Code() int {
	return 400
}

func (o *UpdateUnitBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/unit/{unit_id}][%d] updateUnitBadRequest %s", 400, payload)
}

func (o *UpdateUnitBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/unit/{unit_id}][%d] updateUnitBadRequest %s", 400, payload)
}

func (o *UpdateUnitBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateUnitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUnitUnauthorized creates a UpdateUnitUnauthorized with default headers values
func NewUpdateUnitUnauthorized() *UpdateUnitUnauthorized {
	return &UpdateUnitUnauthorized{}
}

/*
UpdateUnitUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateUnitUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update unit unauthorized response has a 2xx status code
func (o *UpdateUnitUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update unit unauthorized response has a 3xx status code
func (o *UpdateUnitUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update unit unauthorized response has a 4xx status code
func (o *UpdateUnitUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update unit unauthorized response has a 5xx status code
func (o *UpdateUnitUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update unit unauthorized response a status code equal to that given
func (o *UpdateUnitUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update unit unauthorized response
func (o *UpdateUnitUnauthorized) Code() int {
	return 401
}

func (o *UpdateUnitUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/unit/{unit_id}][%d] updateUnitUnauthorized %s", 401, payload)
}

func (o *UpdateUnitUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/unit/{unit_id}][%d] updateUnitUnauthorized %s", 401, payload)
}

func (o *UpdateUnitUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateUnitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUnitForbidden creates a UpdateUnitForbidden with default headers values
func NewUpdateUnitForbidden() *UpdateUnitForbidden {
	return &UpdateUnitForbidden{}
}

/*
UpdateUnitForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateUnitForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update unit forbidden response has a 2xx status code
func (o *UpdateUnitForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update unit forbidden response has a 3xx status code
func (o *UpdateUnitForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update unit forbidden response has a 4xx status code
func (o *UpdateUnitForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update unit forbidden response has a 5xx status code
func (o *UpdateUnitForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update unit forbidden response a status code equal to that given
func (o *UpdateUnitForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update unit forbidden response
func (o *UpdateUnitForbidden) Code() int {
	return 403
}

func (o *UpdateUnitForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/unit/{unit_id}][%d] updateUnitForbidden %s", 403, payload)
}

func (o *UpdateUnitForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/unit/{unit_id}][%d] updateUnitForbidden %s", 403, payload)
}

func (o *UpdateUnitForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateUnitForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUnitNotFound creates a UpdateUnitNotFound with default headers values
func NewUpdateUnitNotFound() *UpdateUnitNotFound {
	return &UpdateUnitNotFound{}
}

/*
UpdateUnitNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateUnitNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update unit not found response has a 2xx status code
func (o *UpdateUnitNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update unit not found response has a 3xx status code
func (o *UpdateUnitNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update unit not found response has a 4xx status code
func (o *UpdateUnitNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update unit not found response has a 5xx status code
func (o *UpdateUnitNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update unit not found response a status code equal to that given
func (o *UpdateUnitNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update unit not found response
func (o *UpdateUnitNotFound) Code() int {
	return 404
}

func (o *UpdateUnitNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/unit/{unit_id}][%d] updateUnitNotFound %s", 404, payload)
}

func (o *UpdateUnitNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/unit/{unit_id}][%d] updateUnitNotFound %s", 404, payload)
}

func (o *UpdateUnitNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateUnitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUnitConflict creates a UpdateUnitConflict with default headers values
func NewUpdateUnitConflict() *UpdateUnitConflict {
	return &UpdateUnitConflict{}
}

/*
UpdateUnitConflict describes a response with status code 409, with default header values.

Config data changed
*/
type UpdateUnitConflict struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update unit conflict response has a 2xx status code
func (o *UpdateUnitConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update unit conflict response has a 3xx status code
func (o *UpdateUnitConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update unit conflict response has a 4xx status code
func (o *UpdateUnitConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update unit conflict response has a 5xx status code
func (o *UpdateUnitConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update unit conflict response a status code equal to that given
func (o *UpdateUnitConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update unit conflict response
func (o *UpdateUnitConflict) Code() int {
	return 409
}

func (o *UpdateUnitConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/unit/{unit_id}][%d] updateUnitConflict %s", 409, payload)
}

func (o *UpdateUnitConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/unit/{unit_id}][%d] updateUnitConflict %s", 409, payload)
}

func (o *UpdateUnitConflict) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateUnitConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUnitInternalServerError creates a UpdateUnitInternalServerError with default headers values
func NewUpdateUnitInternalServerError() *UpdateUnitInternalServerError {
	return &UpdateUnitInternalServerError{}
}

/*
UpdateUnitInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateUnitInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update unit internal server error response has a 2xx status code
func (o *UpdateUnitInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update unit internal server error response has a 3xx status code
func (o *UpdateUnitInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update unit internal server error response has a 4xx status code
func (o *UpdateUnitInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update unit internal server error response has a 5xx status code
func (o *UpdateUnitInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update unit internal server error response a status code equal to that given
func (o *UpdateUnitInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update unit internal server error response
func (o *UpdateUnitInternalServerError) Code() int {
	return 500
}

func (o *UpdateUnitInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/unit/{unit_id}][%d] updateUnitInternalServerError %s", 500, payload)
}

func (o *UpdateUnitInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/unit/{unit_id}][%d] updateUnitInternalServerError %s", 500, payload)
}

func (o *UpdateUnitInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateUnitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
