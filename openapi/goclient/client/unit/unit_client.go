// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package unit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new unit API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new unit API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new unit API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for unit API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Apply(params *ApplyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplyOK, error)

	Approve(params *ApproveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApproveOK, error)

	BulkUpgradeUnit(params *BulkUpgradeUnitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkUpgradeUnitOK, error)

	CreateUnit(params *CreateUnitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUnitOK, error)

	CrossListUnits(params *CrossListUnitsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CrossListUnitsOK, error)

	DeleteUnit(params *DeleteUnitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUnitOK, error)

	Destroy(params *DestroyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DestroyOK, error)

	GetUnit(params *GetUnitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUnitOK, error)

	GetUnitExtended(params *GetUnitExtendedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUnitExtendedOK, error)

	Import(params *ImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportOK, error)

	ListExtendedUnits(params *ListExtendedUnitsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListExtendedUnitsOK, error)

	ListUnits(params *ListUnitsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUnitsOK, error)

	Refresh(params *RefreshParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshOK, error)

	UpdateUnit(params *UpdateUnitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUnitOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Apply applies a unit configuration

Triggers an apply operation using the config data to a Bridge Worker
*/
func (a *Client) Apply(params *ApplyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApplyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Apply",
		Method:             "POST",
		PathPattern:        "/space/{space_id}/unit/{unit_id}/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Apply: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Approve approves a unit configuration

Record that the user invoking this operation approves the configuration data
*/
func (a *Client) Approve(params *ApproveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApproveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApproveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Approve",
		Method:             "POST",
		PathPattern:        "/space/{space_id}/unit/{unit_id}/approve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApproveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApproveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Approve: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkUpgradeUnit bulks upgrades a given unit to downstream units

Bulk Upgrades a given Unit for upgrading downstream Units
*/
func (a *Client) BulkUpgradeUnit(params *BulkUpgradeUnitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkUpgradeUnitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkUpgradeUnitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BulkUpgradeUnit",
		Method:             "PUT",
		PathPattern:        "/space/{space_id}/unit/{unit_id}/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkUpgradeUnitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkUpgradeUnitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BulkUpgradeUnit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateUnit creates builds a unit

Create builds a Unit
*/
func (a *Client) CreateUnit(params *CreateUnitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUnitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUnitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateUnit",
		Method:             "POST",
		PathPattern:        "/space/{space_id}/unit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUnitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUnitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateUnit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CrossListUnits crosses list units retrieves a list of units across spaces

CrossListUnits retrieves a list of Units across spaces in the Organization
*/
func (a *Client) CrossListUnits(params *CrossListUnitsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CrossListUnitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCrossListUnitsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CrossListUnits",
		Method:             "GET",
		PathPattern:        "/unit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CrossListUnitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CrossListUnitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CrossListUnits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUnit deletes a unit by ID

Deletes a Unit by ID
*/
func (a *Client) DeleteUnit(params *DeleteUnitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUnitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUnitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUnit",
		Method:             "DELETE",
		PathPattern:        "/space/{space_id}/unit/{unit_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUnitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUnitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUnit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Destroy destroys a unit configuration

Triggers a destroy operation using the config data to a Bridge Worker
*/
func (a *Client) Destroy(params *DestroyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DestroyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestroyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Destroy",
		Method:             "POST",
		PathPattern:        "/space/{space_id}/unit/{unit_id}/destroy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DestroyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DestroyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Destroy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUnit gets retrieves a unit

Get retrieves a Unit
*/
func (a *Client) GetUnit(params *GetUnitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUnitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUnitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUnit",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/unit/{unit_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUnitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUnitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUnit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUnitExtended gets extended retrieves extended information about a unit

GetExtended retrieves extended information about a Unit
*/
func (a *Client) GetUnitExtended(params *GetUnitExtendedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUnitExtendedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUnitExtendedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUnitExtended",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/unit/{unit_id}/extended",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUnitExtendedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUnitExtendedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUnitExtended: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Import imports a configuration unit

Triggers an import operation using the config data to a Bridge Worker
*/
func (a *Client) Import(params *ImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Import",
		Method:             "POST",
		PathPattern:        "/space/{space_id}/unit/{unit_id}/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Import: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListExtendedUnits lists retrieves a list of extended units

List retrieves a list of extended Units enriched with other entity data
*/
func (a *Client) ListExtendedUnits(params *ListExtendedUnitsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListExtendedUnitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListExtendedUnitsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListExtendedUnits",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/unit/extended",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListExtendedUnitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListExtendedUnitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListExtendedUnits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListUnits lists retrieves a list of units

List retrieves a list of Units
*/
func (a *Client) ListUnits(params *ListUnitsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUnitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUnitsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListUnits",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/unit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUnitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUnitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListUnits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Refresh refreshes a unit configuration

Triggers a refresh operation using the config data to a Bridge Worker
*/
func (a *Client) Refresh(params *RefreshParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Refresh",
		Method:             "POST",
		PathPattern:        "/space/{space_id}/unit/{unit_id}/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Refresh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUnit updates a given unit

Updates a given Unit
*/
func (a *Client) UpdateUnit(params *UpdateUnitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUnitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUnitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateUnit",
		Method:             "PUT",
		PathPattern:        "/space/{space_id}/unit/{unit_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUnitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUnitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateUnit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
