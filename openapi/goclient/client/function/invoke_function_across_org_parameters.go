// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package function

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// NewInvokeFunctionAcrossOrgParams creates a new InvokeFunctionAcrossOrgParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewInvokeFunctionAcrossOrgParams() *InvokeFunctionAcrossOrgParams {
	return &InvokeFunctionAcrossOrgParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewInvokeFunctionAcrossOrgParamsWithTimeout creates a new InvokeFunctionAcrossOrgParams object
// with the ability to set a timeout on a request.
func NewInvokeFunctionAcrossOrgParamsWithTimeout(timeout time.Duration) *InvokeFunctionAcrossOrgParams {
	return &InvokeFunctionAcrossOrgParams{
		timeout: timeout,
	}
}

// NewInvokeFunctionAcrossOrgParamsWithContext creates a new InvokeFunctionAcrossOrgParams object
// with the ability to set a context for a request.
func NewInvokeFunctionAcrossOrgParamsWithContext(ctx context.Context) *InvokeFunctionAcrossOrgParams {
	return &InvokeFunctionAcrossOrgParams{
		Context: ctx,
	}
}

// NewInvokeFunctionAcrossOrgParamsWithHTTPClient creates a new InvokeFunctionAcrossOrgParams object
// with the ability to set a custom HTTPClient for a request.
func NewInvokeFunctionAcrossOrgParamsWithHTTPClient(client *http.Client) *InvokeFunctionAcrossOrgParams {
	return &InvokeFunctionAcrossOrgParams{
		HTTPClient: client,
	}
}

/*
InvokeFunctionAcrossOrgParams contains all the parameters to send to the API endpoint

	for the invoke function across org operation.

	Typically these are written to a http.Request.
*/
type InvokeFunctionAcrossOrgParams struct {

	/* Function.

	   Function invocation request
	*/
	Function *models.ModelsFunctionInvocationRequest

	/* Where.

	   Where filter: The specified string is an expression for the purpose of filtering the Units on which the functions are invoked. The expression syntax was inspired by SQL. It supports conjunctions using `AND` of relational expressions of the form *attribute* *operator* *attribute_or_literal*. The attribute names are case-sensitive and PascalCase, as in the JSON encoding. Supported attributes for Unit are `CreatedAt`, `UpdatedAt`, `LastActionAt`, `DisplayName`, `Slug`, `OrganizationID`, `SpaceID`, `UnitID`, `SetID`, `TargetID`, `UpstreamOrganizationID`, `UpstreamSpaceID`, `UpstreamUnitID`, `UpstreamRevisionNum`, `HeadRevisionNum`, `LastAppliedRevisionNum`, `LiveRevisionNum`, `PreviousLiveRevisionNum`, `ToolchainType`, and `LastChangeDescription`. `Labels` and `ApplyGates` are supported, using a dot notation to specify a particular map key, as in `Labels.tier = 'Backend'`. `ApprovedBy` is supported, using a `?` operator to match any element of the array, as in `ApprovedBy ? '7c61626f-ddbe-41af-93f6-b69f4ab6d308'`. `LEN()` may be applied to `ApplyGates` and `ApprovedBy`, as in `LEN(ApplyGates) > 0`. Strings and integers support the following operators: `<`, `>`, `<=`, `>=`, `=`, `!=`. UUIDs and boolean attributes support equality and inequality only. String literals are quoted with single quotes, such as `'string'`. UUID and time literals must be quoted as string literals, as in the preceding `ApprovedBy` example. Time literals use the same form as when serialized as JSON, such as: `CreatedAt > '2025-02-18T23:16:34'`. Integer and boolean literals are also supported for attributes of those types. An example conjunction is: `CreatedAt >= '2025-01-07' AND DisplayName = 'testunit' AND Labels.mykey = 'myvalue'`. Finding all units created by cloning can be done using the expression `UpstreamRevisionNum > 0`. Clones of a specific unit can be found by additionally filtering based on `UpstreamUnitID`. Unapplied units can be found using `LiveRevisionNum = 0`. Units with unapplied changes can be found with `HeadRevisionNum > LiveRevisionNum`. The whole string must be query-encoded.
	*/
	Where *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the invoke function across org params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *InvokeFunctionAcrossOrgParams) WithDefaults() *InvokeFunctionAcrossOrgParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the invoke function across org params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *InvokeFunctionAcrossOrgParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the invoke function across org params
func (o *InvokeFunctionAcrossOrgParams) WithTimeout(timeout time.Duration) *InvokeFunctionAcrossOrgParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the invoke function across org params
func (o *InvokeFunctionAcrossOrgParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the invoke function across org params
func (o *InvokeFunctionAcrossOrgParams) WithContext(ctx context.Context) *InvokeFunctionAcrossOrgParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the invoke function across org params
func (o *InvokeFunctionAcrossOrgParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the invoke function across org params
func (o *InvokeFunctionAcrossOrgParams) WithHTTPClient(client *http.Client) *InvokeFunctionAcrossOrgParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the invoke function across org params
func (o *InvokeFunctionAcrossOrgParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFunction adds the function to the invoke function across org params
func (o *InvokeFunctionAcrossOrgParams) WithFunction(function *models.ModelsFunctionInvocationRequest) *InvokeFunctionAcrossOrgParams {
	o.SetFunction(function)
	return o
}

// SetFunction adds the function to the invoke function across org params
func (o *InvokeFunctionAcrossOrgParams) SetFunction(function *models.ModelsFunctionInvocationRequest) {
	o.Function = function
}

// WithWhere adds the where to the invoke function across org params
func (o *InvokeFunctionAcrossOrgParams) WithWhere(where *string) *InvokeFunctionAcrossOrgParams {
	o.SetWhere(where)
	return o
}

// SetWhere adds the where to the invoke function across org params
func (o *InvokeFunctionAcrossOrgParams) SetWhere(where *string) {
	o.Where = where
}

// WriteToRequest writes these params to a swagger request
func (o *InvokeFunctionAcrossOrgParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Function != nil {
		if err := r.SetBodyParam(o.Function); err != nil {
			return err
		}
	}

	if o.Where != nil {

		// query param where
		var qrWhere string

		if o.Where != nil {
			qrWhere = *o.Where
		}
		qWhere := qrWhere
		if qWhere != "" {

			if err := r.SetQueryParam("where", qWhere); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
