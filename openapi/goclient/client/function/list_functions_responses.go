// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package function

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// ListFunctionsReader is a Reader for the ListFunctions structure.
type ListFunctionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListFunctionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListFunctionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListFunctionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListFunctionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListFunctionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListFunctionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /space/{space_id}/function] ListFunctions", response, response.Code())
	}
}

// NewListFunctionsOK creates a ListFunctionsOK with default headers values
func NewListFunctionsOK() *ListFunctionsOK {
	return &ListFunctionsOK{}
}

/*
ListFunctionsOK describes a response with status code 200, with default header values.

OK
*/
type ListFunctionsOK struct {
	Payload map[string]map[string]models.APIFunctionSignature
}

// IsSuccess returns true when this list functions o k response has a 2xx status code
func (o *ListFunctionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list functions o k response has a 3xx status code
func (o *ListFunctionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list functions o k response has a 4xx status code
func (o *ListFunctionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list functions o k response has a 5xx status code
func (o *ListFunctionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list functions o k response a status code equal to that given
func (o *ListFunctionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list functions o k response
func (o *ListFunctionsOK) Code() int {
	return 200
}

func (o *ListFunctionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/function][%d] listFunctionsOK %s", 200, payload)
}

func (o *ListFunctionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/function][%d] listFunctionsOK %s", 200, payload)
}

func (o *ListFunctionsOK) GetPayload() map[string]map[string]models.APIFunctionSignature {
	return o.Payload
}

func (o *ListFunctionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFunctionsBadRequest creates a ListFunctionsBadRequest with default headers values
func NewListFunctionsBadRequest() *ListFunctionsBadRequest {
	return &ListFunctionsBadRequest{}
}

/*
ListFunctionsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ListFunctionsBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list functions bad request response has a 2xx status code
func (o *ListFunctionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list functions bad request response has a 3xx status code
func (o *ListFunctionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list functions bad request response has a 4xx status code
func (o *ListFunctionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list functions bad request response has a 5xx status code
func (o *ListFunctionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list functions bad request response a status code equal to that given
func (o *ListFunctionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list functions bad request response
func (o *ListFunctionsBadRequest) Code() int {
	return 400
}

func (o *ListFunctionsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/function][%d] listFunctionsBadRequest %s", 400, payload)
}

func (o *ListFunctionsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/function][%d] listFunctionsBadRequest %s", 400, payload)
}

func (o *ListFunctionsBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListFunctionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFunctionsUnauthorized creates a ListFunctionsUnauthorized with default headers values
func NewListFunctionsUnauthorized() *ListFunctionsUnauthorized {
	return &ListFunctionsUnauthorized{}
}

/*
ListFunctionsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListFunctionsUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list functions unauthorized response has a 2xx status code
func (o *ListFunctionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list functions unauthorized response has a 3xx status code
func (o *ListFunctionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list functions unauthorized response has a 4xx status code
func (o *ListFunctionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list functions unauthorized response has a 5xx status code
func (o *ListFunctionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list functions unauthorized response a status code equal to that given
func (o *ListFunctionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list functions unauthorized response
func (o *ListFunctionsUnauthorized) Code() int {
	return 401
}

func (o *ListFunctionsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/function][%d] listFunctionsUnauthorized %s", 401, payload)
}

func (o *ListFunctionsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/function][%d] listFunctionsUnauthorized %s", 401, payload)
}

func (o *ListFunctionsUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListFunctionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFunctionsForbidden creates a ListFunctionsForbidden with default headers values
func NewListFunctionsForbidden() *ListFunctionsForbidden {
	return &ListFunctionsForbidden{}
}

/*
ListFunctionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListFunctionsForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list functions forbidden response has a 2xx status code
func (o *ListFunctionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list functions forbidden response has a 3xx status code
func (o *ListFunctionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list functions forbidden response has a 4xx status code
func (o *ListFunctionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list functions forbidden response has a 5xx status code
func (o *ListFunctionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list functions forbidden response a status code equal to that given
func (o *ListFunctionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list functions forbidden response
func (o *ListFunctionsForbidden) Code() int {
	return 403
}

func (o *ListFunctionsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/function][%d] listFunctionsForbidden %s", 403, payload)
}

func (o *ListFunctionsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/function][%d] listFunctionsForbidden %s", 403, payload)
}

func (o *ListFunctionsForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListFunctionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFunctionsInternalServerError creates a ListFunctionsInternalServerError with default headers values
func NewListFunctionsInternalServerError() *ListFunctionsInternalServerError {
	return &ListFunctionsInternalServerError{}
}

/*
ListFunctionsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ListFunctionsInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list functions internal server error response has a 2xx status code
func (o *ListFunctionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list functions internal server error response has a 3xx status code
func (o *ListFunctionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list functions internal server error response has a 4xx status code
func (o *ListFunctionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list functions internal server error response has a 5xx status code
func (o *ListFunctionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list functions internal server error response a status code equal to that given
func (o *ListFunctionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list functions internal server error response
func (o *ListFunctionsInternalServerError) Code() int {
	return 500
}

func (o *ListFunctionsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/function][%d] listFunctionsInternalServerError %s", 500, payload)
}

func (o *ListFunctionsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/function][%d] listFunctionsInternalServerError %s", 500, payload)
}

func (o *ListFunctionsInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListFunctionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
