// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package set

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// DeleteSetReader is a Reader for the DeleteSet structure.
type DeleteSetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteSetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /space/{space_id}/set/{set_id}] DeleteSet", response, response.Code())
	}
}

// NewDeleteSetOK creates a DeleteSetOK with default headers values
func NewDeleteSetOK() *DeleteSetOK {
	return &DeleteSetOK{}
}

/*
DeleteSetOK describes a response with status code 200, with default header values.

Ok
*/
type DeleteSetOK struct {
	Payload string
}

// IsSuccess returns true when this delete set o k response has a 2xx status code
func (o *DeleteSetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete set o k response has a 3xx status code
func (o *DeleteSetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete set o k response has a 4xx status code
func (o *DeleteSetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete set o k response has a 5xx status code
func (o *DeleteSetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete set o k response a status code equal to that given
func (o *DeleteSetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete set o k response
func (o *DeleteSetOK) Code() int {
	return 200
}

func (o *DeleteSetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/set/{set_id}][%d] deleteSetOK %s", 200, payload)
}

func (o *DeleteSetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/set/{set_id}][%d] deleteSetOK %s", 200, payload)
}

func (o *DeleteSetOK) GetPayload() string {
	return o.Payload
}

func (o *DeleteSetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSetBadRequest creates a DeleteSetBadRequest with default headers values
func NewDeleteSetBadRequest() *DeleteSetBadRequest {
	return &DeleteSetBadRequest{}
}

/*
DeleteSetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteSetBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete set bad request response has a 2xx status code
func (o *DeleteSetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete set bad request response has a 3xx status code
func (o *DeleteSetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete set bad request response has a 4xx status code
func (o *DeleteSetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete set bad request response has a 5xx status code
func (o *DeleteSetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete set bad request response a status code equal to that given
func (o *DeleteSetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete set bad request response
func (o *DeleteSetBadRequest) Code() int {
	return 400
}

func (o *DeleteSetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/set/{set_id}][%d] deleteSetBadRequest %s", 400, payload)
}

func (o *DeleteSetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/set/{set_id}][%d] deleteSetBadRequest %s", 400, payload)
}

func (o *DeleteSetBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteSetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSetUnauthorized creates a DeleteSetUnauthorized with default headers values
func NewDeleteSetUnauthorized() *DeleteSetUnauthorized {
	return &DeleteSetUnauthorized{}
}

/*
DeleteSetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteSetUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete set unauthorized response has a 2xx status code
func (o *DeleteSetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete set unauthorized response has a 3xx status code
func (o *DeleteSetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete set unauthorized response has a 4xx status code
func (o *DeleteSetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete set unauthorized response has a 5xx status code
func (o *DeleteSetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete set unauthorized response a status code equal to that given
func (o *DeleteSetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete set unauthorized response
func (o *DeleteSetUnauthorized) Code() int {
	return 401
}

func (o *DeleteSetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/set/{set_id}][%d] deleteSetUnauthorized %s", 401, payload)
}

func (o *DeleteSetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/set/{set_id}][%d] deleteSetUnauthorized %s", 401, payload)
}

func (o *DeleteSetUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteSetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSetForbidden creates a DeleteSetForbidden with default headers values
func NewDeleteSetForbidden() *DeleteSetForbidden {
	return &DeleteSetForbidden{}
}

/*
DeleteSetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteSetForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete set forbidden response has a 2xx status code
func (o *DeleteSetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete set forbidden response has a 3xx status code
func (o *DeleteSetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete set forbidden response has a 4xx status code
func (o *DeleteSetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete set forbidden response has a 5xx status code
func (o *DeleteSetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete set forbidden response a status code equal to that given
func (o *DeleteSetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete set forbidden response
func (o *DeleteSetForbidden) Code() int {
	return 403
}

func (o *DeleteSetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/set/{set_id}][%d] deleteSetForbidden %s", 403, payload)
}

func (o *DeleteSetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/set/{set_id}][%d] deleteSetForbidden %s", 403, payload)
}

func (o *DeleteSetForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteSetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSetNotFound creates a DeleteSetNotFound with default headers values
func NewDeleteSetNotFound() *DeleteSetNotFound {
	return &DeleteSetNotFound{}
}

/*
DeleteSetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteSetNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete set not found response has a 2xx status code
func (o *DeleteSetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete set not found response has a 3xx status code
func (o *DeleteSetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete set not found response has a 4xx status code
func (o *DeleteSetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete set not found response has a 5xx status code
func (o *DeleteSetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete set not found response a status code equal to that given
func (o *DeleteSetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete set not found response
func (o *DeleteSetNotFound) Code() int {
	return 404
}

func (o *DeleteSetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/set/{set_id}][%d] deleteSetNotFound %s", 404, payload)
}

func (o *DeleteSetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/set/{set_id}][%d] deleteSetNotFound %s", 404, payload)
}

func (o *DeleteSetNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteSetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSetInternalServerError creates a DeleteSetInternalServerError with default headers values
func NewDeleteSetInternalServerError() *DeleteSetInternalServerError {
	return &DeleteSetInternalServerError{}
}

/*
DeleteSetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteSetInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete set internal server error response has a 2xx status code
func (o *DeleteSetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete set internal server error response has a 3xx status code
func (o *DeleteSetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete set internal server error response has a 4xx status code
func (o *DeleteSetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete set internal server error response has a 5xx status code
func (o *DeleteSetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete set internal server error response a status code equal to that given
func (o *DeleteSetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete set internal server error response
func (o *DeleteSetInternalServerError) Code() int {
	return 500
}

func (o *DeleteSetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/set/{set_id}][%d] deleteSetInternalServerError %s", 500, payload)
}

func (o *DeleteSetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/set/{set_id}][%d] deleteSetInternalServerError %s", 500, payload)
}

func (o *DeleteSetInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteSetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
