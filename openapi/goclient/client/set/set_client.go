// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package set

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new set API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new set API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new set API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for set API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSet(params *CreateSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSetOK, error)

	DeleteSet(params *DeleteSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSetOK, error)

	GetSet(params *GetSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSetOK, error)

	GetSetExtended(params *GetSetExtendedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSetExtendedOK, error)

	ListSets(params *ListSetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSetsOK, error)

	UpdateSet(params *UpdateSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateSet creates a set

Create registers a set for a Space
*/
func (a *Client) CreateSet(params *CreateSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSet",
		Method:             "POST",
		PathPattern:        "/space/{space_id}/set",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSet deletes removes a set

Delete removes a set in the space
*/
func (a *Client) DeleteSet(params *DeleteSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSet",
		Method:             "DELETE",
		PathPattern:        "/space/{space_id}/set/{set_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSet gets retrieves a set

Get retrieves a set in the space
*/
func (a *Client) GetSet(params *GetSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSet",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/set/{set_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSetExtended gets extended retrieves extended information about a set

GetExtended retrieves extended information about a set in the space
*/
func (a *Client) GetSetExtended(params *GetSetExtendedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSetExtendedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSetExtendedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSetExtended",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/set/{set_id}/extended",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSetExtendedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSetExtendedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSetExtended: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSets lists all sets

List all Sets
*/
func (a *Client) ListSets(params *ListSetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListSets",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/set",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListSets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSet updates retrieves and updates a set

Update retrieves and updates a set in the space
*/
func (a *Client) UpdateSet(params *UpdateSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSet",
		Method:             "PUT",
		PathPattern:        "/space/{space_id}/set/{set_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
