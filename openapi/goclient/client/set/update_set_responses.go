// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package set

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// UpdateSetReader is a Reader for the UpdateSet structure.
type UpdateSetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateSetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateSetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /space/{space_id}/set/{set_id}] UpdateSet", response, response.Code())
	}
}

// NewUpdateSetOK creates a UpdateSetOK with default headers values
func NewUpdateSetOK() *UpdateSetOK {
	return &UpdateSetOK{}
}

/*
UpdateSetOK describes a response with status code 200, with default header values.

OK
*/
type UpdateSetOK struct {
	Payload *models.ModelsSet
}

// IsSuccess returns true when this update set o k response has a 2xx status code
func (o *UpdateSetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update set o k response has a 3xx status code
func (o *UpdateSetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update set o k response has a 4xx status code
func (o *UpdateSetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update set o k response has a 5xx status code
func (o *UpdateSetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update set o k response a status code equal to that given
func (o *UpdateSetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update set o k response
func (o *UpdateSetOK) Code() int {
	return 200
}

func (o *UpdateSetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/set/{set_id}][%d] updateSetOK %s", 200, payload)
}

func (o *UpdateSetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/set/{set_id}][%d] updateSetOK %s", 200, payload)
}

func (o *UpdateSetOK) GetPayload() *models.ModelsSet {
	return o.Payload
}

func (o *UpdateSetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsSet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSetBadRequest creates a UpdateSetBadRequest with default headers values
func NewUpdateSetBadRequest() *UpdateSetBadRequest {
	return &UpdateSetBadRequest{}
}

/*
UpdateSetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateSetBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update set bad request response has a 2xx status code
func (o *UpdateSetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update set bad request response has a 3xx status code
func (o *UpdateSetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update set bad request response has a 4xx status code
func (o *UpdateSetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update set bad request response has a 5xx status code
func (o *UpdateSetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update set bad request response a status code equal to that given
func (o *UpdateSetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update set bad request response
func (o *UpdateSetBadRequest) Code() int {
	return 400
}

func (o *UpdateSetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/set/{set_id}][%d] updateSetBadRequest %s", 400, payload)
}

func (o *UpdateSetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/set/{set_id}][%d] updateSetBadRequest %s", 400, payload)
}

func (o *UpdateSetBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateSetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSetUnauthorized creates a UpdateSetUnauthorized with default headers values
func NewUpdateSetUnauthorized() *UpdateSetUnauthorized {
	return &UpdateSetUnauthorized{}
}

/*
UpdateSetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateSetUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update set unauthorized response has a 2xx status code
func (o *UpdateSetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update set unauthorized response has a 3xx status code
func (o *UpdateSetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update set unauthorized response has a 4xx status code
func (o *UpdateSetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update set unauthorized response has a 5xx status code
func (o *UpdateSetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update set unauthorized response a status code equal to that given
func (o *UpdateSetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update set unauthorized response
func (o *UpdateSetUnauthorized) Code() int {
	return 401
}

func (o *UpdateSetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/set/{set_id}][%d] updateSetUnauthorized %s", 401, payload)
}

func (o *UpdateSetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/set/{set_id}][%d] updateSetUnauthorized %s", 401, payload)
}

func (o *UpdateSetUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateSetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSetForbidden creates a UpdateSetForbidden with default headers values
func NewUpdateSetForbidden() *UpdateSetForbidden {
	return &UpdateSetForbidden{}
}

/*
UpdateSetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateSetForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update set forbidden response has a 2xx status code
func (o *UpdateSetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update set forbidden response has a 3xx status code
func (o *UpdateSetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update set forbidden response has a 4xx status code
func (o *UpdateSetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update set forbidden response has a 5xx status code
func (o *UpdateSetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update set forbidden response a status code equal to that given
func (o *UpdateSetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update set forbidden response
func (o *UpdateSetForbidden) Code() int {
	return 403
}

func (o *UpdateSetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/set/{set_id}][%d] updateSetForbidden %s", 403, payload)
}

func (o *UpdateSetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/set/{set_id}][%d] updateSetForbidden %s", 403, payload)
}

func (o *UpdateSetForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateSetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSetNotFound creates a UpdateSetNotFound with default headers values
func NewUpdateSetNotFound() *UpdateSetNotFound {
	return &UpdateSetNotFound{}
}

/*
UpdateSetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateSetNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update set not found response has a 2xx status code
func (o *UpdateSetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update set not found response has a 3xx status code
func (o *UpdateSetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update set not found response has a 4xx status code
func (o *UpdateSetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update set not found response has a 5xx status code
func (o *UpdateSetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update set not found response a status code equal to that given
func (o *UpdateSetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update set not found response
func (o *UpdateSetNotFound) Code() int {
	return 404
}

func (o *UpdateSetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/set/{set_id}][%d] updateSetNotFound %s", 404, payload)
}

func (o *UpdateSetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/set/{set_id}][%d] updateSetNotFound %s", 404, payload)
}

func (o *UpdateSetNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateSetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSetInternalServerError creates a UpdateSetInternalServerError with default headers values
func NewUpdateSetInternalServerError() *UpdateSetInternalServerError {
	return &UpdateSetInternalServerError{}
}

/*
UpdateSetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateSetInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update set internal server error response has a 2xx status code
func (o *UpdateSetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update set internal server error response has a 3xx status code
func (o *UpdateSetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update set internal server error response has a 4xx status code
func (o *UpdateSetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update set internal server error response has a 5xx status code
func (o *UpdateSetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update set internal server error response a status code equal to that given
func (o *UpdateSetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update set internal server error response
func (o *UpdateSetInternalServerError) Code() int {
	return 500
}

func (o *UpdateSetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/set/{set_id}][%d] updateSetInternalServerError %s", 500, payload)
}

func (o *UpdateSetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/set/{set_id}][%d] updateSetInternalServerError %s", 500, payload)
}

func (o *UpdateSetInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateSetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
