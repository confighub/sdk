// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListOrganizationsParams creates a new ListOrganizationsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListOrganizationsParams() *ListOrganizationsParams {
	return &ListOrganizationsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListOrganizationsParamsWithTimeout creates a new ListOrganizationsParams object
// with the ability to set a timeout on a request.
func NewListOrganizationsParamsWithTimeout(timeout time.Duration) *ListOrganizationsParams {
	return &ListOrganizationsParams{
		timeout: timeout,
	}
}

// NewListOrganizationsParamsWithContext creates a new ListOrganizationsParams object
// with the ability to set a context for a request.
func NewListOrganizationsParamsWithContext(ctx context.Context) *ListOrganizationsParams {
	return &ListOrganizationsParams{
		Context: ctx,
	}
}

// NewListOrganizationsParamsWithHTTPClient creates a new ListOrganizationsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListOrganizationsParamsWithHTTPClient(client *http.Client) *ListOrganizationsParams {
	return &ListOrganizationsParams{
		HTTPClient: client,
	}
}

/*
ListOrganizationsParams contains all the parameters to send to the API endpoint

	for the list organizations operation.

	Typically these are written to a http.Request.
*/
type ListOrganizationsParams struct {

	/* Where.

	   Where filter: The specified string is an expression for the purpose of filtering the list of Organizations returned. The expression syntax was inspired by SQL. It supports conjunctions using `AND` of relational expressions of the form *attribute* *operator* *attribute_or_literal*. The attribute names are case-sensitive and PascalCase, as in the JSON encoding. Supported attributes for Organization are `CreatedAt`, `UpdatedAt`, `DisplayName`, `Slug`, `OrganizationID`,`BillingAccountID`, and `ExternalID`. `Labels` are supported, using a dot notation to specify a particular map key, as in `Labels.origin = 'aquired-startup'`. Strings and integers support the following operators: `<`, `>`, `<=`, `>=`, `=`, `!=`. UUIDs and boolean attributes support equality and inequality only. String literals are quoted with single quotes, such as `Slug = 'us'`. UUID and time literals must be quoted as string literals, as in `'7c61626f-ddbe-41af-93f6-b69f4ab6d308'`. Time literals use the same form as when serialized as JSON, such as: `CreatedAt > '2025-02-18T23:16:34'`. Integer and boolean literals are also supported for attributes of those types. An example conjunction is: `CreatedAt >= '2025-01-07' AND Labels.mykey = 'myvalue'`. The whole string must be query-encoded.
	*/
	Where *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list organizations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListOrganizationsParams) WithDefaults() *ListOrganizationsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list organizations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListOrganizationsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list organizations params
func (o *ListOrganizationsParams) WithTimeout(timeout time.Duration) *ListOrganizationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list organizations params
func (o *ListOrganizationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list organizations params
func (o *ListOrganizationsParams) WithContext(ctx context.Context) *ListOrganizationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list organizations params
func (o *ListOrganizationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list organizations params
func (o *ListOrganizationsParams) WithHTTPClient(client *http.Client) *ListOrganizationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list organizations params
func (o *ListOrganizationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithWhere adds the where to the list organizations params
func (o *ListOrganizationsParams) WithWhere(where *string) *ListOrganizationsParams {
	o.SetWhere(where)
	return o
}

// SetWhere adds the where to the list organizations params
func (o *ListOrganizationsParams) SetWhere(where *string) {
	o.Where = where
}

// WriteToRequest writes these params to a swagger request
func (o *ListOrganizationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Where != nil {

		// query param where
		var qrWhere string

		if o.Where != nil {
			qrWhere = *o.Where
		}
		qWhere := qrWhere
		if qWhere != "" {

			if err := r.SetQueryParam("where", qWhere); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
