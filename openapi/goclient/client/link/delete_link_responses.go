// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package link

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// DeleteLinkReader is a Reader for the DeleteLink structure.
type DeleteLinkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLinkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteLinkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteLinkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteLinkUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteLinkForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteLinkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteLinkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /space/{space_id}/link/{link_id}] DeleteLink", response, response.Code())
	}
}

// NewDeleteLinkOK creates a DeleteLinkOK with default headers values
func NewDeleteLinkOK() *DeleteLinkOK {
	return &DeleteLinkOK{}
}

/*
DeleteLinkOK describes a response with status code 200, with default header values.

Ok
*/
type DeleteLinkOK struct {
	Payload string
}

// IsSuccess returns true when this delete link o k response has a 2xx status code
func (o *DeleteLinkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete link o k response has a 3xx status code
func (o *DeleteLinkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete link o k response has a 4xx status code
func (o *DeleteLinkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete link o k response has a 5xx status code
func (o *DeleteLinkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete link o k response a status code equal to that given
func (o *DeleteLinkOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete link o k response
func (o *DeleteLinkOK) Code() int {
	return 200
}

func (o *DeleteLinkOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/link/{link_id}][%d] deleteLinkOK %s", 200, payload)
}

func (o *DeleteLinkOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/link/{link_id}][%d] deleteLinkOK %s", 200, payload)
}

func (o *DeleteLinkOK) GetPayload() string {
	return o.Payload
}

func (o *DeleteLinkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLinkBadRequest creates a DeleteLinkBadRequest with default headers values
func NewDeleteLinkBadRequest() *DeleteLinkBadRequest {
	return &DeleteLinkBadRequest{}
}

/*
DeleteLinkBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteLinkBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete link bad request response has a 2xx status code
func (o *DeleteLinkBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete link bad request response has a 3xx status code
func (o *DeleteLinkBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete link bad request response has a 4xx status code
func (o *DeleteLinkBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete link bad request response has a 5xx status code
func (o *DeleteLinkBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete link bad request response a status code equal to that given
func (o *DeleteLinkBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete link bad request response
func (o *DeleteLinkBadRequest) Code() int {
	return 400
}

func (o *DeleteLinkBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/link/{link_id}][%d] deleteLinkBadRequest %s", 400, payload)
}

func (o *DeleteLinkBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/link/{link_id}][%d] deleteLinkBadRequest %s", 400, payload)
}

func (o *DeleteLinkBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteLinkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLinkUnauthorized creates a DeleteLinkUnauthorized with default headers values
func NewDeleteLinkUnauthorized() *DeleteLinkUnauthorized {
	return &DeleteLinkUnauthorized{}
}

/*
DeleteLinkUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteLinkUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete link unauthorized response has a 2xx status code
func (o *DeleteLinkUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete link unauthorized response has a 3xx status code
func (o *DeleteLinkUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete link unauthorized response has a 4xx status code
func (o *DeleteLinkUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete link unauthorized response has a 5xx status code
func (o *DeleteLinkUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete link unauthorized response a status code equal to that given
func (o *DeleteLinkUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete link unauthorized response
func (o *DeleteLinkUnauthorized) Code() int {
	return 401
}

func (o *DeleteLinkUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/link/{link_id}][%d] deleteLinkUnauthorized %s", 401, payload)
}

func (o *DeleteLinkUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/link/{link_id}][%d] deleteLinkUnauthorized %s", 401, payload)
}

func (o *DeleteLinkUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteLinkUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLinkForbidden creates a DeleteLinkForbidden with default headers values
func NewDeleteLinkForbidden() *DeleteLinkForbidden {
	return &DeleteLinkForbidden{}
}

/*
DeleteLinkForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteLinkForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete link forbidden response has a 2xx status code
func (o *DeleteLinkForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete link forbidden response has a 3xx status code
func (o *DeleteLinkForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete link forbidden response has a 4xx status code
func (o *DeleteLinkForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete link forbidden response has a 5xx status code
func (o *DeleteLinkForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete link forbidden response a status code equal to that given
func (o *DeleteLinkForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete link forbidden response
func (o *DeleteLinkForbidden) Code() int {
	return 403
}

func (o *DeleteLinkForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/link/{link_id}][%d] deleteLinkForbidden %s", 403, payload)
}

func (o *DeleteLinkForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/link/{link_id}][%d] deleteLinkForbidden %s", 403, payload)
}

func (o *DeleteLinkForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteLinkForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLinkNotFound creates a DeleteLinkNotFound with default headers values
func NewDeleteLinkNotFound() *DeleteLinkNotFound {
	return &DeleteLinkNotFound{}
}

/*
DeleteLinkNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteLinkNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete link not found response has a 2xx status code
func (o *DeleteLinkNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete link not found response has a 3xx status code
func (o *DeleteLinkNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete link not found response has a 4xx status code
func (o *DeleteLinkNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete link not found response has a 5xx status code
func (o *DeleteLinkNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete link not found response a status code equal to that given
func (o *DeleteLinkNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete link not found response
func (o *DeleteLinkNotFound) Code() int {
	return 404
}

func (o *DeleteLinkNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/link/{link_id}][%d] deleteLinkNotFound %s", 404, payload)
}

func (o *DeleteLinkNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/link/{link_id}][%d] deleteLinkNotFound %s", 404, payload)
}

func (o *DeleteLinkNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteLinkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLinkInternalServerError creates a DeleteLinkInternalServerError with default headers values
func NewDeleteLinkInternalServerError() *DeleteLinkInternalServerError {
	return &DeleteLinkInternalServerError{}
}

/*
DeleteLinkInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteLinkInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete link internal server error response has a 2xx status code
func (o *DeleteLinkInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete link internal server error response has a 3xx status code
func (o *DeleteLinkInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete link internal server error response has a 4xx status code
func (o *DeleteLinkInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete link internal server error response has a 5xx status code
func (o *DeleteLinkInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete link internal server error response a status code equal to that given
func (o *DeleteLinkInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete link internal server error response
func (o *DeleteLinkInternalServerError) Code() int {
	return 500
}

func (o *DeleteLinkInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/link/{link_id}][%d] deleteLinkInternalServerError %s", 500, payload)
}

func (o *DeleteLinkInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/link/{link_id}][%d] deleteLinkInternalServerError %s", 500, payload)
}

func (o *DeleteLinkInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteLinkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
