// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package link

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// UpdateLinkReader is a Reader for the UpdateLink structure.
type UpdateLinkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateLinkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateLinkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateLinkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateLinkUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateLinkForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateLinkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateLinkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /space/{space_id}/link/{link_id}] UpdateLink", response, response.Code())
	}
}

// NewUpdateLinkOK creates a UpdateLinkOK with default headers values
func NewUpdateLinkOK() *UpdateLinkOK {
	return &UpdateLinkOK{}
}

/*
UpdateLinkOK describes a response with status code 200, with default header values.

OK
*/
type UpdateLinkOK struct {
	Payload *models.ModelsLink
}

// IsSuccess returns true when this update link o k response has a 2xx status code
func (o *UpdateLinkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update link o k response has a 3xx status code
func (o *UpdateLinkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update link o k response has a 4xx status code
func (o *UpdateLinkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update link o k response has a 5xx status code
func (o *UpdateLinkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update link o k response a status code equal to that given
func (o *UpdateLinkOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update link o k response
func (o *UpdateLinkOK) Code() int {
	return 200
}

func (o *UpdateLinkOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/link/{link_id}][%d] updateLinkOK %s", 200, payload)
}

func (o *UpdateLinkOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/link/{link_id}][%d] updateLinkOK %s", 200, payload)
}

func (o *UpdateLinkOK) GetPayload() *models.ModelsLink {
	return o.Payload
}

func (o *UpdateLinkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsLink)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLinkBadRequest creates a UpdateLinkBadRequest with default headers values
func NewUpdateLinkBadRequest() *UpdateLinkBadRequest {
	return &UpdateLinkBadRequest{}
}

/*
UpdateLinkBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateLinkBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update link bad request response has a 2xx status code
func (o *UpdateLinkBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update link bad request response has a 3xx status code
func (o *UpdateLinkBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update link bad request response has a 4xx status code
func (o *UpdateLinkBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update link bad request response has a 5xx status code
func (o *UpdateLinkBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update link bad request response a status code equal to that given
func (o *UpdateLinkBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update link bad request response
func (o *UpdateLinkBadRequest) Code() int {
	return 400
}

func (o *UpdateLinkBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/link/{link_id}][%d] updateLinkBadRequest %s", 400, payload)
}

func (o *UpdateLinkBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/link/{link_id}][%d] updateLinkBadRequest %s", 400, payload)
}

func (o *UpdateLinkBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateLinkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLinkUnauthorized creates a UpdateLinkUnauthorized with default headers values
func NewUpdateLinkUnauthorized() *UpdateLinkUnauthorized {
	return &UpdateLinkUnauthorized{}
}

/*
UpdateLinkUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateLinkUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update link unauthorized response has a 2xx status code
func (o *UpdateLinkUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update link unauthorized response has a 3xx status code
func (o *UpdateLinkUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update link unauthorized response has a 4xx status code
func (o *UpdateLinkUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update link unauthorized response has a 5xx status code
func (o *UpdateLinkUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update link unauthorized response a status code equal to that given
func (o *UpdateLinkUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update link unauthorized response
func (o *UpdateLinkUnauthorized) Code() int {
	return 401
}

func (o *UpdateLinkUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/link/{link_id}][%d] updateLinkUnauthorized %s", 401, payload)
}

func (o *UpdateLinkUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/link/{link_id}][%d] updateLinkUnauthorized %s", 401, payload)
}

func (o *UpdateLinkUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateLinkUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLinkForbidden creates a UpdateLinkForbidden with default headers values
func NewUpdateLinkForbidden() *UpdateLinkForbidden {
	return &UpdateLinkForbidden{}
}

/*
UpdateLinkForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateLinkForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update link forbidden response has a 2xx status code
func (o *UpdateLinkForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update link forbidden response has a 3xx status code
func (o *UpdateLinkForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update link forbidden response has a 4xx status code
func (o *UpdateLinkForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update link forbidden response has a 5xx status code
func (o *UpdateLinkForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update link forbidden response a status code equal to that given
func (o *UpdateLinkForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update link forbidden response
func (o *UpdateLinkForbidden) Code() int {
	return 403
}

func (o *UpdateLinkForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/link/{link_id}][%d] updateLinkForbidden %s", 403, payload)
}

func (o *UpdateLinkForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/link/{link_id}][%d] updateLinkForbidden %s", 403, payload)
}

func (o *UpdateLinkForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateLinkForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLinkNotFound creates a UpdateLinkNotFound with default headers values
func NewUpdateLinkNotFound() *UpdateLinkNotFound {
	return &UpdateLinkNotFound{}
}

/*
UpdateLinkNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateLinkNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update link not found response has a 2xx status code
func (o *UpdateLinkNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update link not found response has a 3xx status code
func (o *UpdateLinkNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update link not found response has a 4xx status code
func (o *UpdateLinkNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update link not found response has a 5xx status code
func (o *UpdateLinkNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update link not found response a status code equal to that given
func (o *UpdateLinkNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update link not found response
func (o *UpdateLinkNotFound) Code() int {
	return 404
}

func (o *UpdateLinkNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/link/{link_id}][%d] updateLinkNotFound %s", 404, payload)
}

func (o *UpdateLinkNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/link/{link_id}][%d] updateLinkNotFound %s", 404, payload)
}

func (o *UpdateLinkNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateLinkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLinkInternalServerError creates a UpdateLinkInternalServerError with default headers values
func NewUpdateLinkInternalServerError() *UpdateLinkInternalServerError {
	return &UpdateLinkInternalServerError{}
}

/*
UpdateLinkInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateLinkInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update link internal server error response has a 2xx status code
func (o *UpdateLinkInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update link internal server error response has a 3xx status code
func (o *UpdateLinkInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update link internal server error response has a 4xx status code
func (o *UpdateLinkInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update link internal server error response has a 5xx status code
func (o *UpdateLinkInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update link internal server error response a status code equal to that given
func (o *UpdateLinkInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update link internal server error response
func (o *UpdateLinkInternalServerError) Code() int {
	return 500
}

func (o *UpdateLinkInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/link/{link_id}][%d] updateLinkInternalServerError %s", 500, payload)
}

func (o *UpdateLinkInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/link/{link_id}][%d] updateLinkInternalServerError %s", 500, payload)
}

func (o *UpdateLinkInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateLinkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
