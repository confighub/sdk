// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// UpdateTargetReader is a Reader for the UpdateTarget structure.
type UpdateTargetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTargetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateTargetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateTargetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateTargetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateTargetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateTargetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateTargetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /space/{space_id}/target/{target_id}] UpdateTarget", response, response.Code())
	}
}

// NewUpdateTargetOK creates a UpdateTargetOK with default headers values
func NewUpdateTargetOK() *UpdateTargetOK {
	return &UpdateTargetOK{}
}

/*
UpdateTargetOK describes a response with status code 200, with default header values.

OK
*/
type UpdateTargetOK struct {
	Payload *models.ModelsTarget
}

// IsSuccess returns true when this update target o k response has a 2xx status code
func (o *UpdateTargetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update target o k response has a 3xx status code
func (o *UpdateTargetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update target o k response has a 4xx status code
func (o *UpdateTargetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update target o k response has a 5xx status code
func (o *UpdateTargetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update target o k response a status code equal to that given
func (o *UpdateTargetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update target o k response
func (o *UpdateTargetOK) Code() int {
	return 200
}

func (o *UpdateTargetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/target/{target_id}][%d] updateTargetOK %s", 200, payload)
}

func (o *UpdateTargetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/target/{target_id}][%d] updateTargetOK %s", 200, payload)
}

func (o *UpdateTargetOK) GetPayload() *models.ModelsTarget {
	return o.Payload
}

func (o *UpdateTargetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsTarget)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTargetBadRequest creates a UpdateTargetBadRequest with default headers values
func NewUpdateTargetBadRequest() *UpdateTargetBadRequest {
	return &UpdateTargetBadRequest{}
}

/*
UpdateTargetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateTargetBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update target bad request response has a 2xx status code
func (o *UpdateTargetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update target bad request response has a 3xx status code
func (o *UpdateTargetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update target bad request response has a 4xx status code
func (o *UpdateTargetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update target bad request response has a 5xx status code
func (o *UpdateTargetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update target bad request response a status code equal to that given
func (o *UpdateTargetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update target bad request response
func (o *UpdateTargetBadRequest) Code() int {
	return 400
}

func (o *UpdateTargetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/target/{target_id}][%d] updateTargetBadRequest %s", 400, payload)
}

func (o *UpdateTargetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/target/{target_id}][%d] updateTargetBadRequest %s", 400, payload)
}

func (o *UpdateTargetBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateTargetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTargetUnauthorized creates a UpdateTargetUnauthorized with default headers values
func NewUpdateTargetUnauthorized() *UpdateTargetUnauthorized {
	return &UpdateTargetUnauthorized{}
}

/*
UpdateTargetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateTargetUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update target unauthorized response has a 2xx status code
func (o *UpdateTargetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update target unauthorized response has a 3xx status code
func (o *UpdateTargetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update target unauthorized response has a 4xx status code
func (o *UpdateTargetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update target unauthorized response has a 5xx status code
func (o *UpdateTargetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update target unauthorized response a status code equal to that given
func (o *UpdateTargetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update target unauthorized response
func (o *UpdateTargetUnauthorized) Code() int {
	return 401
}

func (o *UpdateTargetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/target/{target_id}][%d] updateTargetUnauthorized %s", 401, payload)
}

func (o *UpdateTargetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/target/{target_id}][%d] updateTargetUnauthorized %s", 401, payload)
}

func (o *UpdateTargetUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateTargetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTargetForbidden creates a UpdateTargetForbidden with default headers values
func NewUpdateTargetForbidden() *UpdateTargetForbidden {
	return &UpdateTargetForbidden{}
}

/*
UpdateTargetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateTargetForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update target forbidden response has a 2xx status code
func (o *UpdateTargetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update target forbidden response has a 3xx status code
func (o *UpdateTargetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update target forbidden response has a 4xx status code
func (o *UpdateTargetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update target forbidden response has a 5xx status code
func (o *UpdateTargetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update target forbidden response a status code equal to that given
func (o *UpdateTargetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update target forbidden response
func (o *UpdateTargetForbidden) Code() int {
	return 403
}

func (o *UpdateTargetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/target/{target_id}][%d] updateTargetForbidden %s", 403, payload)
}

func (o *UpdateTargetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/target/{target_id}][%d] updateTargetForbidden %s", 403, payload)
}

func (o *UpdateTargetForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateTargetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTargetNotFound creates a UpdateTargetNotFound with default headers values
func NewUpdateTargetNotFound() *UpdateTargetNotFound {
	return &UpdateTargetNotFound{}
}

/*
UpdateTargetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateTargetNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update target not found response has a 2xx status code
func (o *UpdateTargetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update target not found response has a 3xx status code
func (o *UpdateTargetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update target not found response has a 4xx status code
func (o *UpdateTargetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update target not found response has a 5xx status code
func (o *UpdateTargetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update target not found response a status code equal to that given
func (o *UpdateTargetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update target not found response
func (o *UpdateTargetNotFound) Code() int {
	return 404
}

func (o *UpdateTargetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/target/{target_id}][%d] updateTargetNotFound %s", 404, payload)
}

func (o *UpdateTargetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/target/{target_id}][%d] updateTargetNotFound %s", 404, payload)
}

func (o *UpdateTargetNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateTargetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTargetInternalServerError creates a UpdateTargetInternalServerError with default headers values
func NewUpdateTargetInternalServerError() *UpdateTargetInternalServerError {
	return &UpdateTargetInternalServerError{}
}

/*
UpdateTargetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateTargetInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this update target internal server error response has a 2xx status code
func (o *UpdateTargetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update target internal server error response has a 3xx status code
func (o *UpdateTargetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update target internal server error response has a 4xx status code
func (o *UpdateTargetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update target internal server error response has a 5xx status code
func (o *UpdateTargetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update target internal server error response a status code equal to that given
func (o *UpdateTargetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update target internal server error response
func (o *UpdateTargetInternalServerError) Code() int {
	return 500
}

func (o *UpdateTargetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/target/{target_id}][%d] updateTargetInternalServerError %s", 500, payload)
}

func (o *UpdateTargetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /space/{space_id}/target/{target_id}][%d] updateTargetInternalServerError %s", 500, payload)
}

func (o *UpdateTargetInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *UpdateTargetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
