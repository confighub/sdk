// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new target API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new target API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new target API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for target API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTarget(params *CreateTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTargetOK, error)

	CrossListTargets(params *CrossListTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CrossListTargetsOK, error)

	DeleteTarget(params *DeleteTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTargetOK, error)

	GetTarget(params *GetTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTargetOK, error)

	ListTargets(params *ListTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTargetsOK, error)

	UpdateTarget(params *UpdateTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTargetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateTarget creates a target

Create registers a target for a Space
*/
func (a *Client) CreateTarget(params *CreateTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTarget",
		Method:             "POST",
		PathPattern:        "/space/{space_id}/target",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateTarget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CrossListTargets lists all targets across hierarchy

List all Targets across hierarchy
*/
func (a *Client) CrossListTargets(params *CrossListTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CrossListTargetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCrossListTargetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CrossListTargets",
		Method:             "GET",
		PathPattern:        "/target",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CrossListTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CrossListTargetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CrossListTargets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTarget deletes removes a target

Delete removes a target in the space
*/
func (a *Client) DeleteTarget(params *DeleteTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTarget",
		Method:             "DELETE",
		PathPattern:        "/space/{space_id}/target/{target_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteTarget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTarget gets retrieves a target

Get retrieves a target in the space
*/
func (a *Client) GetTarget(params *GetTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTarget",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/target/{target_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTarget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTargets lists all targets

List all Targets
*/
func (a *Client) ListTargets(params *ListTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTargetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTargetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTargets",
		Method:             "GET",
		PathPattern:        "/space/{space_id}/target",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTargetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListTargets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTarget updates retrieves and updates a target

Update retrieves and updates a target in the space
*/
func (a *Client) UpdateTarget(params *UpdateTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTarget",
		Method:             "PUT",
		PathPattern:        "/space/{space_id}/target/{target_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateTarget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
