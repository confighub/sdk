// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// CrossListTargetsReader is a Reader for the CrossListTargets structure.
type CrossListTargetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CrossListTargetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCrossListTargetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCrossListTargetsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCrossListTargetsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCrossListTargetsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCrossListTargetsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /target] CrossListTargets", response, response.Code())
	}
}

// NewCrossListTargetsOK creates a CrossListTargetsOK with default headers values
func NewCrossListTargetsOK() *CrossListTargetsOK {
	return &CrossListTargetsOK{}
}

/*
CrossListTargetsOK describes a response with status code 200, with default header values.

OK
*/
type CrossListTargetsOK struct {
	Payload []*models.ModelsExtendedTarget
}

// IsSuccess returns true when this cross list targets o k response has a 2xx status code
func (o *CrossListTargetsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cross list targets o k response has a 3xx status code
func (o *CrossListTargetsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cross list targets o k response has a 4xx status code
func (o *CrossListTargetsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cross list targets o k response has a 5xx status code
func (o *CrossListTargetsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cross list targets o k response a status code equal to that given
func (o *CrossListTargetsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cross list targets o k response
func (o *CrossListTargetsOK) Code() int {
	return 200
}

func (o *CrossListTargetsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /target][%d] crossListTargetsOK %s", 200, payload)
}

func (o *CrossListTargetsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /target][%d] crossListTargetsOK %s", 200, payload)
}

func (o *CrossListTargetsOK) GetPayload() []*models.ModelsExtendedTarget {
	return o.Payload
}

func (o *CrossListTargetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCrossListTargetsBadRequest creates a CrossListTargetsBadRequest with default headers values
func NewCrossListTargetsBadRequest() *CrossListTargetsBadRequest {
	return &CrossListTargetsBadRequest{}
}

/*
CrossListTargetsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CrossListTargetsBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this cross list targets bad request response has a 2xx status code
func (o *CrossListTargetsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cross list targets bad request response has a 3xx status code
func (o *CrossListTargetsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cross list targets bad request response has a 4xx status code
func (o *CrossListTargetsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cross list targets bad request response has a 5xx status code
func (o *CrossListTargetsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cross list targets bad request response a status code equal to that given
func (o *CrossListTargetsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cross list targets bad request response
func (o *CrossListTargetsBadRequest) Code() int {
	return 400
}

func (o *CrossListTargetsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /target][%d] crossListTargetsBadRequest %s", 400, payload)
}

func (o *CrossListTargetsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /target][%d] crossListTargetsBadRequest %s", 400, payload)
}

func (o *CrossListTargetsBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CrossListTargetsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCrossListTargetsUnauthorized creates a CrossListTargetsUnauthorized with default headers values
func NewCrossListTargetsUnauthorized() *CrossListTargetsUnauthorized {
	return &CrossListTargetsUnauthorized{}
}

/*
CrossListTargetsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CrossListTargetsUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this cross list targets unauthorized response has a 2xx status code
func (o *CrossListTargetsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cross list targets unauthorized response has a 3xx status code
func (o *CrossListTargetsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cross list targets unauthorized response has a 4xx status code
func (o *CrossListTargetsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cross list targets unauthorized response has a 5xx status code
func (o *CrossListTargetsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cross list targets unauthorized response a status code equal to that given
func (o *CrossListTargetsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the cross list targets unauthorized response
func (o *CrossListTargetsUnauthorized) Code() int {
	return 401
}

func (o *CrossListTargetsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /target][%d] crossListTargetsUnauthorized %s", 401, payload)
}

func (o *CrossListTargetsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /target][%d] crossListTargetsUnauthorized %s", 401, payload)
}

func (o *CrossListTargetsUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CrossListTargetsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCrossListTargetsForbidden creates a CrossListTargetsForbidden with default headers values
func NewCrossListTargetsForbidden() *CrossListTargetsForbidden {
	return &CrossListTargetsForbidden{}
}

/*
CrossListTargetsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CrossListTargetsForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this cross list targets forbidden response has a 2xx status code
func (o *CrossListTargetsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cross list targets forbidden response has a 3xx status code
func (o *CrossListTargetsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cross list targets forbidden response has a 4xx status code
func (o *CrossListTargetsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cross list targets forbidden response has a 5xx status code
func (o *CrossListTargetsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cross list targets forbidden response a status code equal to that given
func (o *CrossListTargetsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cross list targets forbidden response
func (o *CrossListTargetsForbidden) Code() int {
	return 403
}

func (o *CrossListTargetsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /target][%d] crossListTargetsForbidden %s", 403, payload)
}

func (o *CrossListTargetsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /target][%d] crossListTargetsForbidden %s", 403, payload)
}

func (o *CrossListTargetsForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CrossListTargetsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCrossListTargetsInternalServerError creates a CrossListTargetsInternalServerError with default headers values
func NewCrossListTargetsInternalServerError() *CrossListTargetsInternalServerError {
	return &CrossListTargetsInternalServerError{}
}

/*
CrossListTargetsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CrossListTargetsInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this cross list targets internal server error response has a 2xx status code
func (o *CrossListTargetsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cross list targets internal server error response has a 3xx status code
func (o *CrossListTargetsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cross list targets internal server error response has a 4xx status code
func (o *CrossListTargetsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cross list targets internal server error response has a 5xx status code
func (o *CrossListTargetsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cross list targets internal server error response a status code equal to that given
func (o *CrossListTargetsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cross list targets internal server error response
func (o *CrossListTargetsInternalServerError) Code() int {
	return 500
}

func (o *CrossListTargetsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /target][%d] crossListTargetsInternalServerError %s", 500, payload)
}

func (o *CrossListTargetsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /target][%d] crossListTargetsInternalServerError %s", 500, payload)
}

func (o *CrossListTargetsInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CrossListTargetsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
