// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// ListTargetsReader is a Reader for the ListTargets structure.
type ListTargetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTargetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListTargetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListTargetsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListTargetsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListTargetsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListTargetsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /space/{space_id}/target] ListTargets", response, response.Code())
	}
}

// NewListTargetsOK creates a ListTargetsOK with default headers values
func NewListTargetsOK() *ListTargetsOK {
	return &ListTargetsOK{}
}

/*
ListTargetsOK describes a response with status code 200, with default header values.

OK
*/
type ListTargetsOK struct {
	Payload []*models.ModelsExtendedTarget
}

// IsSuccess returns true when this list targets o k response has a 2xx status code
func (o *ListTargetsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list targets o k response has a 3xx status code
func (o *ListTargetsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list targets o k response has a 4xx status code
func (o *ListTargetsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list targets o k response has a 5xx status code
func (o *ListTargetsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list targets o k response a status code equal to that given
func (o *ListTargetsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list targets o k response
func (o *ListTargetsOK) Code() int {
	return 200
}

func (o *ListTargetsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target][%d] listTargetsOK %s", 200, payload)
}

func (o *ListTargetsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target][%d] listTargetsOK %s", 200, payload)
}

func (o *ListTargetsOK) GetPayload() []*models.ModelsExtendedTarget {
	return o.Payload
}

func (o *ListTargetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTargetsBadRequest creates a ListTargetsBadRequest with default headers values
func NewListTargetsBadRequest() *ListTargetsBadRequest {
	return &ListTargetsBadRequest{}
}

/*
ListTargetsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ListTargetsBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list targets bad request response has a 2xx status code
func (o *ListTargetsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list targets bad request response has a 3xx status code
func (o *ListTargetsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list targets bad request response has a 4xx status code
func (o *ListTargetsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list targets bad request response has a 5xx status code
func (o *ListTargetsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list targets bad request response a status code equal to that given
func (o *ListTargetsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list targets bad request response
func (o *ListTargetsBadRequest) Code() int {
	return 400
}

func (o *ListTargetsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target][%d] listTargetsBadRequest %s", 400, payload)
}

func (o *ListTargetsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target][%d] listTargetsBadRequest %s", 400, payload)
}

func (o *ListTargetsBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListTargetsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTargetsUnauthorized creates a ListTargetsUnauthorized with default headers values
func NewListTargetsUnauthorized() *ListTargetsUnauthorized {
	return &ListTargetsUnauthorized{}
}

/*
ListTargetsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListTargetsUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list targets unauthorized response has a 2xx status code
func (o *ListTargetsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list targets unauthorized response has a 3xx status code
func (o *ListTargetsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list targets unauthorized response has a 4xx status code
func (o *ListTargetsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list targets unauthorized response has a 5xx status code
func (o *ListTargetsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list targets unauthorized response a status code equal to that given
func (o *ListTargetsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list targets unauthorized response
func (o *ListTargetsUnauthorized) Code() int {
	return 401
}

func (o *ListTargetsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target][%d] listTargetsUnauthorized %s", 401, payload)
}

func (o *ListTargetsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target][%d] listTargetsUnauthorized %s", 401, payload)
}

func (o *ListTargetsUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListTargetsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTargetsForbidden creates a ListTargetsForbidden with default headers values
func NewListTargetsForbidden() *ListTargetsForbidden {
	return &ListTargetsForbidden{}
}

/*
ListTargetsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListTargetsForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list targets forbidden response has a 2xx status code
func (o *ListTargetsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list targets forbidden response has a 3xx status code
func (o *ListTargetsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list targets forbidden response has a 4xx status code
func (o *ListTargetsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list targets forbidden response has a 5xx status code
func (o *ListTargetsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list targets forbidden response a status code equal to that given
func (o *ListTargetsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list targets forbidden response
func (o *ListTargetsForbidden) Code() int {
	return 403
}

func (o *ListTargetsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target][%d] listTargetsForbidden %s", 403, payload)
}

func (o *ListTargetsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target][%d] listTargetsForbidden %s", 403, payload)
}

func (o *ListTargetsForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListTargetsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTargetsInternalServerError creates a ListTargetsInternalServerError with default headers values
func NewListTargetsInternalServerError() *ListTargetsInternalServerError {
	return &ListTargetsInternalServerError{}
}

/*
ListTargetsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ListTargetsInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this list targets internal server error response has a 2xx status code
func (o *ListTargetsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list targets internal server error response has a 3xx status code
func (o *ListTargetsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list targets internal server error response has a 4xx status code
func (o *ListTargetsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list targets internal server error response has a 5xx status code
func (o *ListTargetsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list targets internal server error response a status code equal to that given
func (o *ListTargetsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list targets internal server error response
func (o *ListTargetsInternalServerError) Code() int {
	return 500
}

func (o *ListTargetsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target][%d] listTargetsInternalServerError %s", 500, payload)
}

func (o *ListTargetsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target][%d] listTargetsInternalServerError %s", 500, payload)
}

func (o *ListTargetsInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *ListTargetsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
