// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// GetTargetReader is a Reader for the GetTarget structure.
type GetTargetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTargetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTargetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTargetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTargetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTargetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTargetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTargetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /space/{space_id}/target/{target_id}] GetTarget", response, response.Code())
	}
}

// NewGetTargetOK creates a GetTargetOK with default headers values
func NewGetTargetOK() *GetTargetOK {
	return &GetTargetOK{}
}

/*
GetTargetOK describes a response with status code 200, with default header values.

OK
*/
type GetTargetOK struct {
	Payload *models.ModelsExtendedTarget
}

// IsSuccess returns true when this get target o k response has a 2xx status code
func (o *GetTargetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get target o k response has a 3xx status code
func (o *GetTargetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get target o k response has a 4xx status code
func (o *GetTargetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get target o k response has a 5xx status code
func (o *GetTargetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get target o k response a status code equal to that given
func (o *GetTargetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get target o k response
func (o *GetTargetOK) Code() int {
	return 200
}

func (o *GetTargetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target/{target_id}][%d] getTargetOK %s", 200, payload)
}

func (o *GetTargetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target/{target_id}][%d] getTargetOK %s", 200, payload)
}

func (o *GetTargetOK) GetPayload() *models.ModelsExtendedTarget {
	return o.Payload
}

func (o *GetTargetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsExtendedTarget)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTargetBadRequest creates a GetTargetBadRequest with default headers values
func NewGetTargetBadRequest() *GetTargetBadRequest {
	return &GetTargetBadRequest{}
}

/*
GetTargetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetTargetBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get target bad request response has a 2xx status code
func (o *GetTargetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get target bad request response has a 3xx status code
func (o *GetTargetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get target bad request response has a 4xx status code
func (o *GetTargetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get target bad request response has a 5xx status code
func (o *GetTargetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get target bad request response a status code equal to that given
func (o *GetTargetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get target bad request response
func (o *GetTargetBadRequest) Code() int {
	return 400
}

func (o *GetTargetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target/{target_id}][%d] getTargetBadRequest %s", 400, payload)
}

func (o *GetTargetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target/{target_id}][%d] getTargetBadRequest %s", 400, payload)
}

func (o *GetTargetBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTargetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTargetUnauthorized creates a GetTargetUnauthorized with default headers values
func NewGetTargetUnauthorized() *GetTargetUnauthorized {
	return &GetTargetUnauthorized{}
}

/*
GetTargetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTargetUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get target unauthorized response has a 2xx status code
func (o *GetTargetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get target unauthorized response has a 3xx status code
func (o *GetTargetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get target unauthorized response has a 4xx status code
func (o *GetTargetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get target unauthorized response has a 5xx status code
func (o *GetTargetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get target unauthorized response a status code equal to that given
func (o *GetTargetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get target unauthorized response
func (o *GetTargetUnauthorized) Code() int {
	return 401
}

func (o *GetTargetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target/{target_id}][%d] getTargetUnauthorized %s", 401, payload)
}

func (o *GetTargetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target/{target_id}][%d] getTargetUnauthorized %s", 401, payload)
}

func (o *GetTargetUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTargetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTargetForbidden creates a GetTargetForbidden with default headers values
func NewGetTargetForbidden() *GetTargetForbidden {
	return &GetTargetForbidden{}
}

/*
GetTargetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetTargetForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get target forbidden response has a 2xx status code
func (o *GetTargetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get target forbidden response has a 3xx status code
func (o *GetTargetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get target forbidden response has a 4xx status code
func (o *GetTargetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get target forbidden response has a 5xx status code
func (o *GetTargetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get target forbidden response a status code equal to that given
func (o *GetTargetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get target forbidden response
func (o *GetTargetForbidden) Code() int {
	return 403
}

func (o *GetTargetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target/{target_id}][%d] getTargetForbidden %s", 403, payload)
}

func (o *GetTargetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target/{target_id}][%d] getTargetForbidden %s", 403, payload)
}

func (o *GetTargetForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTargetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTargetNotFound creates a GetTargetNotFound with default headers values
func NewGetTargetNotFound() *GetTargetNotFound {
	return &GetTargetNotFound{}
}

/*
GetTargetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetTargetNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get target not found response has a 2xx status code
func (o *GetTargetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get target not found response has a 3xx status code
func (o *GetTargetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get target not found response has a 4xx status code
func (o *GetTargetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get target not found response has a 5xx status code
func (o *GetTargetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get target not found response a status code equal to that given
func (o *GetTargetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get target not found response
func (o *GetTargetNotFound) Code() int {
	return 404
}

func (o *GetTargetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target/{target_id}][%d] getTargetNotFound %s", 404, payload)
}

func (o *GetTargetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target/{target_id}][%d] getTargetNotFound %s", 404, payload)
}

func (o *GetTargetNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTargetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTargetInternalServerError creates a GetTargetInternalServerError with default headers values
func NewGetTargetInternalServerError() *GetTargetInternalServerError {
	return &GetTargetInternalServerError{}
}

/*
GetTargetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetTargetInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this get target internal server error response has a 2xx status code
func (o *GetTargetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get target internal server error response has a 3xx status code
func (o *GetTargetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get target internal server error response has a 4xx status code
func (o *GetTargetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get target internal server error response has a 5xx status code
func (o *GetTargetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get target internal server error response a status code equal to that given
func (o *GetTargetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get target internal server error response
func (o *GetTargetInternalServerError) Code() int {
	return 500
}

func (o *GetTargetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target/{target_id}][%d] getTargetInternalServerError %s", 500, payload)
}

func (o *GetTargetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /space/{space_id}/target/{target_id}][%d] getTargetInternalServerError %s", 500, payload)
}

func (o *GetTargetInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *GetTargetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
