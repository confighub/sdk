// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetTargetParams creates a new GetTargetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTargetParams() *GetTargetParams {
	return &GetTargetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTargetParamsWithTimeout creates a new GetTargetParams object
// with the ability to set a timeout on a request.
func NewGetTargetParamsWithTimeout(timeout time.Duration) *GetTargetParams {
	return &GetTargetParams{
		timeout: timeout,
	}
}

// NewGetTargetParamsWithContext creates a new GetTargetParams object
// with the ability to set a context for a request.
func NewGetTargetParamsWithContext(ctx context.Context) *GetTargetParams {
	return &GetTargetParams{
		Context: ctx,
	}
}

// NewGetTargetParamsWithHTTPClient creates a new GetTargetParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTargetParamsWithHTTPClient(client *http.Client) *GetTargetParams {
	return &GetTargetParams{
		HTTPClient: client,
	}
}

/*
GetTargetParams contains all the parameters to send to the API endpoint

	for the get target operation.

	Typically these are written to a http.Request.
*/
type GetTargetParams struct {

	/* Include.

	   include filter: The specified string is an expression for the purpose of expanding the related entities of the list of Targets returned. The attribute names are case-sensitive and PascalCase, as in the JSON encoding. Supported attributes for Unit are `OrganizationID`, `SpaceID`, and `BridgeworkerID` . The whole string must be query-encoded and in comma-separated list format.
	*/
	Include *string

	/* SpaceID.

	   Space ID
	*/
	SpaceID string

	/* TargetID.

	   Target ID
	*/
	TargetID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get target params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTargetParams) WithDefaults() *GetTargetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get target params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTargetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get target params
func (o *GetTargetParams) WithTimeout(timeout time.Duration) *GetTargetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get target params
func (o *GetTargetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get target params
func (o *GetTargetParams) WithContext(ctx context.Context) *GetTargetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get target params
func (o *GetTargetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get target params
func (o *GetTargetParams) WithHTTPClient(client *http.Client) *GetTargetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get target params
func (o *GetTargetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInclude adds the include to the get target params
func (o *GetTargetParams) WithInclude(include *string) *GetTargetParams {
	o.SetInclude(include)
	return o
}

// SetInclude adds the include to the get target params
func (o *GetTargetParams) SetInclude(include *string) {
	o.Include = include
}

// WithSpaceID adds the spaceID to the get target params
func (o *GetTargetParams) WithSpaceID(spaceID string) *GetTargetParams {
	o.SetSpaceID(spaceID)
	return o
}

// SetSpaceID adds the spaceId to the get target params
func (o *GetTargetParams) SetSpaceID(spaceID string) {
	o.SpaceID = spaceID
}

// WithTargetID adds the targetID to the get target params
func (o *GetTargetParams) WithTargetID(targetID string) *GetTargetParams {
	o.SetTargetID(targetID)
	return o
}

// SetTargetID adds the targetId to the get target params
func (o *GetTargetParams) SetTargetID(targetID string) {
	o.TargetID = targetID
}

// WriteToRequest writes these params to a swagger request
func (o *GetTargetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Include != nil {

		// query param include
		var qrInclude string

		if o.Include != nil {
			qrInclude = *o.Include
		}
		qInclude := qrInclude
		if qInclude != "" {

			if err := r.SetQueryParam("include", qInclude); err != nil {
				return err
			}
		}
	}

	// path param space_id
	if err := r.SetPathParam("space_id", o.SpaceID); err != nil {
		return err
	}

	// path param target_id
	if err := r.SetPathParam("target_id", o.TargetID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
