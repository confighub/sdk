// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// CreateTargetReader is a Reader for the CreateTarget structure.
type CreateTargetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateTargetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateTargetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateTargetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateTargetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateTargetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateTargetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /space/{space_id}/target] CreateTarget", response, response.Code())
	}
}

// NewCreateTargetOK creates a CreateTargetOK with default headers values
func NewCreateTargetOK() *CreateTargetOK {
	return &CreateTargetOK{}
}

/*
CreateTargetOK describes a response with status code 200, with default header values.

OK
*/
type CreateTargetOK struct {
	Payload *models.ModelsTarget
}

// IsSuccess returns true when this create target o k response has a 2xx status code
func (o *CreateTargetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create target o k response has a 3xx status code
func (o *CreateTargetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create target o k response has a 4xx status code
func (o *CreateTargetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create target o k response has a 5xx status code
func (o *CreateTargetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create target o k response a status code equal to that given
func (o *CreateTargetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create target o k response
func (o *CreateTargetOK) Code() int {
	return 200
}

func (o *CreateTargetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/target][%d] createTargetOK %s", 200, payload)
}

func (o *CreateTargetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/target][%d] createTargetOK %s", 200, payload)
}

func (o *CreateTargetOK) GetPayload() *models.ModelsTarget {
	return o.Payload
}

func (o *CreateTargetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsTarget)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTargetBadRequest creates a CreateTargetBadRequest with default headers values
func NewCreateTargetBadRequest() *CreateTargetBadRequest {
	return &CreateTargetBadRequest{}
}

/*
CreateTargetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateTargetBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this create target bad request response has a 2xx status code
func (o *CreateTargetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create target bad request response has a 3xx status code
func (o *CreateTargetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create target bad request response has a 4xx status code
func (o *CreateTargetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create target bad request response has a 5xx status code
func (o *CreateTargetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create target bad request response a status code equal to that given
func (o *CreateTargetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create target bad request response
func (o *CreateTargetBadRequest) Code() int {
	return 400
}

func (o *CreateTargetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/target][%d] createTargetBadRequest %s", 400, payload)
}

func (o *CreateTargetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/target][%d] createTargetBadRequest %s", 400, payload)
}

func (o *CreateTargetBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CreateTargetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTargetUnauthorized creates a CreateTargetUnauthorized with default headers values
func NewCreateTargetUnauthorized() *CreateTargetUnauthorized {
	return &CreateTargetUnauthorized{}
}

/*
CreateTargetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateTargetUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this create target unauthorized response has a 2xx status code
func (o *CreateTargetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create target unauthorized response has a 3xx status code
func (o *CreateTargetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create target unauthorized response has a 4xx status code
func (o *CreateTargetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create target unauthorized response has a 5xx status code
func (o *CreateTargetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create target unauthorized response a status code equal to that given
func (o *CreateTargetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create target unauthorized response
func (o *CreateTargetUnauthorized) Code() int {
	return 401
}

func (o *CreateTargetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/target][%d] createTargetUnauthorized %s", 401, payload)
}

func (o *CreateTargetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/target][%d] createTargetUnauthorized %s", 401, payload)
}

func (o *CreateTargetUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CreateTargetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTargetForbidden creates a CreateTargetForbidden with default headers values
func NewCreateTargetForbidden() *CreateTargetForbidden {
	return &CreateTargetForbidden{}
}

/*
CreateTargetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateTargetForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this create target forbidden response has a 2xx status code
func (o *CreateTargetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create target forbidden response has a 3xx status code
func (o *CreateTargetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create target forbidden response has a 4xx status code
func (o *CreateTargetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create target forbidden response has a 5xx status code
func (o *CreateTargetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create target forbidden response a status code equal to that given
func (o *CreateTargetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create target forbidden response
func (o *CreateTargetForbidden) Code() int {
	return 403
}

func (o *CreateTargetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/target][%d] createTargetForbidden %s", 403, payload)
}

func (o *CreateTargetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/target][%d] createTargetForbidden %s", 403, payload)
}

func (o *CreateTargetForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CreateTargetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTargetInternalServerError creates a CreateTargetInternalServerError with default headers values
func NewCreateTargetInternalServerError() *CreateTargetInternalServerError {
	return &CreateTargetInternalServerError{}
}

/*
CreateTargetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateTargetInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this create target internal server error response has a 2xx status code
func (o *CreateTargetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create target internal server error response has a 3xx status code
func (o *CreateTargetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create target internal server error response has a 4xx status code
func (o *CreateTargetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create target internal server error response has a 5xx status code
func (o *CreateTargetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create target internal server error response a status code equal to that given
func (o *CreateTargetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create target internal server error response
func (o *CreateTargetInternalServerError) Code() int {
	return 500
}

func (o *CreateTargetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/target][%d] createTargetInternalServerError %s", 500, payload)
}

func (o *CreateTargetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /space/{space_id}/target][%d] createTargetInternalServerError %s", 500, payload)
}

func (o *CreateTargetInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *CreateTargetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
