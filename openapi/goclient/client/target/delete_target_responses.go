// Copyright (C) ConfigHub, Inc.
// SPDX-License-Identifier: MIT

// Code generated by go-swagger; DO NOT EDIT.
package target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/confighub/sdk/openapi/goclient/models"
)

// DeleteTargetReader is a Reader for the DeleteTarget structure.
type DeleteTargetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTargetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteTargetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteTargetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteTargetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteTargetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteTargetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteTargetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /space/{space_id}/target/{target_id}] DeleteTarget", response, response.Code())
	}
}

// NewDeleteTargetOK creates a DeleteTargetOK with default headers values
func NewDeleteTargetOK() *DeleteTargetOK {
	return &DeleteTargetOK{}
}

/*
DeleteTargetOK describes a response with status code 200, with default header values.

Ok
*/
type DeleteTargetOK struct {
	Payload string
}

// IsSuccess returns true when this delete target o k response has a 2xx status code
func (o *DeleteTargetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete target o k response has a 3xx status code
func (o *DeleteTargetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete target o k response has a 4xx status code
func (o *DeleteTargetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete target o k response has a 5xx status code
func (o *DeleteTargetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete target o k response a status code equal to that given
func (o *DeleteTargetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete target o k response
func (o *DeleteTargetOK) Code() int {
	return 200
}

func (o *DeleteTargetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/target/{target_id}][%d] deleteTargetOK %s", 200, payload)
}

func (o *DeleteTargetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/target/{target_id}][%d] deleteTargetOK %s", 200, payload)
}

func (o *DeleteTargetOK) GetPayload() string {
	return o.Payload
}

func (o *DeleteTargetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTargetBadRequest creates a DeleteTargetBadRequest with default headers values
func NewDeleteTargetBadRequest() *DeleteTargetBadRequest {
	return &DeleteTargetBadRequest{}
}

/*
DeleteTargetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteTargetBadRequest struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete target bad request response has a 2xx status code
func (o *DeleteTargetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete target bad request response has a 3xx status code
func (o *DeleteTargetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete target bad request response has a 4xx status code
func (o *DeleteTargetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete target bad request response has a 5xx status code
func (o *DeleteTargetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete target bad request response a status code equal to that given
func (o *DeleteTargetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete target bad request response
func (o *DeleteTargetBadRequest) Code() int {
	return 400
}

func (o *DeleteTargetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/target/{target_id}][%d] deleteTargetBadRequest %s", 400, payload)
}

func (o *DeleteTargetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/target/{target_id}][%d] deleteTargetBadRequest %s", 400, payload)
}

func (o *DeleteTargetBadRequest) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteTargetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTargetUnauthorized creates a DeleteTargetUnauthorized with default headers values
func NewDeleteTargetUnauthorized() *DeleteTargetUnauthorized {
	return &DeleteTargetUnauthorized{}
}

/*
DeleteTargetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteTargetUnauthorized struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete target unauthorized response has a 2xx status code
func (o *DeleteTargetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete target unauthorized response has a 3xx status code
func (o *DeleteTargetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete target unauthorized response has a 4xx status code
func (o *DeleteTargetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete target unauthorized response has a 5xx status code
func (o *DeleteTargetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete target unauthorized response a status code equal to that given
func (o *DeleteTargetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete target unauthorized response
func (o *DeleteTargetUnauthorized) Code() int {
	return 401
}

func (o *DeleteTargetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/target/{target_id}][%d] deleteTargetUnauthorized %s", 401, payload)
}

func (o *DeleteTargetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/target/{target_id}][%d] deleteTargetUnauthorized %s", 401, payload)
}

func (o *DeleteTargetUnauthorized) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteTargetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTargetForbidden creates a DeleteTargetForbidden with default headers values
func NewDeleteTargetForbidden() *DeleteTargetForbidden {
	return &DeleteTargetForbidden{}
}

/*
DeleteTargetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteTargetForbidden struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete target forbidden response has a 2xx status code
func (o *DeleteTargetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete target forbidden response has a 3xx status code
func (o *DeleteTargetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete target forbidden response has a 4xx status code
func (o *DeleteTargetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete target forbidden response has a 5xx status code
func (o *DeleteTargetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete target forbidden response a status code equal to that given
func (o *DeleteTargetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete target forbidden response
func (o *DeleteTargetForbidden) Code() int {
	return 403
}

func (o *DeleteTargetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/target/{target_id}][%d] deleteTargetForbidden %s", 403, payload)
}

func (o *DeleteTargetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/target/{target_id}][%d] deleteTargetForbidden %s", 403, payload)
}

func (o *DeleteTargetForbidden) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteTargetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTargetNotFound creates a DeleteTargetNotFound with default headers values
func NewDeleteTargetNotFound() *DeleteTargetNotFound {
	return &DeleteTargetNotFound{}
}

/*
DeleteTargetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteTargetNotFound struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete target not found response has a 2xx status code
func (o *DeleteTargetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete target not found response has a 3xx status code
func (o *DeleteTargetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete target not found response has a 4xx status code
func (o *DeleteTargetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete target not found response has a 5xx status code
func (o *DeleteTargetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete target not found response a status code equal to that given
func (o *DeleteTargetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete target not found response
func (o *DeleteTargetNotFound) Code() int {
	return 404
}

func (o *DeleteTargetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/target/{target_id}][%d] deleteTargetNotFound %s", 404, payload)
}

func (o *DeleteTargetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/target/{target_id}][%d] deleteTargetNotFound %s", 404, payload)
}

func (o *DeleteTargetNotFound) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteTargetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTargetInternalServerError creates a DeleteTargetInternalServerError with default headers values
func NewDeleteTargetInternalServerError() *DeleteTargetInternalServerError {
	return &DeleteTargetInternalServerError{}
}

/*
DeleteTargetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteTargetInternalServerError struct {
	Payload *models.ModelsErrorMessage
}

// IsSuccess returns true when this delete target internal server error response has a 2xx status code
func (o *DeleteTargetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete target internal server error response has a 3xx status code
func (o *DeleteTargetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete target internal server error response has a 4xx status code
func (o *DeleteTargetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete target internal server error response has a 5xx status code
func (o *DeleteTargetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete target internal server error response a status code equal to that given
func (o *DeleteTargetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete target internal server error response
func (o *DeleteTargetInternalServerError) Code() int {
	return 500
}

func (o *DeleteTargetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/target/{target_id}][%d] deleteTargetInternalServerError %s", 500, payload)
}

func (o *DeleteTargetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /space/{space_id}/target/{target_id}][%d] deleteTargetInternalServerError %s", 500, payload)
}

func (o *DeleteTargetInternalServerError) GetPayload() *models.ModelsErrorMessage {
	return o.Payload
}

func (o *DeleteTargetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
